{
	"items": [{
		"_archived": false,
		"_draft": false,
		"academy-video-link": {
			"url": "https://youtu.be/BVYHY34OEHE",
			"metadata": {
				"width": 854,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FBVYHY34OEHE&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DBVYHY34OEHE&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"854\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "- YouTube",
				"provider_name": "YouTube",
				"type": "video",
				"description": "Enjoy the videos and music you love, upload original content, and share it all with friends, family, and the world on YouTube."
			}
		},
		"published-date-initial-load": "2022-07-21T00:00:00.000Z",
		"canonical-2": "http://www.8base.com/8base-academy/writing-and-running-advanced-cron-jobs-on-task-functions",
		"order": 36,
		"name": "Writing and Running Advanced CRON Jobs on Task Functions",
		"video-link": "BVYHY34OEHE",
		"time": "10:33",
		"transcript": "<p id=\"\">Speaker 1 (00:03)<br>Hey everyone. Today we're going to be looking at how you can set up cron jobs in 8base, which is essentially saying how can I run a task function on a nontypical schedule? Before we jump into it, I'm going to read you a quick little sentence. I want to run a function at the half hour every hour between 9:00 PM and 5:00 PM every month of the year within the first 7 days of the month. Let's do it. Cool.</p><p id=\"\">Speaker 1 (00:31)<br>Just as a little bit of set-up, I have created a new directory for server functions using the 8base command line. I have the 8base command line installed, NPM install 8base CLI or Yarn, whichever package manager you use. I'll include a link in the video description that gives you a little bit more of the environment set up. However, I run 8base in net that creates my new project and then I just deleted some of the boilerplate that comes in there, so we have a completely empty project here.</p><p id=\"\">Speaker 1 (01:00)<br>Now, the first thing that we are going to want to do is run 8base generate task. We're going to generate a task function and then we're going to call this my cron job. We're not going to actually get into writing functions, just going to focus on cron syntax and validating that. Then we're going to say that the syntax is going to be JavaScript. Once we run that, it's going to go ahead and generate the function declaration for us and we have the function here, if we wanted to write the function code. I'm just going to x out of that.</p><p id=\"\">Speaker 1 (01:32)<br>Now we can add another argument to the declaration which is called schedule. Here is where we actually have to give it a schedule. Now I'm going to jump over to the AWS docs here. Under the hood of 8base, the function that you write is going to be deployed to lambda and lambda is going to be the one that executes that function. Using CloudWatch behind the scenes, that's what is going to actually utilize the syntax that we give it to know on which cadence we want to actually trigger that event or trigger that function.</p><p id=\"\">Speaker 1 (02:07)<br>Now, because of that, we have two different ways of specifying the schedule. One way which is called the simple way, is a rate expression. You say at a rate of a value in unit and the values are minute or minutes, so one minute or five minutes, hour or hours, 1 hour or 5 hours, day or days, one day, five days. Now, that works great because a lot of the time you just need to run once a day or every few hours. We don't have to be that specific.</p><p id=\"\">Speaker 1 (02:37)<br>However, in the example that we gave on the intro of this video, that's not going to fly. We have to have a much more sophisticated approach to how we actually specify that interval. The way that we do that is using cron. Now cron expressions they allow you to specify the minute, hours, day of the month, month, day of the week and the year. For example, here are some examples that DWS stocks give you around different types of cron jobs that you can set up.</p><p id=\"\">Speaker 1 (03:10)<br>We're going to do a couple of things here. First off is here's something called Freeformata.com, Cron Expression Generator. This is actually going to help us just use a form to generate our cron syntax. If you really want to learn cron, you can go through it. I don't find it to be that interesting of a language, so I'd rather just use the generator and then do a few of the tweaks that we needed to do to validate it.</p><p id=\"\">Speaker 1 (03:32)<br>Here what we're going to do is go through and start based on that description that we use, filling out the form. There was no specification on the second, so we're just going to say any second, that's the year, so seconds, cool. We're just going to say any second or every second, any second, here we go. Cool. Then we're going to say on the minute, so we said every 30 minutes or on the minute. We're going to uncheck that and just leave the 30th minute checked.</p><p id=\"\">Speaker 1 (04:07)<br>The hours, we can see I already filled out this form, but the hours that we specified were at 9-5, so every hour starting at 9, excuse me, other way around. Every hour starting at nine, we have to do it between the two hours. I filled that wrong the first time. Between the 9th hour and the 16th hour. Cool, 9-16, awesome.</p><p id=\"\">Speaker 1 (04:35)<br>Now the days of the month we want it to be on Monday, Tuesday, Wednesday, Thursday, Friday. During those weekdays on the first seven days of the month. Those the days of the week, okay, cool. We want to change that. Here we can do it on the first seven days of the month. Cool. Awesome. That's up to you there. Then we can go to the month and we want to do it every month of the year so we can leave that and then we want to do it every year. But as you can see, there's a ton of different options in here that we could utilize. However, this is our expression now, so any second, every 30 minutes, I think that's actually going to trip us up on there any second, I think that would be every second. I'm just going to click it. I'm going to leave it that way because you'll see in a minute. Every 30 minutes between 9 and 6, the first 7 days of the month, every month, any year, any day of the week, every year. Cool.</p><p id=\"\">Speaker 1 (05:48)<br>I'm going to copy that. I'm going to go back into our code editor. What I'm going to do is I'm just going to drop it in here and if you looked at the docs, if you want to use a rate, you have to say rate, if you want to use cron to put in the cron and put in the brackets. Now we need a way of validating this before we deploy it, 'cause if it's not right, it's just going to wait for deploy, or wait a few minutes and they'll say this is invalid.</p><p id=\"\">Speaker 1 (06:15)<br>What we're going to do is we're going to write a little script that allows us to perform that validation. I'm going to something called crontest.js and the root of my directory here and cool, we have our file there. Then I'm going to go to and install this NPM module called aws-cron-parser. I'm going to copy that and install it in my project. Cool. I'm just going to copy their usage here. Since what we're going to do is, we don't need to get… The next one we just want to see that this is valid. I'm just going to write a little console.log statement here which shows us that our result. Print that to a new line, is the call it now occurrence, which is going to then have the occurrence and then let's make this available to, occurrence next, as well as, let's give it a new line once again. Then we can just copy this line down here for the next occurrence and occurrence next. Awesome.</p><p id=\"\">Speaker 1 (07:45)<br>Let me go grab that cron syntax. Here we don't need to actually give it the function declaration. I think that's what it would be. We can just give it the actual string and so we've dropped that in there. Now let's run our function using node cron test js and cool. Since we're not a module, we have to use a require, sp constant AWS Parser equals quire constant. Awesome, so not a valid number, so we're getting an error here. The reason being for that is because with CloudWatch, if we look here with CloudWatch events they don't support seconds. The intervals that you can do are based on minutes, hours, day of the month, month, day of the week and year.</p><p id=\"\">Speaker 1 (08:46)<br>That first one and if you look at a bunch of different cron providers, they all have a different syntax and they try to embellish theirs with some different helpers or decorators, so it's a little bit all over the place. But if you see here, you can see that this one did allow us to specify seconds, so it's a different system. Pretty simple. All we have to do is delete the first number 'cause that was specifying the seconds where it should have been. Let's try it again. Cron test, awesome. Now we see that we are getting the… The currents now would be coming at 9:30 on the first day of next month, and then the next occurrence after that would be at 10:30 on the same day. Our cron syntax is looking like it's working accurately, and the script helped us validate that.</p><p id=\"\">Speaker 1 (09:41)<br>Now what I can do is I can take that syntax and drop it into my cron job with 8base. Imagining that the code was written and everything was working as expected, I could either run 8base deploy, deployed directly to my workspace, which would hopefully be your development environment, or commit it to GitHub and let the Git-Repo or an action script handle that.</p><p id=\"\">Speaker 1 (10:04)<br>I hope that this gave you some helpful tips on some resources that you can leverage to start writing more complex or more advanced cron jobs to specify the schedule or cadence on what your task functions will invoke. If you found this video helpful, please give it a thumbs up. If you would like to get updates when future videos are released, please subscribe to the channel. As always, happy developing and looking forward to seeing you in future videos. Take it easy.</p><p id=\"\">‍</p>",
		"post-summary": "In this video, we're going to learn how to write and run advanced CRON jobs on Task functions.",
		"slug": "writing-and-running-advanced-cron-jobs-on-task-functions",
		"thumbnail-image": {
			"fileId": "62bb9f44765e946c12ce177c",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/62bb9f44765e946c12ce177c_Youtube%20Covers%20(2).png",
			"alt": null
		},
		"author": "61cd9c61af1149d1980b10aa",
		"video-tags": ["61cd9c61af114930440b0ba8", "61cd9c61af114959330b0bf1", "61cd9c61af1149661d0b0bf2", "61cd9c61af11495ba20b0ba9"],
		"updated-on": "2022-07-04T12:10:12.105Z",
		"updated-by": "Collaborator_5e55457e71987f51d810ff2c",
		"created-on": "2022-06-29T00:40:42.935Z",
		"created-by": "Collaborator_5e55457e71987f51d810ff2c",
		"published-on": null,
		"published-by": null,
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "62bb9f8aa08b49abcb53aeea"
	}, {
		"_archived": false,
		"_draft": false,
		"academy-video-link": {
			"url": "https://youtu.be/FHZ1Pk8HbVo",
			"metadata": {
				"width": 854,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FFHZ1Pk8HbVo&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DFHZ1Pk8HbVo&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"854\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "- YouTube",
				"provider_name": "YouTube",
				"type": "video",
				"description": "Enjoy the videos and music you love, upload original content, and share it all with friends, family, and the world on YouTube."
			}
		},
		"published-date-initial-load": "2022-07-14T00:00:00.000Z",
		"canonical-2": "http://www.8base.com/8base-academy/getting-started-with-the-react-js-starter-app",
		"order": 35,
		"name": "Getting Started with the React.js Starter App",
		"video-link": "FHZ1Pk8HbVo",
		"time": "04:34",
		"transcript": "<p id=\"\">Sebastian Scholl (00:03)<br>Hey everyone, this is Sebastian here from 8base. Today, I'm going to be walking you through the 8base React Starter app, just to show how quickly you can get up and running for building a ReactJS application that is using an 8base backend. Let's dive into it.</p><p id=\"\">Sebastian Scholl (00:17)<br>Cool. Here I am in GitHub at the React 8base Starter app repo. Now, inside of this repository, we have a readme that will walk you through the steps of setting this up. But I'm just going to walk you through it and then point out some things in the repository or in the code files that will help you understand contextually what you're working with.</p><p id=\"\">Sebastian Scholl (00:38)<br>The first thing I'm going to do is copy the URL and clone it down to my computer. Let me open up JS code here and I'm in my temp directory. I'm just going to write git clone and I'm just going to leave it with the default name. I'm going to move into that file, so change directory here.</p><p id=\"\">Sebastian Scholl (01:02)<br>Now the first thing we're going to want to do is there is a .env file that shows all the different information that we need to set as environment variables. I'm just going to do that into a... I'm going to make a local.env or env.local file for the same stuff.</p><p id=\"\">Sebastian Scholl (01:26)<br>I'm just going to throw that into a .env .local, just good practice. Now I'm going to open this folder up on my computer. Cool. Let me go to my... I'm just navigating my file structure here so I can get it. Cool.</p><p id=\"\">Sebastian Scholl (01:46)<br>Awesome, here we are. Close everything. I spelled that wrong, .env, good. Now what we're going to do is we're going to jump back into the 8base console to start collecting all these different environment variable values that we need to set, starting with the workspace endpoint.</p><p id=\"\">Sebastian Scholl (02:05)<br>Let me go to a backend that I have opened. It could be any 8base workspace, it doesn't really matter. I'm using my super task backend. I'm going to go here and copy my API endpoint and then drop that into there.</p><p id=\"\">Sebastian Scholl (02:20)<br>Next is just three different off profile relevant keys. Let me go to App Services, Authentication and set up React Auth Profile. Call it whatever you want. We're going to leave as 8base authentication for now and then say that this is open to all. So that meaning that anyone could sign up through this application, and we'll point out what that means in a little bit, and then just assign a random role to that user when they sign up.</p><p id=\"\">Sebastian Scholl (02:52)<br>Add the profile. Cool. Now I'm going to take that profile ID which is right here and I'm going to set it as the auth profile ID. I'm going to take client ID, which is right here and I'm going to set that as the auth client ID. Then I'm going to set the auth domain here as well. Cool.</p><p id=\"\">Sebastian Scholl (03:17)<br>Now we can run npm run start. Actually no, we can't. We still have to install running[inaudible 00:03:25] install our dependencies. So that is going to run for just a minute and I will be back when it's done.</p><p id=\"\">Sebastian Scholl (03:34)<br>Cool. A lot of logs but no errors, so we're good to go. Now we're just going to run npm run start, and start up our application. Cool. Now it is loading, and one second. Let's see. Cool. Compiled successfully. Awesome.</p><p id=\"\">Sebastian Scholl (03:56)<br>So here we are with our app. We can see that there's a router installed, so we have these two different pages. We're on the home page and the sign in button. This is already set up with off module with a API connection to the 8base backend, as well as like some other stuff that we're going to look at.</p><p id=\"\">Sebastian Scholl (04:15)<br>However, let's do a test run. Let's click Sign in. It's going to take me to my hosted login page. I'm going to click Sign up. Here, I'm going to just use my random email account I have: SS, super secret password, and click Sign up.</p><p id=\"\">Sebastian Scholl (04:36)<br>Someone already exists with that. Let me just go into my backend really quickly, and here we can go... Oh, here. No wonder. There we go. Here's my backend. I'm going to go to Users, Data, delete this here. Awesome. Now let's go back to our app, and awesome.</p><p id=\"\">Sebastian Scholl (05:12)<br>Sign up, go through the steps again. We're going to do... Cool. Loading, awesome. We're authenticating our app now. Now we see that when we go to the Profile page, it's actually doing an API call to the backend, which is authenticated because it's getting back our name and ID and our email address. Awesome, so that all works.</p><p id=\"\">Sebastian Scholl (05:39)<br>Let's take a quick look now back at the code. So pretty straightforward ReactJS application. So first thing, if we go into the source and we look at our application.js file, we can see that we are importing a component called the AppProvider from the 8base React SDK. Essentially this is what we pass our off-client to as well as our workspace endpoint, and it knows to communicate then with the on the base API.</p><p id=\"\">Sebastian Scholl (06:10)<br>We also have our routes, which if we pull from the route file here, we can see the different routes that we had set up. We also have a component which is a protected route. This is essentially handling the check of whether or not we are authenticated or not authenticated to protect against accessing certain routes in the application.</p><p id=\"\">Sebastian Scholl (06:28)<br>But pretty straightforward if we are authorized, which is coming from this useAuth function, which is coming once again from 8base React SDK. It checks, it will render the component with the properties if we are authenticated on a protected route. If not, it's going to redirect us to our auth path, and so we make a sign in. Pretty straightforward.</p><p id=\"\">Sebastian Scholl (06:54)<br>That's really it. I think that's what we have to cover on this one. As a React developer, I'm sure that you can jump in here and use it however you want, reformat however you needed. However, hopefully this is a great little starting point for you, to start developing a new application using ReactJS and and a 8base backend.</p><p id=\"\">Sebastian Scholl (07:14)<br>Cool. I hope that this got you excited about starting a new project with ReactJS and 8Base. 8base is really an amazing backend technology for developing with these modern frontend frameworks as in a few minutes you can have this really scalable and awesome backend to start developing against and using that graphical API just has a great developer experience.</p><p id=\"\">Sebastian Scholl (07:36)<br>If you found this helpful, please give it a thumbs up. If you want to get updates when new videos come out in the future, please subscribe to the channel. Happy developing and looking forward to seeing you in future episodes.</p><p id=\"\">‍</p>",
		"post-summary": "In this video, we're going to take a look at the React.js Starter App.",
		"slug": "getting-started-with-the-react-js-starter-app",
		"thumbnail-image": {
			"fileId": "62bb98f692072441c81114e0",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/62bb98f692072441c81114e0_Youtube%20Covers%20(1).png",
			"alt": null
		},
		"video-tags": ["61cd9c61af11495ba20b0ba9", "61cd9c61af1149dd0a0b0bab"],
		"author": "61cd9c61af1149d1980b10aa",
		"updated-on": "2022-07-14T19:00:02.887Z",
		"updated-by": "Collaborator_5e55457e71987f51d810ff2c",
		"created-on": "2022-06-29T00:21:34.008Z",
		"created-by": "Collaborator_5e55457e71987f51d810ff2c",
		"published-on": "2022-07-14T19:00:02.887Z",
		"published-by": "Collaborator_5e55457e71987f51d810ff2c",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "62bb9b0e48d86718f8db4449"
	}, {
		"_archived": false,
		"_draft": false,
		"academy-video-link": {
			"url": "https://youtu.be/36RzaqLxURA",
			"metadata": {
				"width": 854,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F36RzaqLxURA&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D36RzaqLxURA&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"854\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "- YouTube",
				"provider_name": "YouTube",
				"type": "video",
				"description": "Enjoy the videos and music you love, upload original content, and share it all with friends, family, and the world on YouTube."
			}
		},
		"published-date-initial-load": "2022-07-07T00:00:00.000Z",
		"canonical-2": "http://www.8base.com/8base-academy/getting-started-with-the-vue-2-starter-app",
		"order": 34,
		"name": "Getting Started with the Vue 2 Starter App",
		"video-link": "36RzaqLxURA",
		"time": "11:25",
		"transcript": "<p id=\"\">Sebastian Scholl (00:03)<br>Hey, everyone. This is Sebastian here from 8base. Today, what I'm going to be doing is walking you through how to get set up with our Vue 2 Starter app, so that in just a few minutes, you can have a fully functioning Vue.js application that has authentication pre-enabled as well as an API connection to an 8base workspace so you can just start developing your front-end application really fast. Let's get into it.</p><p id=\"\">Sebastian Scholl (00:27)<br>Here in the 8base GitHub is where we have the Vue 8base Starter application. I'll put the link in the description of the video so you can access it easily. However, there's a readme that walks through these steps, but I'm going to walk you through it and then just point out some things inside the repository to help contextualize the way it's structured and just to help make some sense of it.</p><p id=\"\">Sebastian Scholl (00:48)<br>The first thing I'm going to do is actually clone down the repo. I'm going to copy the repo link and then open a new terminal window. Now inside here, I'm going to move into my code, 8base, temp folder where here I don't have any projects. I'm going to go into Git, clone the repo here. I'm just going to leave it in the same name.</p><p id=\"\">Sebastian Scholl (01:16)<br>Once that is copied to my computer locally, I'm going to move into that directory and just run npm install. As of today, which is June 17th, 2022, all the dependencies are up to date. If you're watching this video a year from now, hopefully no issues are running, but we'll also try to keep the starter app up to date as frequently as possible, as well as roll more of these out with different frameworks.</p><p id=\"\">Sebastian Scholl (01:45)<br>That installed successfully. Now if we go to the Starter app readme, we can see this says run npm install and then create a local environment variable file. We're going to have to create these environment variables. I'm just going to copy the template for them.</p><p id=\"\">Sebastian Scholl (02:03)<br>Then here I'm just going to say touch .env.local, just for our local environment variables. Then I'm going to use the pbpaste command into that .env.local folder. Now if we see the contents of our environment variable file, got it, we have all the environment variables in there that we need. We just need to set the values now.</p><p id=\"\">Sebastian Scholl (02:29)<br>At this point, I'm actually going to open up the app in my IDE, which I can stretch out there. I'm going to open a terminal window so I have that. Awesome.</p><p id=\"\">Sebastian Scholl (02:41)<br>Let's just open the environment variables file so we just knock this out of the way. It's running on port 3000. You can change the port depending on whatever port you want to run your app on.</p><p id=\"\">Sebastian Scholl (02:51)<br>However, there's five environment variables that we need to set: the workspace endpoint; that's your API endpoint for the workspace or workspace environment that you want to work with, the auth-profile ID and the client ID, and the Auth client domain, which we are all going to get from authentication profile, and then separately, the workspace ID. If we wanted to, technically, we could use one to create the other, but we're just creating them all as separate variables right now.</p><p id=\"\">Sebastian Scholl (03:15)<br>Let's go back to the browser. Here, I'm in one of my 8base workspaces that I use in a lot of these tutorials called Supertasks Backend, so it could be any workspace, it doesn't really matter. I'm going to go first to my home and I'm going to get the workspace API endpoint. Let's copy that one over.</p><p id=\"\">Sebastian Scholl (03:41)<br>I'm just going to snag the workspace ID right off the end of that. Since I have CI/CD enabled in this workspace, you can see that the environment name, multitenant, is at the end of this workspace ID. You may not have that if you're just using a developer workspace or dev workspace, but no, that's why there's a funky name on the end of there.</p><p id=\"\">Sebastian Scholl (04:04)<br>Next, I'm going to go into my app services and create a new authentication profile. In here, I'm just going to call this VUE, I don't know why I pronounced it weird, but VUE_APP_AUTH_PROFILE. We leave as 8base authentication. Once again, we have some other guides on how you can set up with auth0 or on Cognito. It all works the same way, but we'll just use 8base off for now.</p><p id=\"\">Sebastian Scholl (04:33)<br>I'm just going to say anyone can sign up for this app, and anyone that does sign up is going to have the user role. Add that profile and now that gives all the other information that we need to set. First off is the Auth profile ID. I'm going to snag that and drop that in the Auth profile ID field or variable, the client ID, which I can get from here, and then finally, the domain. I'm going to stack the domain.</p><p id=\"\">Sebastian Scholl (05:12)<br>With all our environment variables set, just going to open another terminal in case I want to get back to here. I'm going to run npm run start. Oh, one second. What's the right command? Serve, excuse me, npm run serve. Starting up our development server. Now the app is running at local host.</p><p id=\"\">Sebastian Scholl (05:41)<br>Now we have our app. As we can see, it says you need to log in, so that's a hint that there's authentication there. We have a few different pages, so the vue-router is installed. As well as then we have the profile, which is disabled because we're not logged in. I'm going to go and sign in, which brings me to the hosted login page, which in this case is offered by Cognito. That's what's happening behind the scenes for 8base at this point or 8base off.</p><p id=\"\">Sebastian Scholl (06:08)<br>I'm going to sign up as a user. Here, I'm going to use my one random inbox account, Sebastian Scholl. You know what? Before I do that, I'm going to delete myself as a user; in this workspace, I was already there, so that there's not a conflict. If I had done that, it would just say that you already signed up, so we're just avoiding that.</p><p id=\"\">Sebastian Scholl (06:37)<br>Sign up. Just going to wait a minute. Then I'm going to give it a super secret password, and I'm going to sign up. It redirected me back to the application. Now I'm logged in and it's returning me my user data showing that I've now been created and signed up as an authenticated user. Now we can see that the profile is available and that's actually using the API request to go get my information from the base back end, showing that I'm authenticated via the API.</p><p id=\"\">Sebastian Scholl (07:08)<br>Everything works. At this point, you could jump into the Vue.js app and start building whatever you want to build. It's a really easy to get started Starter app.</p><p id=\"\">Sebastian Scholl (07:19)<br>A couple of things. First off is that there's a folder in the root directory called 8base. Inside here, there is an index file which you can import everything from. It just imports the two different modules that we're using, which is the API module and the Auth module.</p><p id=\"\">Sebastian Scholl (07:35)<br>Then here, we have the API, which here we can see that we're using Apollo Client. This is just a configuration of Apollo Client, which works pretty well. It has the link for the API, which is where it's in that environment variable, has an error handler for GraphQL errors or network errors, which you can change as you need. Then it sets the contacts with a function. Whenever an API request is made, it goes and tries to get the ID token they stored in the state, which brings us to the next thing, which is that VueX is being used as the state management system.</p><p id=\"\">Sebastian Scholl (08:16)<br>If you go to the store, modules, here, we can see that we have one module being set in the VueX store, which is the session. If I go to the session module here, it's all set up for storing the ID token and storing an authenticated state, which you saw being used in the front-end a little bit, so handling mutations for whether users authenticated, logging in, logging out.</p><p id=\"\">Sebastian Scholl (08:44)<br>As well as one thing that's important to understand is that when you authenticate with an Auth provider, the Auth provider is saying that this is returning the token, saying that this person is successfully authenticated. When we handle authentication on the front-end, we get that token back. The first thing that we actually want to do is set that token as a bearer token and then make an API request to 8base to say, \"Hey, show me the current user.\"</p><p id=\"\">Sebastian Scholl (09:05)<br>We want to catch that, because if there isn't that user in the 8base database yet, we want to then create that user because we know it's their first time signing in, it's their first time signing up. We catch that error and then we run a mutation that signs up the user using the Auth profile ID that they authenticated with, and in this case, their e-mail address, but you could throw any other data in there to add it to the user record. That's how the user gets signed up. Then we commit it or run the mutation, which authenticates them, which is just parsing out the data and storing it.</p><p id=\"\">Sebastian Scholl (09:45)<br>Then after that API module, we have the Auth module, which essentially just is importing the 8base SDK. We tell the strategy we're using, which is Web 8base Cognito. Here, it's just setting some different settings, which we have documentation for the breaks down, essentially playing in those different environment variables, and then setting the login redirector URL and the redirect URI.</p><p id=\"\">Sebastian Scholl (10:07)<br>It's important to note that you will get an error if these aren't properly set. They get properly set inside your back-end at the Auth profile in the allowed callback URLs and logout URLs. Pretty straightforward.</p><p id=\"\">Sebastian Scholl (10:28)<br>Everything after that is really pretty cookie cutter. You have views, you have utils. This is organized in a little way to make it more convenient to use. However, as Vue.js developer, you can dive into here and have a field day and reorganize and restructure however you want.</p><p id=\"\">Sebastian Scholl (10:46)<br>I hope that this helped you get a good understanding of how easy it is to get started with the Starter app. If you want to do Vue.js development using 8base back-end. 8base back-end is really a fantastic solution for building apps with Vue.js as a front-end technology. It just allows you to really focus in on building an amazing user experience with Vue.js while a lot of the back-end concerns are being handled for you.</p><p id=\"\">Sebastian Scholl (11:11)<br>With that said, if you found this video helpful, please like it. If you want to get updates when future videos come out, please subscribe to the channel. Happy developing. Looking forward to seeing you in future episodes.</p><p id=\"\">‍</p>",
		"post-summary": "In this video, we break down how to get up and running with the Vue JS starter app",
		"slug": "getting-started-with-the-vue-2-starter-app",
		"video-tags": ["61cd9c61af11495ba20b0ba9", "61cd9c61af11499afa0b0ba4", "61cd9c61af1149dd0a0b0bab"],
		"author": "61cd9c61af1149d1980b10aa",
		"thumbnail-image": {
			"fileId": "62bb97435d74fe185bc1f868",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/62bb97435d74fe185bc1f868_Youtube%20Covers.png",
			"alt": null
		},
		"updated-on": "2022-07-07T19:00:02.006Z",
		"updated-by": "Collaborator_5e55457e71987f51d810ff2c",
		"created-on": "2022-06-29T00:06:41.273Z",
		"created-by": "Collaborator_5e55457e71987f51d810ff2c",
		"published-on": "2022-07-11T21:42:37.761Z",
		"published-by": "Person_5a0f5e7fbd61b20001498154",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "62bb9791a63e08be22851444"
	}, {
		"_archived": false,
		"_draft": false,
		"academy-video-link": {
			"url": "https://youtu.be/7vL9gZZl83s",
			"metadata": {
				"width": 854,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F7vL9gZZl83s&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D7vL9gZZl83s&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"854\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "- YouTube",
				"provider_name": "YouTube",
				"type": "video",
				"description": "Enjoy the videos and music you love, upload original content, and share it all with friends, family, and the world on YouTube."
			}
		},
		"published-date-initial-load": "2022-06-30T00:00:00.000Z",
		"canonical-2": "http://www.8base.com/8base-academy/integrating-a-3rd-party-api-into-the-graphql-api",
		"order": 33,
		"name": "Integrating a 3rd Party API into the GraphQL API",
		"video-link": "7vL9gZZl83s",
		"time": "18:32",
		"transcript": "<p>Speaker 1 (00:03)<br>Hey everyone, this is Sebastian. Today, what we're going to be doing is looking at how you can use a resolver function to actually integrate a third-party API into your 8base graphical API. To kick things off, I'm going to explain a little bit about which API we're going to use and what we're going to be doing. In this workspace, what I did is I went to my Users table and I created a new field on the Users table called location. I just set this to a default value of the lat and long coordinates for Miami, Florida. Now, if you wanted to find a way of interacting with a Geocoding API and set up the actual location of users, you could do that. However, just think of it as starting with this data.</p><p>Speaker 1 (00:42)<br>Now, what we're going to be doing is we're going to be creating a custom resolver function on our graphical API to where you can get the current weather of the user for wherever that user is located. It will return a single response that gives you some of the user's data as well as the current weather data. This all gets access to the graphical API even though we're going to be interacting with the OpenWeather API, which I've created account for and got an API key. They have very clear docs on how to go about setting up the OpenWeather account so I'm going to let you go about that on your own. However, I think you'll be able to follow along really easily.</p><p>Speaker 1 (01:17)<br>The first thing that we need to do when we want to create a custom resolver function is go to our command line tool. Let me go ahead and open up my IDE where I have a command terminal running. Inside this project, this project is configured with my 8base workspace, which is the same one I just was looking in. If you need to check that, you can run 8base configure of whatever project you're working within, or if you need to create a new repository functions, run 8base knit. Here, I can just make sure that my sandbox-workspace-0001 is selected.</p><p>Speaker 1 (01:58)<br>The first step that we're going to do is go ahead… Actually, the first step that we're going to do is, yeah, go ahead and create a resolver function. 8base generate resolver and we're going to call this the userWithCurrentWeather resolver, and it's going to be JavaScript instead of Typescript. So we go ahead and generate that. That generated the declaration in our 8base.yml file that we needed, as well as the directory here, which has the function handler and all that different stuff in there. Now, when developing a resolver function, we have to provide it a schema. This is part of a graphical specifications. Essentially, what we have to tell it is what are the inputs that it's going to receive and what are the outputs we can expect. So by default, this is the default query that gets generated.</p><p>Speaker 1 (03:00)<br>Since we are going to want the user with their current weather data, we are only going to be passing one argument to this function, which is the idea of the user. So we can just say that id is the argument and ID is the type of that argument, it's mandatory since we have ! there. Now, we don't actually have to pass it any location data because location data is on the user record itself and we're going to have to query the user. That's how this is going to work in that regard. However, you could pass any type of data arguments that you want to pass it, as well as type those out.</p><p>Speaker 1 (03:35)<br>Now, in the response, what we really care about is, first off, we want some details about the user back. We're going to call this a BasicUser. In here, we're going to want the id of the user, their first name, their last name, and their email. We're just going to quickly go through and say the types. That's ID and this is String. I'm just going to copy that. That's our BasicUser. I think I deleted… No, that type is still there. Cool.</p><p>Speaker 1 (04:11)<br>I'm going to take this type, drop it right in here, and I'm going to update the results to be user, and then, here we're going to have BasicUser. All right. Let's start.</p><p>Speaker 1 (04:29)<br>Now, what we care about is typing out the response that we would be getting from the weather API. The first thing that we actually want to do is run a successful call to the weather API to see what the JSON response is. In order to accomplish that, I was playing around with the API already. What I'm going to do is I'm just going to clear out my terminal here. Per their API docs, which we can find here, we can see that you have to make a get request to this endpoint, providing an API key and lat long coordinates. This is just a free account so I don't really care about my API key, I'll delete it after the video. However, if I go back to my terminal here, I'm just going to run a curl request. I already had that in the copy. Run a curl request to that endpoint and we can see that we're getting the current weather data back. This JSON Blob that we just got back.</p><p>Speaker 1 (05:35)<br>I'm going to copy that and what I'm going to do is pull it over to a handy little tool, which is actually offered by Walmart Labs, that will take a JSON object and generate a GraphQL schema for it. If I drop that in there, we can see that it formats it out and then created these different objects, or types, excuse me, which represent the schema of the JSON. I'm going to copy that schema over to my schema.graphql file and I'm going to paste it above the rest of the information. Just go through a little formatting here.</p><p>Speaker 1 (06:21)<br>Here we go. Almost there. 1 second. I should have a GraphQL formatter but I don't think I do. Almost there. I'm going to leave those as that. We can't have an integer as the key name so I'm just going to change this name for oneh and then... boom. We really don't have to do that but keep it pretty. Awesome. That essentially types out our entire response structure. What I'm going to do is just rename this CurrentWeatherType. Now, inside that response, right next to the user, I'm going to say currentWeather is the object name, or the key name, and then the type associated with it. So now we know that to this query, we pass the ID of the user and then we get back a response object which has the basic user details in the current weather type. Awesome.</p><p>Speaker 1 (07:33)<br>What we're now going to do is go into the handler function. Now, something that's important here is we know that we need to pass it the ID, so we want to make sure that when we run our function, we pass it an ID as the mock data.</p><p>Speaker 1 (07:46)<br>So I'm going to go back into the workspace, go to the Users table, and just select a user Steve Jones. Steve Jones's ID. Drop it in there. We're not using the body but I just like to do it.</p><p>Speaker 1 (08:04)<br>Now that we have that there, if we go back to our—close that, close that, close that—handler.js file, we can invoke this function locally to make sure that we got the ID and that everything's wired up. Everything's wired up, we're good to start going.</p><p>Speaker 1 (08:31)<br>The first thing, we know that we're going to have to make a get request from this node environment. I'm going to npm install axios to the project so that we can use axios as HTTP Client. And then inside here, I'm going to put a constant call axios, I'm going to require it. Now we have that module.</p><p>Speaker 1 (09:06)<br>The first thing that we're going to want to do is actually get the user data. So let's just go ahead and do that. We are going to want to write a query, excuse me, a constant, which is going to be called QUERY_USER. That's going to be a GraphQL query, where the query that we get receives an argument, a variable called ID, which is of the type ID and that's mandatory. It's going to run the user query which accepts the ID; and then returns the ID of the user, the first name of the user, like we wanted, the last name of the user, like we wanted, and the email address of the user, like we wanted. But this is also going to get the location of the user, which we want the coordinates from.</p><p>Speaker 1 (09:59)<br>Now, in order to run that, we have the context module. So I'm going to say that the constant, and we're actually going to unpack this. The first thing that we want is the user object. And then from the user, we're going to do something here. We're going to say that we want the location and we want the coordinates from the location. The rest of the data, we're actually just going to throw into an object called user. That'll be perfect. And then we're going to wait the response from the ctx.api.gqlRequest. There we go. To that, what we want to pass is the QUERY_USER, query—probably should call it user query, but it didn't. And that's going to take the argument of id, or the variable ID, which we're going to get from the event.data.id.</p><p>Speaker 1 (11:05)<br>What we're going to do is let's just run this, really, console.log, the user argument and the coordinates, to make sure that we're getting those as we expect, invoke-local. Awesome. Yes, user data is there and coordinates are there, so we're good so far.</p><p>Speaker 1 (11:28)<br>Now, the next thing that we're going to want to do is run the API request to the weather API. What we can do is we can get a constant called… We're going to unpack the response so the axios response is going to be a key of data, that's what we're going to care about. We'll unpack that data and we're going to rename that currentWeather. To that, we're going to await axios.get, and we're going to then go snag—let's just snag it from the documentation—this right here and drop that in there.</p><p>Speaker 1 (12:23)<br>Actually, I'm going to use a string literal so that we can interpolate the variables in there as well as the API key. API key, for now, I'm just going to set as a constant even though we'll do as an environment variable soon. API_KEY. Cool. Let's go grab that API key. If I go to my account here, my API keys, and copy that in, got my API key.</p><p>Speaker 1 (12:59)<br>Now, let's form that URL fully. That's going to be coordinates returns in array, with lat and long as the first and second, the 0 and 1 index. So we're going to pull that from there. Awesome. That is good at this point. Here, what we're doing is we're getting our… Let me pull that out of the function. So we have, essentially, our API key here as well as our query here. We're importing axios. We're getting the ID of the user from the event data. Using that, we're querying the user data and just getting their basic information plus the coordinates of their current location. We're then using those coordinates as the input to the subsequent API call, which is hitting that weather API using our API key. And we're getting that data back and calling it currentWeather. Then, in the response, what we care about is making sure that we are returning the user and the currentWeather. If we look at our schema.graphql file, we can see that in that response to user and currentWeather, those need to match for this all to get wired up correctly.</p><p>Speaker 1 (14:15)<br>Now, what I'm going to do is I'm going to run the invoke-local request one more time, and we can see that we are getting the data back from the weather API showing that Steve Jones is in—where does it say—Miami. Makes sense, right? As well as the basic user data. And it's stripping out the location data as we did inside when we unpacked the response.</p><p>Speaker 1 (14:43)<br>Now, this is just running the function. It's passing the ID to the function and then returning all the data. This is going to behave differently when we deploy it to our GraphQL API because we will then be able to choose the data that we want back. So we want to make sure that everything works as expected.</p><p>Speaker 1 (15:03)<br>The one thing that I will do at this point is just, say… Let's just do it like this. I'm going to delete that API key there and I'm just going to say this is me called WEATHER_API_KEY, where you get it from process.env.WEATHER_API_KEY. We could deployed it just as we did, but I'll just show you how to set the environment variable. Now, what I'm going to do is I'm go run 8base deploy, and this is going to deploy it straight to my workspace. As that's deploying, let's go set that environment variable. Here I am in my workspace, settings, environment variables, WEATHER_API_KEY, and add that value, stripping away the strings. That's added. So now, when that function runs in production, it will access the WEATHER_API_KEY from the environment variable, rather than just appoint with the static string inside the code, which is never a good practice.</p><p>Speaker 1 (16:16)<br>Now, let's go back. It deployed. Awesome. Inside here now, what we can do is we can check out our API Explorer, delete that, run a query where we get the userWithCurrent Weather. And I'm going to go back to our node and just get the user ID here. We're going to pass the ID here. Now, we can get from our response object. So we're going to say from the user, in this case, we just want their ID and their first name. It looks like I had to type in there with email, so that would probably throw an error if I ran it, but we could correct that easily. CurrentWeather, and here's now where I can say, \"Okay, I want the name.\" We're going to find out what that means. I want the coordinates, so I want the longitude and the latitude, and then I want the weather. The weather info I wanted, I want the main, whatever that means, the description; and let's also go for sys, which is the country, sunset, and sunrise times.</p><p>Speaker 1 (17:37)<br>So now if I run that resolver, we can see that it got all the data from both the 8base database as well as the API, and merged it into the response as we structured that response. Now, we kind of just did like a one-to-one mapping here. Just saying, \"Hey, here's the response, here's the type word, boom, throw it in.\" But if you wanted to, of course, you could restructure this into any way that you need to, as well as reuse some of the API types that 8base exposes for you. So a lot of kind of different options in here that you get to play with.</p><p>Speaker 1 (18:08)<br>I hope that you found this video helpful in giving you some pointers, tips, and kind of strategies to integrating third-party APIs into your 8base workspaces, specifically, in this case, using and resolver function to do so. If you do find this video helpful, please subscribe to the channel for future updates, and looking forward to seeing you in future videos. Happy developing.</p><p>‍</p>",
		"post-summary": "Breaks down on how to use a resolver function to integrate 3rd party APIs into your GraphQL API.",
		"slug": "integrating-a-3rd-party-api-into-the-graphql-api",
		"thumbnail-image": {
			"fileId": "62ab3c7dcff4906b4de82038",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/62ab3c7dcff4906b4de82038_Youtube%20Covers%20(10).png",
			"alt": null
		},
		"author": "61cd9c61af1149d1980b10aa",
		"video-tags": ["61cd9c61af11495fbb0b0bec", "61cd9c61af114959330b0bf1", "61cd9c61af11492f690b0ba5"],
		"updated-on": "2022-06-30T19:00:01.494Z",
		"updated-by": "Collaborator_5e55457e71987f51d810ff2c",
		"created-on": "2022-06-16T14:23:09.853Z",
		"created-by": "Collaborator_5e55457e71987f51d810ff2c",
		"published-on": "2022-07-11T21:42:37.761Z",
		"published-by": "Person_5a0f5e7fbd61b20001498154",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "62ab3ccd1272b03889315d69"
	}, {
		"_archived": false,
		"_draft": false,
		"academy-video-link": {
			"url": "https://youtu.be/kmpFzVz0whA",
			"metadata": {
				"width": 854,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FkmpFzVz0whA&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DkmpFzVz0whA&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"854\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "- YouTube",
				"provider_name": "YouTube",
				"type": "video",
				"description": "Enjoy the videos and music you love, upload original content, and share it all with friends, family, and the world on YouTube."
			}
		},
		"published-date-initial-load": "2022-06-23T00:00:00.000Z",
		"canonical-2": "https://www.8base.com/8base-academy/configuring-developer-roles-with-limited-data-access",
		"order": 32,
		"name": "Configuring Developer Roles with Limited Data Access",
		"video-link": "kmpFzVz0whA",
		"time": "08:27",
		"transcript": "<p>Speaker 1 (00:03)<br>Hey, everyone, this is Sebastian. Today we're going to be looking at how you can configure roles and permissions for your developers so they have limited data access or maybe feature access when working within the console. Here I'm in the 8base console and the first thing I think is really important to mention is just an architectural feature of 8base. Which is that the entire 8base console experience is just a front end to your workspace API.</p><p>Speaker 1 (00:29)<br>What that really means is anything that you can do or that you do do in the console can be programmatically performed via the GraphQL API. Really an 8base workspace is just one big workspace API and this is our front end to that. Now that means that the same type of roles and permissions that we would create or use for users of the applications we build to interface with the GraphQL API is the same type of authorization system that the 8base console uses when communicating with that API. We end up defining roles and permissions for our developers the same way currently that we define roles and permissions for our end users.</p><p>Speaker 1 (01:11)<br>Now, let's create a developer role to demonstrate this. Let's go into our app services and here in roles, let's create a role and we're going to call it Developer Level 1 Role. This description which is obviously just a description will be a developer role with limited data privileges. I can't spell. There we go. Cool. We're going to have this role.</p><p>Speaker 1 (01:43)<br>Essentially what we're trying to accomplish here is we want to be able to invite developers to collaborate with us within the workspace, but we don't want hem seeing all our data. We're going to create a developer role and now permission what data that user can or can't see, whether it's via the API when they're working or logged in or more specifically here in the console.</p><p>Speaker 1 (02:03)<br>Once I open up the Developer Level 1 role, we have a few different tables in our workspace here. What we're going to do is we're going to say, okay, well, we don't want them to be able to delete any of these records, but we want them to be able to see them all. Then when it comes to the invoices, let's say that we actually don't want them to know how much each invoice is worth, that's private. What we're going to do is we're going to say the order value is none from an access standpoint. Even though they can see the records and potentially update the records, they can't interact with that field, which is the order value.</p><p>Speaker 1 (02:42)<br>We're also going to allow them to see every user in the database and you'd be able to see the user records. However, they cannot update any user records. Then what we want to make sure, is that we want to make sure that they actually can't snag all our users' email addresses. What we're going to do here is we're going to say that, hey, they can't view or update obviously the email field and we're also going to make it so that they can't interact with the last name field. All I can do is the first name and the other information, those ones aren't available to them and save that.</p><p>Speaker 1 (03:18)<br>Now this was configuring some of the data permission, so what operations can they perform on the records, such as we don't want them deleting records, as well as what data fields we want to hide. For example, if we were storing a Social Security number let's say on the user's table, we would potentially want to mask that so they can't see it. Then if we jump over to the apps tab, we can now also say, hey, here's some of the different system areas in the console that we do or don't want them to have access to. For example, we don't want them to be able to change our schema, but we do want them to be able to access the data viewer, so we're going to turn that one on. For now, let's just leave it here.</p><p>Speaker 1 (03:56)<br>Now that that role is configured, I'm going to go over to the settings, team area and I'm going to invite my first team member and I'm not going to give them a name, but I am going to give them an email address, which is sebshaw@gmail.com, and I'm going to assign them this Developer Level 1 Role and send off the invite. Me as the admin working this workspace, I can do everything. However, once this sends off, cool, invitation pending. I'm actually going to switch tabs here to where I'm logged in in another Chrome window to my sebshaw account.</p><p>Speaker 1 (04:41)<br>I'm going to reload it and here I can see that I have a new inbox notification in my developer home. I'm going to open that and I can see that Sebastian Shaw has invited me to join their Sandbox Workspace 00001. I'm going to accept that invitation. That's accepting the invitation with the associated role. Now when I go back into my developer home, I can see that I have access to this workspace. Cool. Let me open it up.</p><p>Speaker 1 (05:16)<br>Now it's open and the first thing I'm going to do is jump right into the data tab. Now when I go into the data tab here, I can see that it's not giving me any option to add new fields 'cause the schema wasn't enabled or scheme management was enabled. But what's cool is that if I go to my invoices table here, I can see that 8base has hid the order value, so that's not being returned 'cause I don't have permission to view that field. Same with if I open up the user's table, I can see that, hey, I have access to all the different fields except for the, what's it called, the email and the last name. Those fields are hitting me too as the developer.</p><p>Speaker 1 (06:00)<br>Now, if I were to try to delete a record, let me try to do that really quickly. So loads, cool. If I were to go in there and click delete it's not giving me that option. I could edit it if I wanted to because I left that available. As you can see, it's customizing console experience to allow me or not allow me to do the things that I am or am not supposed to do.</p><p>Speaker 1 (06:31)<br>Once again, even if I were to try to say, hey, give me a query back from the invoices list where I want for every item in there the order value, I run it, seem I'm having a little slow Wi-Fi at this point. Cool. We can see this just saying there's no order values, which is not true. Every invoice has an order value, but it's masking that field for us. Still returning the record because we have access to those records, but hiding the field.</p><p>Speaker 1 (07:11)<br>I hope that this gave you a good understanding of how you can create roles and permissions for your developers, and by doing so, how that will impact the developers' experience when developing or working within the console or interacting with the API. Now, one other cool feature about developer roles is that they can be permissioned on a per environment level.</p><p>Speaker 1 (07:33)<br>If you are using CI/CD and you have different environments such as production, development, staging, QA, feature branches, all that type of stuff, the roles that you create in those environments can be unique to those environments and then when you invite developers to work in those environments those will be working as you'd expect there. That gives you a lot of flexibility then in saying, hey, in the development environment, the developer can see all the data because they're developing new features. However, the developer in the production environment where the data is sensitive can only see certain things.</p><p>Speaker 1 (08:07)<br>A lot of different levels of customizability or customization that you can do to make sure that you're are securely giving access to your project, to the developers as it's needed. Now, if you found this video helpful, please subscribe to the channel. Hope to see you in future videos and happy developing.</p><p>‍</p>",
		"post-summary": "Breaks down on how to configure developer roles with limited data access in your backend workspaces.",
		"slug": "configuring-developer-roles-with-limited-data-access",
		"thumbnail-image": {
			"fileId": "62ab39aa0fc56d3f28f62771",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/62ab39aa0fc56d3f28f62771_Youtube%20Covers%20(9).png",
			"alt": null
		},
		"author": "61cd9c61af1149d1980b10aa",
		"video-tags": ["61cd9c61af1149687a0b0ba7", "61cd9c61af11497c1f0b0baa"],
		"updated-on": "2022-06-23T19:00:09.279Z",
		"updated-by": "Collaborator_5e55457e71987f51d810ff2c",
		"created-on": "2022-06-16T14:11:18.451Z",
		"created-by": "Collaborator_5e55457e71987f51d810ff2c",
		"published-on": "2022-07-11T21:42:37.761Z",
		"published-by": "Person_5a0f5e7fbd61b20001498154",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "62ab3a0674831a8818562aa7"
	}, {
		"_archived": false,
		"_draft": false,
		"academy-video-link": {
			"url": "https://youtu.be/w1NM4dhdwxk",
			"metadata": {
				"width": 854,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fw1NM4dhdwxk&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dw1NM4dhdwxk&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"854\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "- YouTube",
				"provider_name": "YouTube",
				"type": "video",
				"description": "Enjoy the videos and music you love, upload original content, and share it all with friends, family, and the world on YouTube."
			}
		},
		"published-date-initial-load": "2022-06-16T00:00:00.000Z",
		"canonical-2": "http://www.8base.com/8base-academy/running-pagination-queries-on-the-graphql-api",
		"order": 31,
		"name": "Running Pagination Queries on the GraphQL API",
		"video-link": "w1NM4dhdwxk",
		"time": "07:24",
		"transcript": "<p>Sebastian (00:03)<br>Hey everyone. This is Sebastian. Today, we're going to be looking at how you use the GraphQL API to accomplish pagination queries.</p><p>Sebastian (00:11)<br>Here I am in a workspace where I have a table called Invoices. As we can see from this query I ran, we have about 152 invoices in this table. Now of course, if you were showing these in the table, you could query all 152 records and just list them out and then handle pagination from the front-end.</p><p>Sebastian (00:29)<br>However, as you start to have more and more records, you scale that up. It doesn't really become that efficient to load all that data, instead, you want to load that data at the cadence in which the user is asking for it. There's a million different ways that you might manifest this in the front-end, such as infinite scroll, pagination in a table, so on, so forth.</p><p>Sebastian (00:50)<br>However, we're going to need a way of doing, is essentially saying, \"Hey, give me a batch of records, maybe 25 at a time or five at a time,\" and then when you're ready for the next batch of records, load those. There is two different ways that we're enabled to do this really easily on 8base GraphQL API. What I'm going to do is I'm going to open up the ability to pass an argument to this query.</p><p>Sebastian (01:14)<br>The first strategy we're going to look at is using skip. Essentially, there's an argument you can pass called skip. Skip will allow you to tell the graphical API how many records you want to skip and then you can specify how many you want in return. What does that look like?</p><p>Sebastian (01:34)<br>When you first run the query, skip 0, because we're not actually going to any other chunk of records, we're starting right at the beginning of whatever list we're fetching. This will stand true also if we're filtering this list or we're having just a subset of records rather than the entire table. We're going to start at skip 0 and then we're going to ask for the first, in this case, five records back; we only want five records.</p><p>Sebastian (02:02)<br>As soon as I run this query, there's two things that we can see, first off is that the count is still 152 because we still want to know how many records would be returned in this query overall. However, it only gave us back the first five records. These are the five records that you would show your user.</p><p>Sebastian (02:20)<br>Now let's say that whatever action in the front-end the user takes, that triggers the reload of a new batch of records, a new batch of five, you would then want to say how many records you want to skip to get the next batch. In this case, we got the first five, we skipped 0. We'd actually just want to skip five now. We can see the record ID here for the last one is ghq.</p><p>Sebastian (02:51)<br>If I run this again, we can see that we got a new batch of records coming in, and so now we skipped to the next five records. You could just keep incrementing the skip as many times as you need to to just keep iterating through that list. Once again, however you're handling this in your front-end of passing this argument to the query, that's totally up to you based on the framework and tools that you're using for your front-end.</p><p>Sebastian (03:20)<br>That's the skip methodology. One thing that I'll add to this as well is this is asking for the first five records in the list. You could also ask for the last five records, so you could paginate backwards if you needed to. For example, if we wanted to paginate from the back of whatever list we are querying, we can still skip 0, and instead of first, we can say the last five records in that list.</p><p>Sebastian (03:48)<br>Here we get the last five. Then if we start skipping from this direction, we're going to start getting it off the back of that record set. Two different ways of approaching this using the first or last argument as well as the skip argument. Now I'm just going to return this back to skip 0 first. Run that.</p><p>Sebastian (04:12)<br>Now we actually have another strategy by which you can paginate, and that is by using the before or after argument. Here what we can see is that we are getting back to this list of five records. However, instead of saying skip, we could say that instead we want a certain number of records after a specific record in this ordered list. By default, this list is ordered by the created at timestamp.</p><p>Sebastian (04:40)<br>However, you could manually order this list using the order or the sort argument, either one would work for yourself, so whatever custom ordering you come up with, you could then paginate by that order. The difference with the after or before argument is here we're going to specify a unique or mandatory value on the record. In this case, we're just going to do it with the ID.</p><p>Sebastian (05:05)<br>Here, instead of skip, I'm going to say after. What we know is the first record in our list was this one. Here, I'm just going to say after this record ID give me the first five. If we run that, we can see that this is not including that record because we're going after that record, but these four records were in that list that we just had and then this is the fifth record, so it would be like the sixth based on the skip, if we're using the skip argument.</p><p>Sebastian (05:41)<br>It's not inclusive of the record that we're giving you the idea of. If we wanted to get the next five after the last record in that list or any record in that list, for example, here we can see that the last record is 3vf, so I'm going to use the one before it and I'm going to say give me the next five. We can see that the first record in that next set is 3vf because that was the record after it. It's giving me five more after that point.</p><p>Sebastian (06:12)<br>Once again, this is almost like saying, \"Hey, this record is the bookmark after which we are going to query a certain number of records.\" Once again, the first or last argument would work here as well, so that's the same. For example, I'm going to swap this ID out, get the next one. Now, unlike the skip, where skip is always saying, \"Hey, skip this many,\" in this style, pagination, we have the ability to use after or before. If I wanted the next five before or the first five before this record, I could use the before argument and then get that list going backwards.</p><p>Sebastian (06:53)<br>I hope this video gave you some helpful context on how you can use the before and after arguments for the GraphQL queries as well as the skip, first, and last arguments. Really, these are all different ways of achieving pagination or paginating through records when querying the GraphQL API.</p><p>Sebastian (07:12)<br>If you have any questions, feel free to leave them in the comments below. Looking to seeing you in future videos. If you like these videos, please subscribe to the channel. Thank you.</p>",
		"post-summary": "How to run pagination queries against the backend workspace GraphQL API.",
		"slug": "running-pagination-queries-on-the-graphql-api",
		"thumbnail-image": {
			"fileId": "62ab373f11202a0dac226c99",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/62ab373f11202a0dac226c99_Youtube%20Covers%20(8).png",
			"alt": null
		},
		"video-tags": ["61cd9c61af114910270b0ba6", "61cd9c61af11493d570b0bf0", "61cd9c61af11495fbb0b0bec"],
		"author": "61cd9c61af1149d1980b10aa",
		"updated-on": "2022-06-16T19:00:04.389Z",
		"updated-by": "Collaborator_5e55457e71987f51d810ff2c",
		"created-on": "2022-06-16T14:00:49.763Z",
		"created-by": "Collaborator_5e55457e71987f51d810ff2c",
		"published-on": "2022-07-11T21:42:37.761Z",
		"published-by": "Person_5a0f5e7fbd61b20001498154",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "62ab37918e4a10c7adb3e9a2"
	}, {
		"_archived": false,
		"_draft": false,
		"academy-video-link": {
			"url": "https://youtu.be/1iJIA_t7-lU",
			"metadata": {
				"width": 854,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F1iJIA_t7-lU&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D1iJIA_t7-lU&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"854\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "- YouTube",
				"provider_name": "YouTube",
				"type": "video",
				"description": "Enjoy the videos and music you love, upload original content, and share it all with friends, family, and the world on YouTube."
			}
		},
		"published-date-initial-load": "2022-06-02T00:00:00.000Z",
		"canonical-2": "http://www.8base.com/8base-academy/grouping-and-aggregations-on-the-graphql-api",
		"order": 29,
		"name": "Grouping and Aggregations on the GraphQL API",
		"video-link": "1iJIA_t7-lU",
		"time": "11:09",
		"transcript": "<p>Sebastian (00:03)<br>Hey everyone, this is Sebastian. Today we're going to be looking at grouping and aggregations on the GraphQL API. To jump into this, we're going to first look at a very simple data model that's been set up in a workspace which will guide the way that we explore the GraphQL group and aggregations feature.</p><p>Sebastian (00:19)<br>Essentially here in Data Builder, I have a campaigns table and an invoices table. The campaign table is pretty simple. There's a name, a start date and end date, an advertised discount as well as a relationship to the invoices table and the manager table. We can think of a campaign in any sense of the word that we want to think about. It doesn't really matter.</p><p>Sebastian (00:39)<br>We then have the invoices table which belongs to a campaign and has an order number and an order value. Now, we've preceded this database with a number of records, 152 records in here for all these different invoices. They belong to campaigns as well as different campaigns. I'm just going to read off a few of these.</p><p>Sebastian (01:07)<br>For example, 20 days off on Mother's Day, 50% off on Friday, so on and so forth. With this data, we're going to start playing with the grouping and aggregations API. I'm going to go over here now to my API Explorer, where first off, what we're going to do is just write a query where we get our data, some of the data out of the system or back from the API.</p><p>Sebastian (01:31)<br>Here, let's say that, hey, we want to get back our campaigns list. We want from our campaigns list the idea of the record, the name of the record, start date and end date. Cool. All right. Let's imagine that we are building a dashboard for our campaigns and inside of that dashboard, we're going to actually want to show some reporting on how campaigns are going, things like what's the average order value or things like how much revenue a campaign has generated.</p><p>Sebastian (02:04)<br>Now, in those situations, there are some ways that you might approach that problem, which would work with a very small amount of data. But as your data starts to scale up, it's not going to be so great. The first way would be, hey, let's actually just get back all the invoices that belong to each one. We want the ID of the invoice, we want the order value and we want the order number.</p><p>Sebastian (02:32)<br>Then in the front end, where we're all developing at, we would process all those records and perform the type of the aggregation functions that we want on them. Once again, for 150 records, you can get away with that but what if you have tens of thousands of records in your database or hundreds of thousands, millions of records in your database, you're not going to be able to load all that data into the front end and do that approach.</p><p>Sebastian (02:54)<br>The next way that you might do it is by trying to develop a custom function which loads it on the server side, processes it there and then returns it. Once again though, that will be slow as things grow and not really ideal. From there, you might even do something like maybe you have a background job that's constantly running and generating the reports and then you just query the in report.</p><p>Sebastian (03:15)<br>However, grouping aggregations are going to absolve our need to explore any of those solutions. We can actually just query that data directly from the database. Here we're going to look at how. First thing that we're going to do is, we will know that for any campaign, we want things like the average value for the invoice and the total revenue generated by the campaign so really we actually want to aggregate data that is stored in the invoices table.</p><p>Sebastian (03:46)<br>Here what we're going to do is, we're going to write a query where we get an invoice list and in that we are going to pass a group by argument. This is essentially the group in aggregation argument where we're going to define what we're going to be doing. Now inside of there, we need to make a query and we are going to be grouping by campaign.</p><p>Sebastian (04:11)<br>Essentially we don't want the average of invoices across campaigns, even though we could do that, we want it grouped by campaign. The first thing that we're going to do is we're going to say campaign and we are going to group by the name of the campaign, which we actually now have to use this as key and give it an alias.</p><p>Sebastian (04:35)<br>Now in a GraphQL API, you have...GraphQL APIs are typed. Essentially on any GraphQL API there is a defined schema for the responses and the inputs and that defines the key names that can be returned, as well as the values that are...The should be data types for those key names. Here though, we're going to use something called loose typing, which is essentially we are defining those response key value pairs on the fly.</p><p>Sebastian (05:07)<br>Here we're going to say that we have a campaign name and that's going to be called campaign name. Then we also are going to have the campaign ID right there, which is going to be called campaign ID. What's important is that if name and ID were two different things, they do two different groupings but we know that it will group on those two things and then it will just be a unique campaign so that's good.</p><p>Sebastian (05:42)<br>Then finally we can look at the manager of that campaign and pull out their e-mail address, which we are going to call the manager e-mail. Awesome. That's what we're going to group by. We're going to group by the campaign and that's the information from the campaign that we're pulling out. We're then after that going to say which aggregation functions do we want to perform on the data?</p><p>Sebastian (06:07)<br>The first field that we're going to perform an aggregation on is the order value. Actually that's the only field because we're just going to do it in two different ways. Since we're doing two different types of aggregations, both a sum and an average, we are going to pass an array with two different objects.</p><p>Sebastian (06:24)<br>First off, we're going to name it like we've been doing and this one's going to be the average order value. The function that we're going to specify for it is an aggregate function which is going to take the average. Now as you could see there's a lot of...Let me just do that, there's a lot of different aggregators that you can leverage, as well as a lot of different functions that you can leverage.</p><p>Sebastian (06:52)<br>A lot of depth that you can explore and it's part of the API. We're just going to look at these two more generic use cases right now. Here we're going to say average and that's our first aggregator and the second one that we're going to do is going to be the total revenue.</p><p>Sebastian (07:07)<br>Here we're going to name that the total revenue and we are going to specify a function which is an aggregate function and that's going to be a sum. Cool. Now what we're going to have to do is, we're going to have to define those loose typings. Let's open up the group's response object where if we try to use autocomplete here, it's not going to work because it doesn't know these essentially alias names that we are going to be using.</p><p>Sebastian (07:40)<br>We have to explicitly specify them and explicitly specify the type of data that we are expecting to response. For example, with the campaign ID, I'm going to say that this is an ID type field, which it will be. With the campaign name, I'm going to specify that this is a string. Manager e-mail, it's also going to be a string. The average order value is going to be a float and the total revenue is also going to be a float.</p><p>Sebastian (08:21)<br>Now instead of us having to have written any JavaScript with a reducer or do anything with all the records, it's actually going to perform the calculation of the database level and return us very quickly a response that has the insights that we were looking for. We can see across these campaigns the average order value, the total revenue, as well as the different fields that we pulled in from different tables on the single response objects. Pretty cool.</p><p>Sebastian (08:52)<br>Now the next thing that we're going to do is, let's say that you actually did in this use case want also to include the underlying data. Once again, you may want to turn this part on and off depending on how many records you have but it can make sense that, hey you still want the data of each invoice that was using the calculation.</p><p>Sebastian (09:13)<br>What we're able to do there is we can say that we want to get a group back and that group is going to be called invoices because that's what they are. No need for a fancy name. Now we're going to add that to our total response and then there's a custom data type in here called invoice group which we can then open a response on and we want to know for each invoice group how many records are in it and then for each record in it go back to essentially the query interface that we already see using.</p><p>Sebastian (09:59)<br>We want the idea of the invoice, we want the order value of the invoice and we want the order number of the invoice. Now if I run that what we can see is all that data is now coming back in the response. Under each campaign not only am I getting my aggregated data insights but I'm also getting the invoices that were used to determine that insight or calculate that insight.</p><p>Sebastian (10:22)<br>I hope that this gave you some cool ideas of ways that you can actually explore using grouping aggregations in the applications that you're building whether that's for reporting or any other use case it might be. Very often to actually see developers trying to do work around to get these types of insights into their application or make these types of calculations on the data store in their database.</p><p>Sebastian (10:45)<br>By doing some type of customer implementation which just really isn't necessary API can help you handle it in a very efficient manner and a various available manner at that too. If you find these videos helpful please hit the subscribe button so you'll be updated for future videos or future videos are released. Happy developing and looking forward to seeing you in subsequent episodes.</p><p>‍</p>",
		"post-summary": "Using Grouping and Aggregations to get data insights back from the API directly!",
		"slug": "grouping-and-aggregations-on-the-graphql-api",
		"thumbnail-image": {
			"fileId": "6294e19d0941807a3383e20e",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/6294e19d0941807a3383e20e_Youtube%20Covers%20(7).png",
			"alt": null
		},
		"video-tags": ["61cd9c61af114910270b0ba6", "61cd9c61af11493d570b0bf0", "61cd9c61af11495fbb0b0bec", "61cd9c61af1149687a0b0ba7"],
		"author": "61cd9c61af1149d1980b10aa",
		"updated-on": "2022-06-02T19:00:05.631Z",
		"updated-by": "Collaborator_5e55457e71987f51d810ff2c",
		"created-on": "2022-05-30T15:25:17.583Z",
		"created-by": "Collaborator_5e55457e71987f51d810ff2c",
		"published-on": "2022-07-11T21:42:37.761Z",
		"published-by": "Person_5a0f5e7fbd61b20001498154",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "6294e1ddb38a9c140569533e"
	}, {
		"_archived": false,
		"_draft": false,
		"academy-video-link": {
			"url": "https://youtu.be/olIDQ8O36Sw",
			"metadata": {
				"width": 854,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FolIDQ8O36Sw%3Ffeature%3Doembed&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DolIDQ8O36Sw&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FolIDQ8O36Sw%2Fhqdefault.jpg&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"854\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "8base Academy -Seeding Databases and Environments using Serverless Functions (Tasks) - Course 28",
				"provider_name": "YouTube",
				"type": "video",
				"thumbnail_url": "https://i.ytimg.com/vi/olIDQ8O36Sw/hqdefault.jpg",
				"description": "8base is a production-ready serverless backend-as-a-service that lets developers build amazing cloud applications using JavaScript and GraphQL. With 8base, d...",
				"author_name": "8base"
			}
		},
		"published-date-initial-load": "2022-05-26T00:00:00.000Z",
		"canonical-2": "http://www.8base.com/8base-academy/seeding-databases-and-environments-using-serverless-functions-tasks",
		"order": 28,
		"name": "Seeding Databases and Environments using Serverless Task Functions",
		"video-link": "olIDQ8O36Sw",
		"time": "9:33",
		"transcript": "<p>(00:03)<br>Hey there,<br>this is Sebastian from 8base.</p><p>(00:05)<br>Today we're going to be looking at how <br>you can seed your database</p><p>(00:08)<br>or a new workspace environment <br>with dummy data</p><p>(00:11)<br>using a serverless function,<br>specifically task functions.</p><p>(00:15)<br>Now I'm going to be showing <br>this in the context of CICD</p><p>(00:18)<br>for seeding a new <br>workspace environment.</p><p>(00:21)<br>However, this could work for whether</p><p>(00:23)<br>you only have one environment<br>in your workspace or multiple,</p><p>(00:26)<br>so it really applies <br>in multiple ways.</p><p>(00:28)<br>Really at the end of the day, <br>what it is, </p><p>(00:30)<br>it's a more creative use<br>of the task function.</p><p>(00:34)<br>Let's get started by <br>just first looking a little bit</p><p>(00:36)<br>at the workspace<br>that we have.</p><p>(00:38)<br>Here I have my workspace <br>SuperTasks Backend,</p><p>(00:41)<br>and inside of here I have<br>multiple workspace environments:</p><p>(00:44)<br>Master, Staging, Development,</p><p>(00:45)<br>and then this feature <br>branch called Multitenant.</p><p>(00:49)<br>Now what I'm going to be doing is I'm<br>going to be going to my command line</p><p>(00:52)<br>to create a new environment<br>which I will want to develop in.</p><p>(00:57)<br>I can do that by shooting<br>over to my VS Code.</p><p>(01:03)<br>I'm in my SuperTasks Backend <br>right here,</p><p>(01:06)<br>and I'm going to run \"8base configure\"</p><p>(01:08)<br>just to make sure that I'm <br>connected to the right workspace</p><p>(01:11)<br>as I do jump around sometimes.</p><p>(01:13)<br>SuperTasks Backend, perfect.</p><p>(01:16)<br>Then I'm going to run <br>\"8base environment list\".</p><p>(01:25)<br>Cool, and now I'm just going to set<br>Dev as my current environment.</p><p>(01:30)<br>Awesome.</p><p>(01:31)<br>Now what I'm going to do is I'm going<br>to go ahead and create my new environment,</p><p>(01:35)<br>so \"8base environment branch\"<br>and I'm going to run the help command</p><p>(01:42)<br>just so we can look at some of <br>the options really quickly.</p><p>(01:45)<br>If we wanted to, any of the data<br>that's currently in our</p><p>(01:51)<br>Dev environment when branching this<br>environment, we could copy over.</p><p>(01:55)<br>Now there's reasons why <br>you might not want to do that,</p><p>(01:58)<br>especially if you're going from a <br>production environment</p><p>(02:00)<br>to a feature branch,</p><p>(02:01)<br>maybe you don't want to bring<br>your users production data down.</p><p>(02:05)<br>That's where this way of seeing<br>your database would become more useful.</p><p>(02:11)<br>What I'm going to say is<br>I'm going to say \"branch\",</p><p>(02:14)<br>I'm going to say the name of <br>the new environment is \"newFeature\",</p><p>(02:26)<br>and the mode <br>is going to be \"SYSTEM\".</p><p>(02:31)<br>By saying \"SYSTEM\" that means<br>that we're not copying over any data.</p><p>(02:35)<br>I'm going to run that,<br>and I will check back in in a minute</p><p>(02:38)<br>once this new environment has created.</p><p>(02:41)<br>Okay, so now with that <br>new environment created,</p><p>(02:44)<br>what we're going to go ahead and do <br>is create a new function,</p><p>(02:48)<br>which is going to be a task function.</p><p>(02:49)<br>\"8base g\", for generate, \"task\",</p><p>(02:53)<br>and we're going to call <br>this \"seedDummyData\"</p><p>(02:58)<br>and syntax is going to be Javascript.</p><p>(03:01)<br>Now just because you author a function</p><p>(03:03)<br>doesn't mean you have to<br>deploy a function, right?</p><p>(03:05)<br>You can create as <br>many functions as you want,</p><p>(03:08)<br>which you only ever use for managing<br>your workspace locally,</p><p>(03:11)<br>or interacting with your API.</p><p>(03:13)<br>It's a great way of essentially <br>generating a function quickly</p><p>(03:17)<br>and then having an environment in which</p><p>(03:18)<br>you can quickly execute<br>the scripts you write,</p><p>(03:21)<br>have a pre-authenticated API, <br>really just a nice working environment.</p><p>(03:26)<br>That's what we're going to leverage<br>here to be able to essentially </p><p>(03:30)<br>write a script that interacts with our<br>API to generate some dummy data.</p><p>(03:35)<br>Now we have that task right here.</p><p>(03:39)<br>Once again if I was deploying,</p><p>(03:40)<br>I didn't want it out, I could just<br>comment it out and I'd be good.</p><p>(03:43)<br>Now I'm going to go into the source<br>and I'm going to look at my function here.</p><p>(03:49)<br>I'm just going to say <br>that once it's done,</p><p>(03:52)<br>task is completed,<br>\"Task completed.\" Period.</p><p>(03:57)<br>Doesn't need to be a string literal,<br>can just be a normal string, cool.</p><p>(04:03)<br>Now a couple things <br>that we want to do:</p><p>(04:06)<br>the first thing is that <br>I have some dummy data</p><p>(04:09)<br>which I'm going to pull<br>from off screen,</p><p>(04:13)<br>and this is going to be the dummy data<br>essentially that we send to our API.</p><p>(04:18)<br>Right now, if we wanted to,</p><p>(04:20)<br>we could pull in some <br>type of cool faker module</p><p>(04:23)<br>that fake generates a bunch of data.</p><p>(04:26)<br>We could write something<br>that numerically calculates it.</p><p>(04:30)<br>However you want to come up with your<br>dummy data, you can 100% do that.</p><p>(04:33)<br>However, instead of creating a separate<br>file that we have to import that file</p><p>(04:38)<br>and read the data, <br>we can just actually use a mock.</p><p>(04:41)<br>Instead of it being called the request<br>mock, I'm going to call it \"seed.json\".</p><p>(04:49)<br>Go in there, delete the headers<br>and the body, that's not relevant.</p><p>(04:53)<br>We have a data object, <br>we can call it \"data\"</p><p>(04:57)<br>and I'm going to drop in this json.</p><p>(04:59)<br>Essentially it's four lists,<br>each one with five tasks,</p><p>(05:02)<br>and just some text on each one.</p><p>(05:05)<br>We'll save that, cool.</p><p>(05:07)<br>Now inside this function,<br>if I wanted to, which I do,</p><p>(05:11)<br>I'm going to \"console.log\" <br>out the \"event.data\"</p><p>(05:14)<br>and that should be<br>the data that we just created.</p><p>(05:17)<br>I'm just going to <br>update this to say \"seed\"</p><p>(05:20)<br>so that when I copy it, it works.</p><p>(05:23)<br>\"8base invoke-local\",<br>the name of the function,</p><p>(05:25)<br>\"seedDummyData\"<br>and then the mock is \"seed\".</p><p>(05:29)<br>I'm going to run that, and boom,</p><p>(05:30)<br>that's exactly now what's <br>console logging now.</p><p>(05:33)<br>Now we know we have <br>our data inside our function.</p><p>(05:36)<br>What I said earlier about the <br>pre-authenticated API module,</p><p>(05:39)<br>that's the context argument.</p><p>(05:41)<br>Here context, API, GraphQL request,<br>I'm all set up to interact with my API.</p><p>(05:47)<br>What I'm going to do now is<br>I'm going to do a for loop.</p><p>(05:51)<br>I'm going to do for each object inside,<br>so for each list.</p><p>(05:59)<br>It's going to be the constant<br>inside of our \"event.data\".</p><p>(06:08)<br>Once again, <br>I always just like logging things out.</p><p>(06:12)<br>Probably pretty junior of me, <br>but it is what it is.</p><p>(06:17)<br>Making sure that <br>we're getting integers right now.</p><p>(06:24)<br>I think if we change that to the \"of\" <br>we will be good, cool.</p><p>(06:30)<br>Here we're getting each list <br>with the dummy data</p><p>(06:32)<br>and the tasks and all that stuff.</p><p>(06:34)<br>Awesome, so now we know that,</p><p>(06:36)<br>okay, well we are getting<br>this argument here.</p><p>(06:38)<br>Name, description, dummy tasks,<br>and this is what we're getting,</p><p>(06:42)<br>and this is the dummy data <br>that we want to create for our list.</p><p>(06:45)<br>Let's jump back now to our console.</p><p>(06:50)<br>Here I already have the mutation<br>written that we're going to want to use.</p><p>(06:54)<br>Essentially we're writing a mutation</p><p>(06:56)<br>where we pass the name, the description,<br>and the dummy tasks,</p><p>(06:58)<br>and then we're going to <br>create a list using that.</p><p>(07:01)<br>We're going to use <br>the listCreate operation</p><p>(07:03)<br>and as the data pass in the name, <br>the description,</p><p>(07:06)<br>and then to the task relationship,<br>create new task through that relationship,</p><p>(07:11)<br>which is the dummy tasks array,<br>and we just get an ID back.</p><p>(07:13)<br>We don't really care <br>about the response in this case.</p><p>(07:17)<br>I copied that, and we can see we have <br>no data in our database, cool.</p><p>(07:22)<br>Let me go back to VS Code, awesome.</p><p>(07:28)<br>Here do a new constant called \"MUTATION\"</p><p>(07:33)<br>which is going to equal<br>that mutation that we created.</p><p>(07:39)<br>Awesome.</p><p>(07:41)<br>Now inside here, pretty simple:<br>\"await ctx.api.gqlRequest\"</p><p>(07:48)<br>and into that pass in the mutation <br>as well as the list.</p><p>(07:54)<br>We're just going to iterate over those, <br>very straightforward.</p><p>(07:58)<br>Let's go ahead and run that.</p><p>(08:04)<br>Done.</p><p>(08:05)<br>Now if we go back to our console<br>and reload the page,</p><p>(08:11)<br>we can see that we interact with our API</p><p>(08:13)<br>and we're able to generate <br>the dummy data in this new environment</p><p>(08:17)<br>as well as all the different tasks<br>that we wanted in there as well.</p><p>(08:22)<br>I know this was a short video,</p><p>(08:24)<br>however I always like to, <br>when investigating new tools,</p><p>(08:27)<br>see the ways that the people <br>that are the power users of those tools</p><p>(08:31)<br>use them in creative or different ways.</p><p>(08:33)<br>Essentially, if you were <br>to look at our documentation,</p><p>(08:35)<br>you'd see tasks as these things<br>which you run on a schedule,</p><p>(08:40)<br>or you invoke from another function.</p><p>(08:42)<br>However, they are actually <br>an amazing utility to use</p><p>(08:46)<br>when wanting to interface with your API</p><p>(08:48)<br>in essentially a <br>pre-authenticated environment,</p><p>(08:51)<br>and even use them <br>as more on an ad hoc basis.</p><p>(08:54)<br>Maybe you have some way <br>of cleaning data that you want to use</p><p>(08:58)<br>and you have that function stored locally<br>to whenever you want to run it.</p><p>(09:02)<br>I hope this gave you <br>some cool new ideas</p><p>(09:04)<br>on ways that you can have <br>more efficient 8base projects</p><p>(09:07)<br>or develop in a more <br>maintainable and systematic way.</p><p>(09:10)<br>If you like these videos,</p><p>(09:12)<br>and you want to be subscribed<br>to get updates when new ones come out,</p><p>(09:16)<br>definitely subscribe to the channel,</p><p>(09:19)<br>definitely check out some of the other<br>videos that we've been producing.</p><p>(09:22)<br>They'll give you some other great tips<br>on how to develop with 8base,</p><p>(09:26)<br>and I look forward <br>to seeing you in future videos.</p><p>‍</p>",
		"post-summary": "Explore creative ways of using task functions to seed workspace environments with dummy data.",
		"slug": "seeding-databases-and-environments-using-serverless-task-functions",
		"thumbnail-image": {
			"fileId": "6294dfa280c1f11fcaa96160",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/6294dfa280c1f11fcaa96160_Youtube%20Covers%20(6).png",
			"alt": null
		},
		"video-tags": ["61cd9c61af1149661d0b0bf2", "61cd9c61af114959330b0bf1", "61cd9c61af114910270b0ba6", "61cd9c61af114930440b0ba8"],
		"author": "61cd9c61af1149d1980b10aa",
		"updated-on": "2022-05-30T15:17:07.548Z",
		"updated-by": "Collaborator_5e55457e71987f51d810ff2c",
		"created-on": "2022-05-30T15:17:07.548Z",
		"created-by": "Collaborator_5e55457e71987f51d810ff2c",
		"published-on": "2022-05-30T15:17:07.548Z",
		"published-by": "Collaborator_5e55457e71987f51d810ff2c",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "6294dff3c775a2b783bd003d"
	}, {
		"_archived": false,
		"_draft": false,
		"canonical-2": "http://www.8base.com/8base-academy/deleting-vs-destroying-records-on-the-graphql-api",
		"order": 30,
		"name": "Deleting vs. Destroying Records on the GraphQL API",
		"transcript": "<p>Sebastian (00:03)<br>Hey, everyone. My name is Sebastian. In this episode, we're going to be looking at the difference between deleting and destroying records when using back end. When dealing with delete versus destroy, we're really dealing with the concept of soft delete versus permit deletes or hard deletes. What that's doing is that's allowing us to, in a more dynamic way, determine whether or not we really want data permanently deleted from our database or whether we just want certain records not to be returned any longer inquiry results.</p><p>Sebastian (00:35)<br>The way that that's implemented in eight days is that on every record that you create in your data model or in your database, it stores or has a field value or a field type on there called deleted that. We can actually look at that right here inside the API Explorer. I'm going to query back a list of records from a table called tasks, so the tasks list operation. For each task that we're getting, we want the ID of the task, the title of it, and the deleted at field.</p><p>Sebastian (01:10)<br>Now if we run this query, we can see that the delete that field is returning zero on all the returned records, and that's expected, because none of these records have ever been deleted. Now if you were to delete one of them, all this would actually be doing is adding a timestamp or the epoch for the timestamp to this value, and then the system would know, \"Hey, in future requests or queries do not return that record any longer. It's been deleted.\"</p><p>Sebastian (01:38)<br>Now we can actually try that right now. I'm going to take this record ID and we're going to run a mutation that deletes the super important thing 1. Let's run a mutation that is a task delete mutation, and we're going to give it the data of the task we want to delete, which is the ID. Drop that in there. Then as a response, we just want a success response. I run that and it was successfully deleted.</p><p>Sebastian (02:09)<br>Now if we rerun the last query that we did, which was the history here, cool, we can now see that super important thing 1 no longer exists. However, if we were to pass a special argument to our query called with deleted and set that to true, we would now be getting all of the deleted tasks that are still stored in our database, just hidden from our query results. Now we can see that super important thing 1 was deleted at this time stamp.</p><p>Sebastian (02:46)<br>Now what we can do if we wanted to is restore that record. Once again, I'm going to write a mutation here which is a task restore operation. It's going to ask me for the ID of the record, which I can provide. Here I can say, \"Well, I want the ID of that record, I want the title and I want the new deleted that value.\"</p><p>Sebastian (03:08)<br>Once I go ahead and do that, I run that request and we can see that that record was successfully restored, so the delete that time stamp is now back to zero. Any subsequent query that we run, let's just run that one again, boom, super important thing 1 is back in our database.</p><p>Sebastian (03:31)<br>Now when it comes to permanently deleting records, it's permanent delete. Once we do it, that is no more. That is a destroy operation. Essentially what I can do here now is I can take the ID of the record and say, \"Well, I want to run a mutation where I actually destroy this task.\" Meaning if there is no recovery.</p><p>Sebastian (03:55)<br>I'm going to run the filter and say that the ID is the filter for the record and we want a success response back. Now if this record had dependent relationships, we'd also want to specify the force flag to say that destroy it and then destroy anything that has a mandatory relationship to it. However, we're not going to do that right now.</p><p>Sebastian (04:18)<br>I'm going to run destroy. It was successfully destroyed. Now we can see that if we run the tasksList query, super important thing 1 is no longer in our result as well as if we're we run it with deleted flag, which is right there, is also no longer existing.</p><p>Sebastian (04:41)<br>There's a lot of different examples to where you might want to leverage this type of facility. A simple example such as allowing someone to delete a simple record but having the system be able to restore it. You could set up a task potentially which looks for any record deleted within the last week and only destroys them after that time, so you can give someone seven days to restore something or even more complex use cases to where maybe you have some type of social network and you want to allow users to delete their accounts.</p><p>Sebastian (05:10)<br>However, all the data that they had associated with their account, you want to be able to restore if they decide to rejoin, and there's a lot of different ways that you could architect and design that system. However, hopefully this was helpful and gave you some good ideas of cool features you can build into your applications. Feel free to subscribe to the channel if you would like to get into to updates on future videos. Happy developing. See you in future episodes.</p><p>‍</p>",
		"post-summary": "In this video we explore deleting, restoring, and destroying database records using the GraphQL API.",
		"slug": "deleting-vs-destroying-records-on-the-graphql-api",
		"thumbnail-image": {
			"fileId": "6294dd258e106bd780d4c69c",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/6294dd258e106bd780d4c69c_Youtube%20Covers%20(5).png",
			"alt": null
		},
		"video-tags": ["61cd9c61af114910270b0ba6", "61cd9c61af11495fbb0b0bec", "61cd9c61af114983420b0bda", "61cd9c61af11493d570b0bf0"],
		"author": "61cd9c61af1149d1980b10aa",
		"updated-on": "2022-06-09T19:00:04.626Z",
		"updated-by": "Collaborator_5e55457e71987f51d810ff2c",
		"created-on": "2022-05-30T15:05:41.642Z",
		"created-by": "Collaborator_5e55457e71987f51d810ff2c",
		"published-on": "2022-07-11T21:42:37.761Z",
		"published-by": "Person_5a0f5e7fbd61b20001498154",
		"academy-video-link": {
			"url": "https://youtu.be/wJbKQcXROz0",
			"metadata": {
				"width": 854,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FwJbKQcXROz0&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DwJbKQcXROz0&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"854\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "- YouTube",
				"provider_name": "YouTube",
				"type": "video",
				"description": "Enjoy the videos and music you love, upload original content, and share it all with friends, family, and the world on YouTube."
			}
		},
		"published-date-initial-load": "2022-06-09T00:00:00.000Z",
		"time": "05:39",
		"video-link": "wJbKQcXROz0",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "6294dd45d102028e1fc4fb11"
	}, {
		"_archived": false,
		"_draft": false,
		"academy-video-link": {
			"url": "https://youtu.be/jldKRvx-JRo",
			"metadata": {
				"width": 854,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FjldKRvx-JRo&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DjldKRvx-JRo&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"854\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "- YouTube",
				"provider_name": "YouTube",
				"type": "video",
				"description": "Enjoy the videos and music you love, upload original content, and share it all with friends, family, and the world on YouTube."
			}
		},
		"published-date-initial-load": "2022-05-19T00:00:00.000Z",
		"canonical-2": "http://www.8base.com/8base-academy/detecting-connect-reconnect-and-disconnect-events-in-triggers-functions",
		"order": 27,
		"name": "Detecting Connect, Reconnect, and Disconnect events in triggers functions",
		"video-link": "jldKRvx-JRo",
		"time": "19:27",
		"transcript": "<p>Sebastian (00:03)<br>Hey there, this is Sebastian from 8base. Today, we're going to be walking through how you can detect, disconnect, reconnect and connect events in your 8base serverless functions. Cool. We're going to dive right into this and talk about what it means, what we're trying to accomplish and then relate it all together.</p><p>Sebastian (00:21)<br>The first thing is, what does it mean to detect an event type or a trigger type in a serverless function? If I go over here to my PS code, and I open up my APIs or YAML file, this is just a server or functions directory that I initiated using the 8base Command Line tool.</p><p>Sebastian (00:40)<br>I have trigger functions, so I can essentially create functions that run either before or after a certain database event, like a create update or delete event. Now, that said, we know that we can write a mutation in 8base, for example, mutation.</p><p>Sebastian (00:59)<br>In this workspace, we have a table called tasks. For example, we can create a task, we can delete a task, we can update a task. These types of events are really easy for us to detect. We create a trigger that runs after or before a create event, and we have a very clear concept of when that's going to run.</p><p>Sebastian (01:20)<br>However, what is unique or cool about the 8base API is that you can do relational based updates, creates, reconnects, disconnects, all these types of things. For example, if I want to create a task and give this task a title of... Let me go back here really quick, give it a title of My New Task.</p><p>Sebastian (01:49)<br>In doing so, I can, while creating it, connect it to an existing list table, which is another table in my workspace, or create a whole new table, which is a list table as well. Now, in doing that, we may want to detect those events to trigger certain types of server side code. Essentially what we're going to show here is how you can accomplish that inside your projects.</p><p>Sebastian (02:21)<br>With that laid out, we're going to jump back into my IDE here to just show a little bit of the set up I did to help demonstrate this point and see actually some of the tools that you have when working with 8base of investigating how things work.</p><p>Sebastian (02:36)<br>I've created four trigger functions in this project. Essentially, they are trigger functions that run all of them after a update or create happens on the tasks table and the lists table. After a task is created, after a task is updated, after a list is created, after a list is updated.</p><p>Sebastian (02:58)<br>All these functions pretty much have the exact same code in them. When they run, they essentially console log out a statement which says what they're doing, so after list create, and then they stringify, or they print out the JSON, which is passed to the function in the event argument.</p><p>Sebastian (03:18)<br>I've already deployed these to the workspace. These functions are already live in this workspace here. However, they've never been run, so there's no logs yet. Why am I doing this? Doing this so that we are going to run an API request that demonstrates a connect. Yeah, we'll do a connect event and then we'll see the data that gets passed to that function.</p><p>Sebastian (03:46)<br>Let's go into our data model here. We have lists and tasks, and a list has many tasks. Makes sense? What we're going to do is we're going to go look at these lists and get the ID of... Actually, we're just going to get the name of this list. Important work stuff, that's the list. What we're going to do now is we're going to create a new task.</p><p>Sebastian (04:09)<br>We're going to write mutation which is a task create, and the data for this task is going to be... The title of it is going to be, edit the new videos, and the description for it's going to be, make sure the audio is clean in the new videos, all right. Now, that's the task.</p><p>Sebastian (04:41)<br>Now, we want to connect it to this existing list. So we're going to open that up, the list relationship, and then say that we're going to do a connection, and we're going to connect it to a list which has the name, important work stuff. Cool.</p><p>Sebastian (05:01)<br>Now, we are going to, in here, make sure that we get back the ID of the task, the title of the task, the description of the task, and then also the list ID and name. Awesome. We have this mutation written out, let's go ahead and run it. So that worked. We got a response back as expected and this new task was created and it was connected to the list.</p><p>Sebastian (05:38)<br>Let's see now the data that actually got passed to our serverless function that runs after the task create event. If I go to my functions, we can look at the logs for each one. We see that list create didn't trigger, list update did not trigger, task update did not trigger, but when we go to task create, let's reload the page.</p><p>Sebastian (06:05)<br>Awesome. That's still true for all those other ones that we've just walked through. Yeah, perfect. So task ran, and this was the data that was passed to that function. I'm going to open up a JSON Pretty, just so we can make this JSON look a little bit better. Make pretty. Cool. What I'll do is I'll actually just copy this, bring it in here, and create a... Whoa, I got a lot of files. I got to X out of there. Cool.</p><p>Sebastian (06:44)<br>JSON and drop that in there. Awesome. This shows all the data that was passed to that after function as the event argument. Now, what's important about that is since it was passed to the function and we logged out, that means that any of this data is usable for any type of business logic that you want to write, or any type of script that you want to write.</p><p>Sebastian (07:08)<br>We can see that it gave us I think four keys. Yeah, four keys in that object, so the data key, and for specifically an after trigger or a trigger function that runs on the after event, it's going to give you the whole record. We saw this is the whole task that was created.</p><p>Sebastian (07:28)<br>It's going to give you the original data that was passed to the operation. This is the important one here. This is where we're actually seeing that it's giving us the list argument in the original data, which has the connect key in there. That's going to be our clue for detecting these events. Because if it was a reconnect, it would be the same thing and disconnect the same thing.</p><p>Sebastian (07:54)<br>The original object, since it was a create operation, there was no original object. If it was an update, the object or the original task would have been there before it was updated, as well as then just a bunch of headers. They're not relevant to us right now, but it could be relevant to you. Cool.</p><p>Sebastian (08:16)<br>Inside here, what's really important now is we know that, okay, well, if we submit a task create operation and we are connecting it or disconnecting it, or in this case you'd be connecting it or creating a list through that operation, we can look for original data list connect to detect that event. If I went back into my task, that was task create, right? Yeah, task create. Task create function here, I now know that inside of here, if I wanted to take that event, I could say, \"Okay, well, if event.original data list.\"</p><p>Sebastian (09:02)<br>First off, we just see if that's there. I forgot the fancy syntaxes like that or like that. I forgot how to write that. I don't like that syntax that much either, so I won't try. But if we drop that in there, and then we say connect, we can then update this to say, once again, console log. A connect happened. Inside of that connect event, we can see, as well, that we have the data, so it connected it to that list name or any other data that would have been supplied to the function.</p><p>Sebastian (09:38)<br>Once again, we can repeat this pattern in here for each type of event that we're looking to detect, as well as in different functions or different events where we want to detect those events. This could be really valuable in the sense of, let's say that when a new user is connected to a new record in the database, you want to send them an email about something. This would be a really straightforward way of approaching that moment in time or that point in that lifecycle of the operation, that you need to trigger that email, that task, whatever it might be.</p><p>Sebastian (10:18)<br>Now, the other thing that I wanted to point out here is that these functions also will... When you submit one operation, it will potentially trigger multiple functions. What do I mean by that? If we go back to our API Explorer here, we now know that we have this task here. Let's write a new mutation, where we're updating a list.</p><p>Sebastian (10:49)<br>We're going to update one of our lists. Actually now I'm going to go and steal the ID of one of the lists. I'm just going to get the ID of the important work stuff list and go back to our API Explorer. Now let me list update data and in here, we're going to update that list. Okay, how are we going to update it?</p><p>Sebastian (11:19)<br>Let's just update the name to be most important work stuff, and then after that, we are going to go into the tasks and we're actually going to run a disconnect on the tasks, and that disconnect operation, we're going to disconnect the record with the ID.</p><p>Sebastian (11:49)<br>I'm going to run that and I don't think it will delete. I'm just going to save it on a notepad really quick. Cool. Just so I don't lose it in case it resets. We're going to go into here. We're going to go into our tasks and edit the new videos. Belongs to that right list. Cool. We're going to take that ID, API Explorer. It did delete it. Good thing I copied it over there. Got it. Cool.</p><p>Sebastian (12:24)<br>We're going to disconnect the task that has this ID, and then we are going to, at the same time, create a new task which is called make important phone call, and the description is going to be, you know what you're talking about. Cool. Now for those, we then just want back the ID, the name of the list, and then the tasks, how many tasks there are. This isn't important but just throwing it all in there, and the title of these tasks. Okay, cool.</p><p>Sebastian (13:17)<br>We're going to be running a list update event. That means that our after list update trigger will fire and we will go and then see what data has been passed to that one. However, we're also running a disconnect and we're also running a create. What will be cool to see is that this create input here after running the list update will actually be passed to the task create operation, and we'll see that reflected in the console statement.</p><p>Sebastian (13:47)<br>The one thing I would do last here, I almost forgot, is say force equals true. The reason we're doing that is because in disconnecting the task, and there's a mandatory relationship between the tasks table and the list table, which means that no task cannot belong to a list. Actually what I'm going to do is I'm going to run it without the force flag and we'll see that it should give us an error.</p><p>Sebastian (14:10)<br>Yeah. Attempted to destroy a required relationship, rerun the mutation with the force flag to try to force delete the related objects. By running with the force flag, I'm actually deleting that last task that we just generated, because it can't exist in the database without a list relationship. I run it like that. Boom. The update has been made, and then now we have our two tasks that are updated.</p><p>Sebastian (14:40)<br>Now, I go back to my functions and we still haven't run a list create operation, so [inaudible 00:14:46] reload the logs. We're good there. After the list is updated, this one now ran for the first time. Once again, we're going to take the data here and throw it into this little print Pretty thing. Cool.</p><p>Sebastian (15:05)<br>We see that the data of the list is being passed here. This is the most up to date list data. Now, the original data that we passed to the operation is the ID, the name, and then the disconnect operation as well as the create operation. Once again, we could detect whether or not we were creating a task through a update, as well as if we were disconnecting. The same way that we did it in task create, we could do it in after list update.</p><p>Sebastian (15:39)<br>I'm just going to drop in. Once again, you get more sophisticated in the way that you approach your syntax of saying how you're detecting whether the event exists in there, but so if original data, tasks. I think it's tasks. Yep, tasks, and then inside of there, we are looking for if there's a disconnect, where we're looking for if there is a tasks create. These would be separate events. So if that do that, if that, let's say a connect happened, a disconnect happened and a create happened.</p><p>Sebastian (16:32)<br>Once again, diving into the code and making sure that based on the incoming data, we are identifying what's going on and responding to it as we need to. Then finally here, the original object. Since we were updating the list, we can see that this is its old title under the original object, and this is its updated title. If we wanted to do some type of... Whatever you want to do using that information, you have that information to use, and that's the important part.</p><p>Sebastian (17:02)<br>Once we know that, we then remember, oh, okay. Well, this data here, that was the create input, got passed to the task create operation, which now if we go to the after task create function, we can see that it was passed to here as well. Once again, we take this, we drop it in here, make it pretty. I'm going to pull it back into this code here. Cool.</p><p>Sebastian (17:33)<br>Now, here we see, okay, well, this was the data that was passed to the function input, and the reason why there's this extra data here is because this is default data. On the schema, it said that by default the priorities is low in status to do those things.</p><p>Sebastian (17:50)<br>The original data which we're seeing that, okay, well the original data was recreating a task and it's being connected to a list, and it was not a new list, so it's giving us a little bit more metadata in there, as well as the original object which there was none because there was a create event, and of course, the headers as well.</p><p>Sebastian (18:10)<br>I hope that you found this video helpful in giving you a better understanding of some of the tools that you have at your disposal when developing serverless functions on 8base, and the different ways that you can play with the system to do this type of event detection.</p><p>Sebastian (18:24)<br>It's in our roadmap to actually add some of these event types as native event triggers, similar to how in our function we were declaring, oh, after a create, update or delete event, you could actually just specify after a reconnect, disconnect or connect event, and so on and so forth.</p><p>Sebastian (18:42)<br>In the meantime, and even actually when those events come out, it's still really important to understand the ways that you could navigate these things because so many different use cases pop up where things like this are relevant.</p><p>Sebastian (18:54)<br>Also one more tip in here that you can do, is by deploying a function like the ones that we did that console log out an argument, you can then take that JSON or that event argument, and use that as your mock in your local functions. Some of these things I'm referencing I'm going to add description links in the video description so you can investigate them further. However, happy developing, and looking forward to seeing you in subsequent videos.</p><p>‍</p>",
		"post-summary": "How to detect relational events in your functions - connect, disconnect, and reconnect!",
		"thumbnail-image": {
			"fileId": "627ea8cf51bad3331453200d",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/627ea8cf51bad3331453200d_Youtube%20Covers%20(2)%20(1).png",
			"alt": null
		},
		"slug": "detecting-connect-reconnect-and-disconnect-events-in-triggers-functions",
		"author": "61cd9c61af1149d1980b10aa",
		"video-tags": ["61cd9c61af114959330b0bf1", "61cd9c61af11495fbb0b0bec", "61cd9c61af1149687a0b0ba7", "61cd9c61af114930440b0ba8"],
		"updated-on": "2022-05-26T15:56:17.400Z",
		"updated-by": "Collaborator_5e55457e71987f51d810ff2c",
		"created-on": "2022-05-13T18:53:25.893Z",
		"created-by": "Collaborator_5e55457e71987f51d810ff2c",
		"published-on": "2022-07-11T21:42:37.761Z",
		"published-by": "Person_5a0f5e7fbd61b20001498154",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "627ea92551afc9d82764d572"
	}, {
		"_archived": false,
		"_draft": false,
		"academy-video-link": {
			"url": "https://youtu.be/vji4t4Pcj-s",
			"metadata": {
				"width": 854,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fvji4t4Pcj-s%3Ffeature%3Doembed&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dvji4t4Pcj-s&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fvji4t4Pcj-s%2Fhqdefault.jpg&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"854\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "8base Academy - Creating a Custom Alert for Billing Overages - Course 26",
				"provider_name": "YouTube",
				"type": "video",
				"thumbnail_url": "https://i.ytimg.com/vi/vji4t4Pcj-s/hqdefault.jpg",
				"author_name": "8base"
			}
		},
		"published-date-initial-load": "2022-05-12T00:00:00.000Z",
		"canonical-2": "http://www.8base.com/8base-academy/creating-a-custom-alert-for-billing-overages",
		"order": 26,
		"name": "Creating a Custom Alert for Billing Overages",
		"video-link": "vji4t4Pcj-s",
		"time": "11:13",
		"transcript": "<p>Sebastian Scholl (00:04)<br>Hey there, Sebastian here at 8base. Today, I want to walk you through a way of creating a custom billing alert for if your workspaces or one of your workspaces hits overages. Lately, we've actually had a number of customers that have scaled up their applications like crazy.</p><p>Sebastian Scholl (00:20)<br>They've had really great growth for their products that they're building. In doing so they've started to ask, \"Well, how can we make sure that we are getting notifications when we hit certain overages or pass certain thresholds?\" We are building this as a native feature into 8base.</p><p>Sebastian Scholl (00:36)<br>However, in the interim, I wanted to show you a way that you could implement your own solution, and by doing so, introduce you to the system part of your API, which is a really great thing to know about. Let's dive into it.</p><p>Sebastian Scholl (00:48)<br>All right. Here I am in my IDE and I'm just going to go ahead and create a new functions directory. So 8base init and I'm going to call this overages-alert-fn, even though you just generate a new function if you were doing this in an existing project.</p><p>Sebastian Scholl (01:04)<br>I'm going to say that my syntax is JavaScript and I'm also going to make sure that it's an empty project because I don't want to just delete all the example functions. I'm going to go down and select my Sandbox Workspace. Cool. My project has been created there.</p><p>Sebastian Scholl (01:21)<br>Now let me go ahead and add this to my, open folder, add this to my project. So overages-alert-fn. Don't save. Now I am there. Go to my terminal and we are good to go. Awesome.</p><p>Sebastian Scholl (01:41)<br>The first thing I'm going to do is generate a task function. I'm going to run 8base, generate a task and we're going to call this overagesAlert and it's going to once again be JavaScript and then run on a schedule at a rate of once a day.</p><p>Sebastian Scholl (02:11)<br>If you wanted this to run more frequently, you could. If you wanted to run on a crazy conundrum and do it once a week or whatever it might be, you can do that as well. But we'll just stick in basics and have that at a rate of once a day here.</p><p>Sebastian Scholl (02:24)<br>Now we have our task function. We know the cadence on which that function is going to invoke and we have our handler here, which is where we're going to do the code.</p><p>Sebastian Scholl (02:34)<br>One, I'm just going to change this to say ''Task completed'' because we're not returning anything from a task function. Now what we want to do is go ahead and jump into our workspace to just work inside the API Explorer, show you a little bit of the system API, and construct the query, which is going to give us the information we need to perform this task effectively.</p><p>Sebastian Scholl (02:57)<br>Here I am in my API Explorer and I just copy and pasted the query over so I didn't have to write in front of you. However, we are going to explore where we are getting this information from right now. What's really cool about an 8base workspace is that this whole interface we call the console is just an interface to the API which is your workspace API.</p><p>Sebastian Scholl (03:19)<br>Anything, absolutely anything that you can do in the console, you can do programmatically via the API, and that's even things like getting information about your billing, your workspace plan, all that type of stuff. If you open a query, and I'm just going to copy all that. If you open a query and you go into your system, you can then see all of the system-level information or queries, mutations, all that stuff is all there for you.</p><p>Sebastian Scholl (03:50)<br>Even things like if you wanted to build a workflow where... If you wanted to run a mutation that created a table in your data model from a user application, you can totally do that, which is super cool. Inside of here, I'm going to paste back now in the billingMetricsUsagesList query that we're running.</p><p>Sebastian Scholl (04:10)<br>Here what we can see is that we are running a query in our system, gets back the billing metrics usages. For each metric or limit that we have, we want the name of it and the unit in which it's measured. We then want the value of its current value and then we want to know if there's any overage and the warning of that overage.</p><p>Sebastian Scholl (04:33)<br>If I run that query, I don't think I can't have overages because this is an 8base-owned workspace. But we get all that information back right here so you can see API requests, all that type of stuff. Let me hide that. Now what I'm going to do is I'm going to take this query and bring it back into my task function.</p><p>Sebastian Scholl (05:00)<br>Let me go here, and I'm going to create a constant called query, put it in a string, drop it in there. Now we have our query that will actually give us back the information about our current usage and we know that it's going to run once a day.</p><p>Sebastian Scholl (05:22)<br>Now that we have that inside this function, I'm actually going to run that query. I'm going to say await the response from the context api.gqlRequest where I pass it my query. I then pass an empty object because we're not giving it any variables here. Then we're going to say checkPermissions: false.</p><p>Sebastian Scholl (05:47)<br>We're doing that because we know that no one is invoking this function and so being run in a safe environment on the server side. We don't really care about our roles and permissions engine, we are just bypassing it. From that we get the response.</p><p>Sebastian Scholl (06:09)<br>Now, we are also getting the member email from this query. I forgot to mention that. That's the owner of the workspace, and we would want that information if we were to want to email them that something's happening. So play with that. I'm going to go ahead and unpack this a little bit, the response, because it is pretty big.</p><p>Sebastian Scholl (06:34)<br>Inside the... We're getting the system back, and then in there we got two items, which is this one, and then member account. We're going to do that and then we're also going to do member account. From the member account, we know we get the email. From the billing metrics, we know that we get the items. We're just going to call those usageMetrics.</p><p>Sebastian Scholl (07:11)<br>Cool. Just unpack the response there. All right. Now with those, we want to go through each one and see whether or not an overage is being reported. If I jump back here and I look at that response that we're getting, we can see that I don't have any overages, but if I did, the value would be reflected within that specific metric. We're going to go look through if any overages occurred.</p><p>Sebastian Scholl (07:34)<br>However, if you wanted to, you could select or potentially monitor a single one that would be important to you. How we're going to do that is we're going to say that there's a new constant which is called overages, which equals the usageMetrics, and we are going to filter those. For each, call it metric. We are going to filter down the ones where there is the metric.overage.value. That would work, overage, value.</p><p>Sebastian Scholl (08:19)<br>We're going to say if it's greater than zero, I think that would make sense. If the overage is reported, it will have a value greater than zero. Then we have our overages.</p><p>Sebastian Scholl (08:35)<br>Then what we can do in there is we can say, okay, well, if overages.length, this filter is going to return an array. If the array length is greater than zero, then we know we have overages.</p><p>Sebastian Scholl (08:48)<br>Now, inside here, I'm just going to say console.log ('You have overages!' Then pass in the overages as the argument. However, what's important to remember is that in here, if you wanted to, this is where you could go ahead and say, \"Well, I want to be emailed that overage. I want my system to send me a text message.\" However, you want to be alerted. You can go ahead and implement that yourself in here.</p><p>Sebastian Scholl (09:22)<br>Let's just go ahead and run this to make sure that we don't have any errors coming back. Task completed. No overages. Let's just change this to say if it equals zero. We know exactly what this would do. I don't even know why I'm experimenting with that, but we can see that you have overages and it would pass them in.</p><p>Sebastian Scholl (09:51)<br>Really the important part of this tutorial is showing that you can leverage the system API to get this information out of your 8base workspace programmatically and then do whatever you want with it. If you really want to see me take the next steps on saying, okay, well, we're going to send an email, send a text message, we would use a provider like Twilio or SendGrid to do that.</p><p>Sebastian Scholl (10:14)<br>Let me know in the comments below if you want to see that happen and I can do that in a subsequent video. However this is really it. I hope you found this video helpful and as a good introduction to the system API. Like I said during the tutorial, everything that is your workspace is programmatically accessible via the API. While this is a very simple straightforward use case that could potentially unlock that alert capability, you can do so much more with that.</p><p>Sebastian Scholl (10:47)<br>Everything from programmatically generating workspaces with base templates really is supposed to be that type of dynamic tool for you to dream up your own solutions of the things that you're building. With that said, thank you for watching the video, subscribe if you want to get alerted for future updates, and looking forward to seeing you in subsequent videos. Take it easy.</p><p>‍</p>",
		"post-summary": "Using the System API and serverless functions to create custom billing alerts.",
		"thumbnail-image": {
			"fileId": "627ea84a667281b06ac124a8",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/627ea84a667281b06ac124a8_Youtube%20Covers%20(1)%20(1).png",
			"alt": null
		},
		"slug": "creating-a-custom-alert-for-billing-overages",
		"author": "61cd9c61af1149d1980b10aa",
		"video-tags": ["61cd9c61af114930440b0ba8", "61cd9c61af11495ba20b0ba9", "61cd9c61af114959330b0bf1"],
		"updated-on": "2022-05-13T18:50:13.873Z",
		"updated-by": "Collaborator_5e55457e71987f51d810ff2c",
		"created-on": "2022-05-13T18:50:13.873Z",
		"created-by": "Collaborator_5e55457e71987f51d810ff2c",
		"published-on": "2022-05-13T18:50:13.873Z",
		"published-by": "Collaborator_5e55457e71987f51d810ff2c",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "627ea8651266252b9f31262a"
	}, {
		"_archived": false,
		"_draft": false,
		"academy-video-link": {
			"url": "https://youtu.be/0FG3RNL0L-8",
			"metadata": {
				"width": 854,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F0FG3RNL0L-8%3Ffeature%3Doembed&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D0FG3RNL0L-8&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F0FG3RNL0L-8%2Fhqdefault.jpg&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"854\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "8base Academy - Creating a Custom Logger for Serverless Functions - Course 25",
				"provider_name": "YouTube",
				"type": "video",
				"thumbnail_url": "https://i.ytimg.com/vi/0FG3RNL0L-8/hqdefault.jpg",
				"description": "8base is a production-ready serverless backend-as-a-service that lets developers build amazing cloud applications using JavaScript and GraphQL. With 8base, d...",
				"author_name": "8base"
			}
		},
		"published-date-initial-load": "2022-05-05T00:00:00.000Z",
		"canonical-2": "http://www.8base.com/8base-academy/creating-a-custom-logger-for-serverless-functions",
		"order": 25,
		"name": "Creating a Custom Logger for Serverless Functions",
		"video-link": "0FG3RNL0L-8",
		"time": "17:19",
		"transcript": "<p>Sebastian Scholl (00:04)<br>Hey everyone. Sebastian here from 8base. Today, I wanted to walk you guys through a tutorial, on how you can create a custom logger which essentially wraps your service functions and allows you to dynamically turn on or turn off verbose logging and really create any type of logger that you want to. Let's dive into it and start playing with some examples.</p><p>Sebastian Scholl (00:25)<br>I'm going to start here in a completely empty 8base functions directory. I could get here with the 8base command line tool by running 8base init, give it a project name, which I'm just calling here logger functions and then configure our workspace. I already had this little directory set up so I'm just going to run 8base configure and make sure that when I end up deploying these functions, they deploy to the appropriate workspace, which in this case is going to be the Sandbox Workspace.</p><p>Sebastian Scholl (00:56)<br>Now, inside of here, I don't have any functions yet. We're just going to go ahead and create a function. This could be any function type. You can call whatever you want. It doesn't really matter. I'm just going to go ahead and generate an 8base trigger function. This is going to be called beforeUserUpdate because that is the default function for triggers and JavaScript syntax.</p><p>Sebastian Scholl (01:20)<br>Let me go ahead and create that. Awesome. Added the declaration and it was beforeUserCreate. I'm just going to do this to update. Even though we could call the function whatever we want, I like that naming convention personally.</p><p>Sebastian Scholl (01:35)<br>Now, once that's created, we now have it here. We have our function. I'm going to erase or delete the example code here. We literally have a function that just returns the data it was given. We can make sure that everything is linked up and working by running the invoke-local command, the function name, and that mock and everything looks like it's working totally fine. We're set up.</p><p>Sebastian Scholl (02:04)<br>Now what we are going to try to do here is create a function that essentially wraps our serverless function so that then we can perform some type of custom logging and we're going to build it in a way to where we can dynamically toggle it on and off.</p><p>Sebastian Scholl (02:22)<br>This could be a useful tool for debugging. This could be a useful tool for sending logs to a third party system. There's lots of different use cases that you might want to apply this to.</p><p>Sebastian Scholl (02:36)<br>How we're going to start is we are going to first just write the made up code for how we want it to work in our function. I'm going to want to be able to import a function called logger, from a local directory called utils, and we're going to call it logger, and then I'm going to want to use that function to wrap my serverless function. I'm just going to reformat that a little bit. Cool.</p><p>Sebastian Scholl (03:10)<br>No matter what code I write in here now and the function that I normally use it, is now wrapped in this logger function. We need to make sure that the logger function returns the serverless function after performing any items or tasks it wants to do with the same arguments that we would expect this function to be given and without messing up the whole process.</p><p>Sebastian Scholl (03:34)<br>Let's go ahead now and create this Utils directory in that logger file. In the source, I'm actually doing the command line, I'm going to make a new directory in source called utils and I'm going to add a file to it source, utils called logger.js. Awesome. Based on this directory structure, I think we just have to go back up two levels. Yes, there we go. Cool.</p><p>Sebastian Scholl (04:05)<br>Now we are importing nothing from that file cause it's empty. Now we have to create a function which we're going to export a default function. We know the argument to be passed to it is the serverless function which is in our handler file so it takes in a function argument.</p><p>Sebastian Scholl (04:27)<br>Then inside of here, what we now need to do is make sure that any arguments being passed to the function are still making it all the way through. We can't. If we just were to return the function right now, we miss out on those arguments.</p><p>Sebastian Scholl (04:42)<br>Here, what we're going to do is, we're going to return another function, which spreads out the args or the arguments that are being received and then it invokes the serverless function with those arguments. With this little setup right here, actually it's pretty cool, we can go ahead and invoke that function again and see that nothing changed on the behavior of our function. It's being passed the serverless function, that function that it returned is being invoked, getting all the arguments from there and then we are once again invoking the serverless function with the arguments that were passed and everything lines up appropriately.</p><p>Sebastian Scholl (05:28)<br>What's cool about that is now that gives us this space in here to play around with and do whatever we want. What do we want to do? The first thing we want to do is make sure that we can dynamically essentially turn on or off this function facility or this logger facility.</p><p>Sebastian Scholl (05:44)<br>I'm going to say if something and then we will have our logger logic script inside there. Now a good way to approach this in the console is actually use environment variables. In the 8base console you will be able to go into your environment variables and set them, turn them on and off, do whatever you need to do. What we will do here is, we access those envariables by process.ENV.VERBOSE_LOGGER.</p><p>Sebastian Scholl (06:18)<br>This would be how we access the environment variable. Now the environment variable that gets passed, even if we give it a value like true or false, it's going to be a string. Because it is a string, we can't just leave it like this for true or false. Because if there's any value set for the verbose logger, it will always go to true.</p><p>Sebastian Scholl (06:38)<br>What we can do instead is do a little regex, says true and make this case insensitive. Whether or not use like an uppercase true, first letter, upper case, or down case, it will just look for whether or not true is in the field and that's a regex so that gives us the test function on that statement and then we can pass it the value from our environment variable.</p><p>Sebastian Scholl (07:09)<br>Inside here console.log, we can just say logged something and now we can invoke that locally. Since we have no environment variable set right now, it should not console.log our statement. Run that, it didn't.</p><p>Sebastian Scholl (07:31)<br>Now instead of setting an environment variable, we can just give it a bang symbol because we know they'll be the opposite of whatever it is, run it again and it logged something. Cool. Now we know inside this logger, we can perform whatever logging actions that we want to perform. Cool.</p><p>Sebastian Scholl (07:53)<br>But now that we're in there, let's actually explore some of the arguments that we're being passed and see how we might want to log those out. I'm just going to, once again, console.log(args) and see what's being passed to this function. I invoke local and I can see, this first argument is the event argument that gets passed to our serverless functions when we used to working with them so it's that guy. The second one is the context argument which has our API module on it, our ability to invoke other functions. That's all there.</p><p>Sebastian Scholl (08:25)<br>What we're going to do is let's just unpack that really quickly, const[event] and then we don't really need to use the context argument. It's not necessary. We can actually just do that and get the event variable that we want to work with.</p><p>Sebastian Scholl (08:44)<br>Now once we have that, let's just say that what we want to do is when verbose logging's on we want to console.log out all the data being passed to the function. If a user is being updated and verbose logging's on, we want all the event data to be passed. That would apply to any function that we use it on. Whether it's a user update, a trigger function, or a task function, it doesn't really matter. Any data being passed to our function, we want to know those arguments that are coming in.</p><p>Sebastian Scholl (09:13)<br>How can we do that? We can Object.entries and then pass in the event.data. This will give us essentially an array of all the key value pairs on that data object. Let's reduce over those. .reduce then gives us the callback which we're going to put in there. I'm just going to say, callback then we're going to start off with an empty string. Actually what we'll do, we'll do a string like that and then just in here say that this is the data received. Cool.</p><p>Sebastian Scholl (09:58)<br>Now inside this callback function, I like to put it on a new line. Not that you need to, but I like to. The first argument pass to the reducer is the initial string or whatever the value being returned is. Here it's the data receive string and then it passes in the second argument, which would actually be the entry from there. We know that's an array and so we can unpack that away with K or the key and the value. It's there.</p><p>Sebastian Scholl (10:30)<br>Then now whatever we return in this function, is the next string value. Let's just build a little template for this thing. What we can do is we can say that... Let me put a bullet point there and we can say, key is and then, key with value of and value. Cool.</p><p>Sebastian Scholl (11:04)<br>Then that will give us, our let's just call it message, and then we will console.log out the message. Awesome. Cool. Once again I'm going to turn off the bang symbol, so this shouldn't run.</p><p>Sebastian Scholl (11:25)<br>I'm going to invoke the function. Awesome. We can see that our mock that we're using, which is right here, let's just add some more stuff to there foo1:bar1 and foo2:bar2. Cool.</p><p>Sebastian Scholl (11:45)<br>When we invoke that function, we can see that all the data is coming back but the logger is not on so nothing's happening. Now when we change it to turn it on and we run it, we can see that the... What do we got? We don't have the last one because I forgot to add the current string or the new string to the existing string. Let's just do str+=. That starts to concatenate that and build that up. Then we'll also add a new line to the end of each one.</p><p>Sebastian Scholl (12:23)<br>Let's try that again and boom, our data received. Our logger is working. Now what we are going to do that we have our logger, remember, we can use this on as many functions as we want. Now we have this whole facility, we can just bring it in.</p><p>Sebastian Scholl (12:41)<br>Let's make sure that we turn it off by default, once again. Now I'm going to run 8base deploy. I never like running 8base deploy directly because it's a bad practice, especially if you're in a production workspace. You should be committing your functions like a GitHub repo or some type of Git repository.</p><p>Sebastian Scholl (13:02)<br>However, when just doing demos and whatnot, it's totally fine. I'm going to run 8base deploy and I will jump back in once this function deploys. Cool. The function has successfully deployed and now what we're going to do is, we're going to jump into the 8base console, set this environment variable. I'm just going to copy this verbose logger variable here and then test out our function which we know in this case is running on the user update operation.</p><p>Sebastian Scholl (13:31)<br>I'm going to switch over here to my 8base console. First I'm going to go is set that environment variable. Settings, environment variables, verbose logger. Then let's start with it just being off, false. I'm going to add it and we're good. Now if I go to my functions, here I can see that the beforeUserUpdate function has been deployed and it currently has no logs.</p><p>Sebastian Scholl (13:57)<br>Let's go into our data, users. For this first user right here, I'm just going to update it to be John Smith instead of Sebastian Smith. I'm going to submit that change. Cool. The row was successfully updated. John Smith is the new name. We go to our functions, we look at the logs for this before function and we can see that nothing has changed. That's good. Our logger is off.</p><p>Sebastian Scholl (14:35)<br>Now let's go back to our environment variable and for whatever reason we want to say, we want to know what's being passed to it. We're trying to debug something, whatever it might be.</p><p>Sebastian Scholl (14:46)<br>Update the environment variable, go back to the data, go back to John, Mr. Smith. Let's just say that it's now Johnny Smithers and his status is now inactive. Cool. Now I save that change. Cool. The row is successfully updated.</p><p>Sebastian Scholl (15:22)<br>Now if I go back to this function. I can go there, I'm going to reload it. That should be coming in. Awesome. Now we can see that it console logged out all that information. The data received inactive, Johnny, Smithers, time zone, all that stuff that was passed to it. Should have gone on the new line. But I think maybe if I passed the string literal, it would have worked better. I'm not sure.</p><p>Sebastian Scholl (15:52)<br>However, what's important to note here is, now we have that dynamic way of toggling on and off this little function or facility that we built for our workspace. It's important to remember, if I go back to the function, that I can pretty much do anything I want in here now.</p><p>Sebastian Scholl (16:08)<br>If I want to send these types of logs or any type of information to a third party system, if I want to send myself an email, if something happens or something comes through, I can do... Send it off to Twilio whatever it is.</p><p>Sebastian Scholl (16:21)<br>I love doing stuff like this because it just really shows the flexibility of working with 8base. It helped us by bringing a ton of convention to how we deploy functions, generating those functions, the environment in which they're hosted all that stuff and I could just focus really on the code that mattered to me.</p><p>Sebastian Scholl (16:38)<br>I hope that this tutorial helped give you some ideas on how you can maybe more creatively use functions to handle some of these more nuanced use cases. We are, actually, currently building a logging facility into 8base so that would be more of a native solution for this.</p><p>Sebastian Scholl (16:55)<br>However, I always just like to remind our development community, that anything that 8base doesn't currently offer, you can build using 8base because we are really giving you the same tools that we use to build our platform. We're exposing those to you really in an almost uncontrolled manner. Super fun environment to work in and I hope that you found this video useful. See you in future videos.</p><p>‍</p>",
		"post-summary": "How you can use wrap your functions to creating custom logging facilities.",
		"thumbnail-image": {
			"fileId": "627ea73bc673dcf210bb9094",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/627ea73bc673dcf210bb9094_Youtube%20Covers%20(3).png",
			"alt": null
		},
		"slug": "creating-a-custom-logger-for-serverless-functions",
		"video-tags": ["61cd9c61af114930440b0ba8", "61cd9c61af114959330b0bf1", "61cd9c61af11495ba20b0ba9"],
		"author": "61cd9c61af1149d1980b10aa",
		"updated-on": "2022-05-13T18:47:31.350Z",
		"updated-by": "Collaborator_5e55457e71987f51d810ff2c",
		"created-on": "2022-05-13T18:47:31.350Z",
		"created-by": "Collaborator_5e55457e71987f51d810ff2c",
		"published-on": "2022-05-13T18:47:31.350Z",
		"published-by": "Collaborator_5e55457e71987f51d810ff2c",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "627ea7c37ed07ea77c8ca9f8"
	}, {
		"_archived": false,
		"_draft": false,
		"academy-video-link": {
			"url": "https://youtu.be/22gSu4tI8Rk",
			"metadata": {
				"width": 854,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F22gSu4tI8Rk%3Ffeature%3Doembed&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D22gSu4tI8Rk&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F22gSu4tI8Rk%2Fhqdefault.jpg&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"854\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "8base Academy - Setting Up AWS Cognito as an 8base Authentication Provider - Course 24",
				"provider_name": "YouTube",
				"type": "video",
				"thumbnail_url": "https://i.ytimg.com/vi/22gSu4tI8Rk/hqdefault.jpg",
				"description": "Cognito Docs: https://docs.aws.amazon.com/cognito/index.html8base Authentication Provider Docs: https://docs.8base.com/docs/8base-console/authentication#unde...",
				"author_name": "8base"
			}
		},
		"published-date-initial-load": "2022-04-14T00:00:00.000Z",
		"canonical-2": "http://www.8base.com/8base-academy/setting-up-aws-cognito-as-an-8base-authentication-provider",
		"order": 24,
		"name": "Setting Up AWS Cognito as an 8base Authentication Provider",
		"video-link": "22gSu4tI8Rk",
		"time": "16:18",
		"transcript": "<p>Sebastian (00:03)<br>Hey everyone, this is Sebastian, Product Manager here at 8base. Today, we're going to be walking through how you can use AWS Cognito as an authentication provider when working with a backend workspace. Let's jump right into it.</p><p>Sebastian (00:16)<br>To kick off this tutorial, there are a few prerequisites that you're going to need. One is a 8base workspace, backend workspace, that is at least on the developer plan. That will give you the ability to integrate third-party auth providers. The second is an AWS account. There's a lot of documentation online to set up both of those resources. However, I will put some links in the video description so that you can jump to it. You can reference those yourself.</p><p>Sebastian (00:40)<br>To kick things off, I am going to go into my AWS management console and then go find Cognito in there in the console. Once I go to Cognito, what I'm going to have to do is create a new user pool. I'm going to Manage User Pools, Create Pool, and give it a name. I am just going to call this \"8base Cognito Auth Provider.\" You can call it whatever you want. Then we're going to click on Review the defaults. When it comes to the defaults, pretty much everything is good to go. Yeah. We can just go through that and click Create Pool.</p><p>Sebastian (01:28)<br>With the user pool created, we're going to scroll down in its general settings to the App Clients section and click Add an App Client. Once there, click Add App Client. Now, we're going to give it a name. I'm just going to use the name \"Supertasks Backend,\" because that's the name of the 8base workspace that I'll be utilizing, so \"Supertasks Backend.\"</p><p>Sebastian (01:49)<br>Then, I'm going to go down and also check off the \"Enable username password based authentication flow.\" Super important. We'll enable that as well. That's all we need to do. Now we can create the app client. Cool. Now we have the app client ID, which we are going to need in a little bit.</p><p>Sebastian (02:07)<br>However, first we're going to go to our domain. We are going to set up a domain. So let's go to Domain Name, and it's going to give us an input here that we can set up our domain on. You can use custom domains if you want to. Hopefully, we'll cover that in a future tutorial. Right now though, we're just going to allow... And we are going to use a Amazon Cognito domain. I'm just going to say this is \"supertasks-auth.\" I'm going to check the availability. It's available. Perfect. Then I'm going to save that change. Cool. That's set up. Awesome.</p><p>Sebastian (02:42)<br>Now, we get over to your App Client Settings, and there's a few things that we're going to want to specify. First off, we're going to say that we're using a Cognito user pool, and we're going to specify the callback URL as https://localhost:3000. Whatever callback you're going to want your authentication flow to use, you're going to have to use that one. However, if you're in development, this is likely a local host port that you could be using. However, make sure that you change it per your setup [inaudible 00:03:15]. And if you wanted to, you could also specify a sign out URL. However, we're not going to do that in this tutorial.</p><p>Sebastian (03:20)<br>Now, what we are going to do is check \"Implicit grant,\" and then make sure that our Auth Scopes or OAuth Scopes include email, OpenID, as well as the AWS Cognito sign in user admin. Once all those are set up, we can save those changes. And believe it or not, most of the work is done at this point. We're just going to go through and do some testing of it.</p><p>Sebastian (03:44)<br>What we're going to do now is pop back over to 8base, where we're going to configure the auth profile on the 8base side. However, there are a few details that we need from here first. The first one is that if we go to our general settings, we can get our pool ID. I'm going to grab that pool ID right here, and I am just going to go into my Supertasks Backend, and go into my App Services, Authentication, and add a new auth profile. I'm just going to paste it in here. Don't save anything. I'm literally using this as a notepad right now.</p><p>Sebastian (04:26)<br>The second thing that we're going to want is the region in which we created the resource. So this is \"us-east-1.\" So I'm just going to type that in here as well. Actually, it's kind of in there in the ID, so I'm just going to copy it. The next thing that we are going to need is to create a link or provide the OpenID URL. What I'm going to do is, I have the anatomy of that URL in here. I'll also paste it in the video description. However, it's \"cognito-idp.\" You put in the region. I'm just going to snag that region that we had copied in here right there. Cool. And then the pool ID. I'm going to drop that in right there.</p><p>Sebastian (05:14)<br>Now I'm going to copy that whole thing, switch over to here—OpenID, because we're using the OpenID provider—and drop in that provider URL. I'm going to name this \"Cognito Auth Provider.\" Call it whatever you'd like. I'm going to say it's open to all so anyone can sign up for our application. If you wanted to not enable that, you could use other options. We're not going to worry about any roles for right now. Or you know what, let's just say that they would get a user role. Perfect, so we can see that it works. And add profile. Cool.</p><p>Sebastian (05:47)<br>Now, we actually have everything set up both on the AWS side or the Cognito side as well as the 8base side. Now what we're going to do is, call it a dry run of making sure that everything works together, and we're going to do it in a clever way. Here, we are back in our AWS console, and we can scroll down, or we can go to our app client settings, scroll down, and you see it says here \"Launch Hosted UI\". This is actually going to launch the login page that is provided from our auth provider, which is Cognito. This is completely separate from 8base.</p><p>Sebastian (06:23)<br>I'm going to sign up, and I'm going to say my username is sebscholl, my email is sebscholl@gmail.com. Now you guys know how to contact me. And then I'm going to say that my password is something I'm not going to tell you. Cool. I run all those, I click Sign Up. Now it's asking me to verify my account. Let me go get my verification code from my device, one second. And boom. It is 103... I'm not telling the rest. Confirm my account.</p><p>Sebastian (07:13)<br>It looks like it broke, but it actually didn't. What just happened there after successfully verifying my email address or authenticating is it actually did a callback back to our callback URL. You can see that it redirected us back to localhost:3000. And then as a fragment inside of the URL, it actually gave us the ID token and all the other auth information. I'm going to copy this, and I'm actually going to drag it over here to my GraphQL client, because we're going to now interface with the 8base, our workspace API. What I'm going to do is I'm going to paste this in here and parse out from it the ID token, which would probably... I'm sure there's a better way to do this, but I'm just going to take the long way to school this morning. Cool. Access token there. Awesome. It is this string. Perfect.</p><p>Sebastian (08:10)<br>We have our ID token. And remember that that's a bearer token on our API. I am just going to get a notes... Actually, rich text. Let me just pull up a rich text document, which is... There we go. New Document, and pop that in there. Cool. Now I'm going to go grab the workspace API. If I go into my settings, I can find that endpoint URL right here, and I'm going to drop the endpoint into there. Awesome. It's successfully loaded our API, or our schema.</p><p>Sebastian (08:50)<br>I'm going to go into the headers here. And remember that authentication or authorization happens through bearer tokens with the 8base API, so we're going to say \"Authorization,\" \"Bearer.\" I'm going to go and grab that bearer token once again. Save that. Awesome.</p><p>Sebastian (09:18)<br>Now what we're going to do... We were able to create that user in Cognito, so now that user has a saved password and email address in the Cognito system. However, now we need to actually create the user record in 8base so that we have that user in the application database. And the way we're going to do that is with a mutation called SignUpWithToken. UserSignUpWithToken, I believe that's the name of it. I'm going to do a mutation here, and we're going to pass through that mutation a authentication profile ID. I'm going to say AID, which is an ID type, and it's mandatory, as well as we're going to pass in the email of the user, which is going to be a string, which is mandatory.</p><p>Sebastian (10:07)<br>And here, what we're going to do is... Let me see really quickly. I'm going to have some notes here off-screen that I am going to pull in. Awesome. Yeah, it's a userSignUpWithToken, so \"userSignUpWithToken.\" Inside there, there we're going to give it a \"authProfileId.\" Yeah, ID, cool. Then we can drop in the variable, as well as then the user whose... We're going to give it the email address of \"email.\" Awesome. Then in response, we're just going to ask for the email back.</p><p>Sebastian (11:02)<br>I don't know why there's no schema available. However, we're going to run this and see if it works. Essentially, what it's doing is that we're passing it that token, it's going to verify that token. Once it sees that that token is valid, it's going to create the user and then return our response, and it's going to sign them up via the auth profile ID, which we need to supply.</p><p>Sebastian (11:22)<br>I'm going to go grab... We need to set our variables. I'm going to go now to App Services, Authentication. Here's my authentication profiles. I have the ID right here. I'm going to put that in as a variable \"aid,\" and I'm going to put it in parentheses for the string. Then email, which I do know off the top of my head, which is sebscholl... I always forget to put the parentheses, sebscholl@gmail.com. Cool. All right, let's run it and see what happens.</p><p>Sebastian (11:59)<br>\"This token is not from your user pool.\" Interesting. Maybe I copied something weird in that. I've done that before. Let's look here really quickly. It was actually a weird error. Essentially what it was is I have a CICD set up in this workspace, and I was in this specific environment here called multitenant. So when I copied my API endpoint, I actually got the wrong API endpoint. I wanted to come to my home page and use the API endpoint here, which actually has multitenant appended to it, so it is a different URL. I think we're going to probably make an update in the product, so that's clear for future reference.</p><p>Sebastian (12:48)<br>However, I do need to write out this mutation one more time. It's going to be easier though, because I can actually use introspection. So the ID, the email, which is a string. Then we open those brackets into the User Sign Up With Token. Awesome. In there, I'm just going to open that up, and it's auth profile ID which takes the AID, and it is the user which has an email. Of course, if you're doing this programmatically, you can pass any other information to the user object, like their first name, last name, birthday, whatever you want to do. It can all be in there.</p><p>Sebastian (13:31)<br>In response, we want the email back as well, as well as actually, let's say that we want the roles back, because we want to make sure that they actually got the user role. And so items, and we want the name of the role. Awesome. Cool. Now we're going to paste that. We're going to have to go get the auth profile ID one more time. Not a problem. Grab that. In here, we're going to say AID equals that value. Cool. And the email is sebscholl@gmail.com. All right. 3, 2, 1, boom.</p><p>Sebastian (14:12)<br>I don't have permission? Let's see why not. Oh, no wonder. The user doesn't have permission to read the roles. So we're going to drop that. As you can see, we can see it in the path here. All right. This is going smooth. So there we don't go again. A user already exists with that email. I already used it.</p><p>Sebastian (14:39)<br>We are going to do this one last way. As you can see, we are so close. We are going to go and delete this user from 8base. Awesome. We're going to run it again.</p><p>Sebastian (14:55)<br>We have successfully, by hook or by crook, signed up the user. However, the important parts of this tutorial are obviously the establishing the settings all in Cognito of making it work, and then setting up the auth profile. All these little steps were afterwards, we're actually just testing it out to make sure everything runs. However, you'll be handling this programmatically, so for comic relief, I'm just going to leave all this in the video anyway.</p><p>Sebastian (15:19)<br>All right, I hope that you found this helpful in figuring out how to set up Cognito with 8base. Just as like a little reiteration of what some of the documentation says, 8base is not an authentication provider in the sense that we don't store passwords in our database. We do have 8base authentication, which is actually Cognito under the hood.</p><p>Sebastian (15:39)<br>However, if you're going to be building a production application, really encourage you to go set up your own auth provider such as Cognito, Auth0, Okta. There's a lot of them out there, but any that are OpenID compliant will work with 8base. The reason for this is because then you won't be metered on the number of users that you have. A user will just be treated as a database record. So if you have a plan that has a million records or 10 million records for your database in 8base... You can have that many users if you have no other records, but you get how it works. Meanwhile, then you have full flexibility for establishing any type of authentication flow that you want with the auth provider that you choose.</p><p>Sebastian (16:13)<br>Happy developing, and see you in future videos.</p><p>‍</p>",
		"post-summary": "Using AWS Cognito as an authentication provider when working with a backend workspace.",
		"thumbnail-image": {
			"fileId": "626ab8a5f0562d507cb1effa",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/626ab8a5f0562d507cb1effa_Screen%20Shot%202022-04-28%20at%2011.54.10%20AM.png",
			"alt": null
		},
		"slug": "setting-up-aws-cognito-as-an-8base-authentication-provider",
		"author": "61cd9c61af1149d1980b10aa",
		"video-tags": ["61cd9c61af1149fb100b0bf4", "61cd9c61af1149687a0b0ba7", "61cd9c61af11495fbb0b0bec"],
		"updated-on": "2022-04-28T15:54:55.122Z",
		"updated-by": "Collaborator_5e55457e71987f51d810ff2c",
		"created-on": "2022-04-28T15:54:55.122Z",
		"created-by": "Collaborator_5e55457e71987f51d810ff2c",
		"published-on": "2022-04-28T15:54:55.122Z",
		"published-by": "Collaborator_5e55457e71987f51d810ff2c",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "626ab8cfb744a60d176c7a94"
	}, {
		"_archived": false,
		"_draft": false,
		"academy-video-link": {
			"url": "https://youtu.be/9grh7vNHaIc",
			"metadata": {
				"width": 854,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F9grh7vNHaIc%3Ffeature%3Doembed&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D9grh7vNHaIc&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F9grh7vNHaIc%2Fhqdefault.jpg&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"854\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "8base Academy - Setting up Multi-tenant Data Models - Course 23",
				"provider_name": "YouTube",
				"type": "video",
				"thumbnail_url": "https://i.ytimg.com/vi/9grh7vNHaIc/hqdefault.jpg",
				"description": "8base is a production-ready serverless backend-as-a-service that lets developers build amazing cloud applications using JavaScript and GraphQL. With 8base, d...",
				"author_name": "8base"
			}
		},
		"published-date-initial-load": "2022-03-07T00:00:00.000Z",
		"canonical-2": "http://www.8base.com/8base-academy/setting-up-multi-tenant-data-models",
		"order": 23,
		"name": "Setting up Multi-tenant Data Models",
		"video-link": "9grh7vNHaIc",
		"time": "29:48",
		"transcript": "<p>Sebastian Scholl (00:04)<br>Hey there. Sebastian, Product Manager here at 8base. Today we're going to be talking about multi-tenancy. Essentially, let's break down what we mean when we say single instance multi-tenancy. Really all it is at the end of the day is meaning that a single application or a single database is serving multiple customers.</p><p>Sebastian Scholl (00:22)<br>When we start to think of that word tenant in the abstract, a customer could be a user, it could be a company, it could be a user account centred around a specific project. There's many different ways based on the application that you're building the context of tenancy might change.</p><p>Sebastian Scholl (00:40)<br>However, when approaching the architecture of a single instance multi-tenant application in 8base, there's a few tricks that we can show you on how you use a combination of roles and data model to really enable these type of applications to both work as well as work securely and performant for your application.</p><p>Sebastian Scholl (01:01)<br>One of the early use cases that really inspired the vision of 8base was to make the development of single-instance multi-tenant SaaS applications significantly easier. However, let's just break that down really quickly and talk about what we're saying when we say all those words.</p><p>Sebastian Scholl (01:17)<br>When we say single-instance multi-tenant, all we really mean is that a single application or single database is able to serve multiple customers. That is done by making sure that the data is scoped to only a specific tenant. Tenant, customer, we can use these words a little bit interchangeably, but what we're really just talking about is the main table or the main record in our database to which all of that tenant's data is logically scoped.</p><p>Sebastian Scholl (01:49)<br>In 8base, this is super achievable, and it's really powerful tool to enable these types of applications because using data model, with the roles and permissions engine, we are pretty much able to create any type of multi-tenant data model structure.</p><p>Sebastian Scholl (02:04)<br>We're going to jump into 8base and look at a current application that I've set up or the back end for an application and talk about how by default, it already is a single instance multi-tenant database. However, really look through that use case of moving that from supporting multiple users to supporting multiple companies and then company-specific or tenants specific settings.</p><p>Sebastian Scholl (02:28)<br>Without further ado, let's jump in and see how this works. Okay, cool. We're going to start here in one of my favorite workspaces, my super tasks backend. Once again, start with a simple data model, simple application domain, and then abstract the concept from there so we all have a really solid understanding of what's going on.</p><p>Sebastian Scholl (02:47)<br>Inside of this application, it is very straightforward. We have a lists table and a task table, and there is a list can have many tasks that belong to it. There's a few fields on each table, but we can just forget about that for now.</p><p>Sebastian Scholl (03:03)<br>Let's talk about this first in the context of single instance single tenant. That means that this would be an application to only serve one user, which would be or one customer, which let's just say that's me. That means that for me I'm using this as my personal note-taking backend.</p><p>Sebastian Scholl (03:24)<br>That means I don't really have to worry about anything other than authentication because if I can authenticate, I'm the only customer. And so I should be able to see everything in the database because it's all my data.</p><p>Sebastian Scholl (03:34)<br>As soon as you change that to needing to support two users or two or more, then suddenly certain tasks belong to one user, certain tasks belong to another user lists, so on and so forth. We're probably going to be concerned about making sure that I don't see person A tasks and person B doesn't see my tasks or you get what I'm doing there.</p><p>Sebastian Scholl (03:57)<br>That's where we need to start then thinking about, hey, how do we perform this type of scoping to make sure that we are only permissioning certain data to be shown to the right user.</p><p>Sebastian Scholl (04:08)<br>I'm sure that most of the applications that you are designing, you're already thinking about in a single instance multi-tenant way, meaning that you have a single application which you have multiple users using.</p><p>Sebastian Scholl (04:19)<br>The first thing that we're going to do here is just look at the simplest way of setting up a single instance multi-tenant application using our to use backend, which we're first going to migrate it from being a single instance single-tenant application, which it currently is, and move it to being single instance multi-tenant where the tenant is a user.</p><p>Sebastian Scholl (04:41)<br>Here in the data model, we already have a user's table because that's every workspace gives you that. Essentially what we're going to do is we're going to first build a relationship between our tasks table, excuse me, our list table and our user's table.</p><p>Sebastian Scholl (05:00)<br>I'm going to drag and drop that over here and I'm going to say that the relationship here is that every list has an owner, and an owner can have many lists. We're not going to do it the other way around. Once again, you can pretty much create any type of data model you want.</p><p>Sebastian Scholl (05:15)<br>If yours needs to be different, play with relationships as is necessary. But right now we're going to say the user can have many lists and every list requires actually, we're going to leave that unchecked right now because I have some dummy data in here. I don't want to have to delete some of that data.</p><p>Sebastian Scholl (05:31)<br>Every list belongs to a user. That's what we're pretty much saying. And a user has many lists. I'm going to create that field. What I'm going to do, I'm going to go into my list table and I'm going to update the two lists that I have in here to say that Sam is the owner of this list and I'm going to leave this other list blank. Sam does not have... On the other list the other list has no owner.</p><p>Sebastian Scholl (05:57)<br>We've established a situation, if you think of it, kind of in a hierarchy where we're treating our user's table as the top of the hierarchy that is the tenant. Everything that is tenant-specific trickles down from there.</p><p>Sebastian Scholl (06:12)<br>We have the user's table, which has lists and lists of tasks. We actually know that a task belongs to a user, not because they created that record, even though that could be one way of doing it, but because that record trickles right back up to that tenant's table.</p><p>Sebastian Scholl (06:31)<br>Now that our data model is set up, we need to now reflect our roles on the API to accommodate that. I'm going to go here to the app services and I'm going to click to our user role where you create a user role. Here now we're going to be able to set those permissions.</p><p>Sebastian Scholl (06:52)<br>Things like creating records, we want our users to do that. We want them to be able to create lists and create tasks. However, we now want to make sure that they are only seeing or updating or deleting the tasks and lists that are relevant to them or that they own.</p><p>Sebastian Scholl (07:09)<br>It could be confusing. This would actually work by just staying the user's records because every record has a relationship to the user that created it. However, that's actually not going to work for us. The reason being is because we want to be specific about how that record is related to the tenant, not just the fact that a certain user created it.</p><p>Sebastian Scholl (07:33)<br>What we're first going to do is we're going to jump into our list table and here we're going to create a custom filter. When I open that filter, what I want to do here is say that, hey, a user can only see a list if they are the owner of that list. That means that if they send a query to the API and say, hey, show me all the lists, the API is only going to return the ones that they are the owner of.</p><p>Sebastian Scholl (07:59)<br>I can do that by saying that only allow a list to be read if this filter passes, this custom filter passes, the owner \"is_self\". That means that you are the owner of that list.</p><p>Sebastian Scholl (08:21)<br>If you're confused at all about what we're doing here, we have two other videos that really break down roles and permissions, as well as custom filters. I will link them in the video description so you can jump in there, get familiar, and then come right back to where we are.</p><p>Sebastian Scholl (08:35)<br>I'm going to copy that as well as save that and drop that right over here for the update permission as well. You can only update the list if you are the owner.</p><p>Sebastian Scholl (08:46)<br>Before I save it, one thing I just want to mention is that you can have multiple relationships on any record. These types of filters can be a lot more dynamic than this. You could say that one person is the owner, but you could also assign someone as a manager. All these types of configurations are totally feasible. And save that.</p><p>Sebastian Scholl (09:05)<br>Our lists table is properly set up with our user's table treating the user's table as the tenant record. We want to look at tasks. Once again, the way that we want to relate tasks to our tenant is through their relationship to the lists table.</p><p>Sebastian Scholl (09:27)<br>We only want a person to be able to read tasks or update tasks if it belongs to a list of which they are the owner. We're going to do the exact same thing with the custom filter but now on the task table. Go to the custom filter, and on the tasks, we're going to look for the list it belongs to.</p><p>Sebastian Scholl (09:49)<br>Then on that list, we're going to look for the owner, and then that owner we're going to make sure that it is the requesting user, \"is_self\": true. One thing I was throwing in here, \"is_self\": true is just an alias for essentially created by \"id\" \"equals\" and then a dynamic variable \"_loggedInUserId\" exact same thing, much more simply written as \"is_self\": true.</p><p>Sebastian Scholl (10:21)<br>We could say \"is_self\": false if that's relevant to your use case. I'm going to take that, copy it, save it, and add it to the task table over here. For the simple use case, we've literally accomplished it at this point.</p><p>Sebastian Scholl (10:41)<br>This means that now if you have let's imagine that we log into our task management front end. I log in as one of the users, I start hitting the API. It doesn't matter if there's a filter applied to that.</p><p>Sebastian Scholl (10:54)<br>If they say show us all the records or anything like that, these roles will be enforced and only return the data that's relevant to that authenticated user through the roles and permissions that we just set up.</p><p>Sebastian Scholl (11:05)<br>As long as, of course, the user is attributed the user role. If they have no role, they're going to have no permissions. They are not going to get anything back.</p><p>Sebastian Scholl (11:12)<br>Let's go to the next use case. As I'm sure if you're familiar with 8base or familiar with software, this is bread and butter for you. The next use case that we want to accommodate is, okay, I've been using the supertask backend as the single-tenant user and I realized it was super valuable that I wanted to give access to my friends.</p><p>Sebastian Scholl (11:37)<br>So then I made a single instant multi-tenant application to where now my friends can log in and do their tasks. But now one of my friends says, \"Hey, this thing's so great. I want to bring it to my company. I want us to be able to, at my company level, collaborate on tasks and create lists. I want that tenant record to be my company, to which the company actually has many users and no longer is the user of the tenant.\"</p><p>Sebastian Scholl (12:04)<br>Let's now take that next step of creating the data model needed and then the roles and permissions that are required for that type of enablement. We go back to data, and now I'm going to create a new table.</p><p>Sebastian Scholl (12:20)<br>I'm going to create a table called, I'm going to call it Tenant for the sake of example, or Tenants. We could call it Company, Groups, whatever we want to call it projects. Doesn't matter. Tenants will work, though.</p><p>Sebastian Scholl (12:34)<br>We're just going to give a tenant a name because we can. I'm going to create my first tenant record in my database called Company or Big Co. Big Co is now using our tenant or task management application. I'll do another one called Small Co. Remember, we don't want Big Co to see Small Co's data that would be catastrophic for our business, our up and coming task management startup.</p><p>Sebastian Scholl (13:10)<br>What we want to be able to do here is make sure that we are securely permissioning or securely scoping all the data that belongs to Big Co or Small Co only to Big Co or Small Co.</p><p>Sebastian Scholl (13:22)<br>Let's go back to our schemer. The first thing that we're going to do is build a relationship between the tenant and the user's table. Remember, a tenant is like the company, so a tenant is going to have many users, and we also want to make sure that the resources within that tenant are shared by the tenant.</p><p>Sebastian Scholl (13:39)<br>That means that the users at the company can see the list that people are working on and collaborate on the tasks and whatnot. No longer does our paradigm of a user has their own lists really work. Now, of course, we could create an application where users are going to have their own list and the company list.</p><p>Sebastian Scholl (13:55)<br>This is all possible. But for the sake of simple example, we're just going to say that now the company has the list, and only if you work at the company can you see those lists and work on tasks, stuff like that. Here we're going to say that a company or a tenant has many users. That's totally fine. And a user belongs to a tenant.</p><p>Sebastian Scholl (14:18)<br>Once again, we can make that mandatory if we want to. I'm just not going to do it for now. Once again, if we needed to say that a user can belong to multiple tenants, that's possible as well. In this case, we're just going to say one account, one tenant for a user. First we're going to create that relationship.</p><p>Sebastian Scholl (14:34)<br>I'm going to go back to my lists here and I'm going to say that I'm a delete this owner relationship. Actually, I'm gonna leave it. I've changed my mind. All I'm going to do now is I'm going to say that the list belongs to a tenant and an owner and a tenant can have multiple lists. Perfect.</p><p>Sebastian Scholl (14:59)<br>A tenant has list. We have this tenant record. What we want to do is we want to make sure that there's two ways that you can read a list. We're actually going to dice up here.</p><p>Sebastian Scholl (15:15)<br>Well, the first way that you can read a list is either if you are the owner or if you belong to the tenant, which that list belongs to. Then the only way you're going to be able to update a list or a task that belongs to that list is if you're the owner. If you're part of the company, you can read all the lists and the tasks, but only if you're the owner can you actually perform updates. Let's establish that now.</p><p>Sebastian Scholl (15:45)<br>The first thing I'm going to do is I'm going to go in go back to my list here. Even though we're not running these queries, it's just for the sake of example, it's healthy. For the tenant, we're going to say that this list, Sam's list belongs to Big Co. Sam is the owner and the list belongs to Big Co for which Sam works.</p><p>Sebastian Scholl (16:06)<br>Let's go back to our role. We'll use the user role. We'll just keep working with the user role here. Okay. When it comes to our lists, once again, we're saying that as a user, you can create the list, but which ones can you read?</p><p>Sebastian Scholl (16:24)<br>First off, we can say that, well, if you're the owner of the list, you can read it. That makes perfect sense. But remember, we also want to now add that, well, maybe you're not the owner, but maybe you work for the same company as the owner and that list belongs to that company.</p><p>Sebastian Scholl (16:43)<br>What we're going to do here is we're going to open up new brackets and do an \"AND\" excuse me, an \"OR\" so paste that right back in there. Got to get a little better formatter in here. There we go.</p><p>Sebastian Scholl (17:01)<br>The first condition that would allow you to read the list is whether you're the owner. Then the second one is where now we're going to look through that tenant relationship back to the user's table. Remember, we're tying this back to the authenticated user.</p><p>Sebastian Scholl (17:15)<br>We're going to say here. Okay, well, does this list belong to a tenant that has users where... One second, let me try that again. I think I may have gotten the wrong relationship type on there. I'm just going to save that really quickly. Go back in here. Allow multiple users per tenant. I had it backwards. Now it's set up.</p><p>Sebastian Scholl (17:57)<br>Now multiple users per tenant, not the other way around. Then I'm going to go back to app services, go to my user, go to my list, custom filter, and I'm going to go in there. Now when I add that back, I'm only allowing lists to be read that belong to a tenant that has users of which one of the users \"is_self\".</p><p>Sebastian Scholl (18:28)<br>Essentially saying, if you belong to the tenant to which the list belongs, then you can read this list. Once again, like last time, I'm going to copy this and save it. Now our lists are good. Let's go over that update.</p><p>Sebastian Scholl (18:43)<br>Here what I'm going to do is I'm going to copy it over. But like we said last time, we don't want you to be able to update the list. Only if you're the owner can you update the list.</p><p>Sebastian Scholl (18:55)<br>However, let's think of the example of what if you transferred ownership to another tenant. Maybe in this scenario, you may have transferred a list, there's like a feature where you can transfer the list to another company.</p><p>Sebastian Scholl (19:10)<br>In that scenario, if you're still the owner, you're technically seeing data that you shouldn't be seen. What we're going to do here is instead of saying \"OR\" we're going to say \"AND\". In this scenario, we're pretty much saying, hey, you can only update the list if you are the owner and you belong to the tenants that the list belongs to. So a double validation there.</p><p>Sebastian Scholl (19:34)<br>I'm going to copy this, save it, and we're good on the list. Let's do the same thing for the tasks. Here we're going to say, hey, you can read the tasks if the task belongs to a list that belongs to a tenant which has users of which some or any of them we can think of that word in many contexts is you.</p><p>Sebastian Scholl (20:10)<br>Once again, we're going to do the exact same thing for the task custom filter or for update. However, here we're going to say that if the task belongs to a list of which you are a tenant, actually, we just want to make sure that you are the tenant owner. It's actually the same one as back here. Let me steal this one here again.</p><p>Sebastian Scholl (20:46)<br>Here for the task, once again, we want to make sure that you own the list if you're adding tasks to the list. Or we could just say that you belong to the tenant of which the list belongs to. Once again, this is application-specific, but you get the concept.</p><p>Sebastian Scholl (21:00)<br>Here what we're just going to say is that you have to belong to the tenant, the list has to belong to the tenant of which you belong to, and then you can collaborate on the list. That makes sense. I'm going to save that. I think it prettys it up once we click... Yes, there we go.</p><p>Sebastian Scholl (21:27)<br>Once again, at this point, we've accomplished this next level of our application to now, our data model is set up to only allow us to see certain records or perform certain actions on those records as long as the user that's making that request belongs to a tenant record of which those records also belong to.</p><p>Sebastian Scholl (21:47)<br>That's a lot of the word record. I apologize. However, we're going to take it up one last level for this video. What we are assuming at this point is the permissions that are set per tenant are all the same, meaning that okay, well, if you can't or every tenant doesn't want the non-owner to be able to update the list, every tenant wants all their users to be able to read all their lists.</p><p>Sebastian Scholl (22:22)<br>However, as you start to build out more sophisticated applications or have more demanding customers, those things start to change and you have to be able to accommodate those types of changes. Once again, this is totally possible in a pretty straightforward way. What we're going to now do is come up with tenant-level permissions.</p><p>Sebastian Scholl (22:46)<br>Here are how we're going to do that. I'm going to create a new table here called TenantSettings. On this table, I'm going to say non-owners can update lists. Here I'm going to say it's a switch. Excuse me. And true/false. By default, let's just leave it as false. Say it's mandatory.</p><p>Sebastian Scholl (23:29)<br>Non-list owners can update tasks and do the exact same thing here. And false. Let's see. False again, by default, mandatory.</p><p>Sebastian Scholl (23:48)<br>We could go way down the rabbit hole with this, but this will satisfy what we're going to demonstrate here. Essentially what we're saying is that, okay, we're going to create two types of tenant-level permissions.</p><p>Sebastian Scholl (24:01)<br>Pretty much as the customer administrator, excuse me. They will be able to permission whether or not the users in their tenant can or can't update tasks or lists, depending on whether or not they are the owner of the list.</p><p>Sebastian Scholl (24:22)<br>Here what we're going to do is we're going to create two different scenarios. First off is we're going to say that for Big Co or actually for Big Co, we're going to leave it false, false. Oh, sorry, I forgot to do one thing here.</p><p>Sebastian Scholl (24:36)<br>We have to make the relationship between the tenant table and the tenant settings. Here what we're doing is we're going to do a one to one relationship and say that it is mandatory.</p><p>Sebastian Scholl (24:47)<br>The tenant settings needs to belong to a tenant. That's because we only want one settings configuration per tenant. We don't want a tenant with multiple setting configurations which contradict one another.</p><p>Sebastian Scholl (25:03)<br>Here we're going to say that this is the tenant and the related field name is tenant settings. Now when I go back here and let me update this guy.</p><p>Sebastian Scholl (25:14)<br>When it comes to Big Co, Big Co isn't letting their non-owners update anything, you have to be the owner to update it. Even though you can see it if you're not owner because that's how we set up our application. Submit those changes. We're going to add another one for Small Co where they let their users do everything.</p><p>Sebastian Scholl (25:34)<br>We can see that these two tenants have these different settings, which are these values saved in the database. Now we want to tie those back into our roles and permissions engine to make sure that depending on not only the users that send in the query, but the tenant that they are sending that query on behalf of, we can think of it that way that these permissions are taken into consideration.</p><p>Sebastian Scholl (25:58)<br>I'm going to go back to my app services and go to my user role and I'm going to go to my list update and custom filter. What we are going to check is couple things. The first one is we want to still maintain that if you are an owner, you can do the update. We don't want to touch that one.</p><p>Sebastian Scholl (26:28)<br>But now here we have to check two things. We have to check on the second one, that not only do you belong to the tenant, but also that as a non-owner, if you are a non-owner, the settings for that tenant need to be enabled for you to perform an update.</p><p>Sebastian Scholl (26:54)<br>What we are going to do is we have that \"AND\" statement there. We're going to do a little bit extra nesting because remember, we want to touch it. We're going to say an \"OR\" statement here and then put that whole thing right in there. That's scenario number one which we already worked through.</p><p>Sebastian Scholl (27:18)<br>We're going to do scenario number two, which is two things have to check out for this one, because essentially in this case you're not the owner. First off is we're going to check that you belong to the tenant, which we have that one right here.</p><p>Sebastian Scholl (27:41)<br>We'll drop that in there. The next one is we want to check that the tenant's permissions allow you as a non-owner to perform that update on the list. If the list belongs to a tenant which has tenant settings of which non-owners can update lists, and if that \"equals\": true, you're good to go. If it \"equals\": false, you're not good to go.</p><p>Sebastian Scholl (28:13)<br>Copy that. Save that. Boom. We just knocked that one out. We're new same thing for tasks. Custom filter for tasks. Once again we're going to copy this whole thing here. Actually we don't have to do the double predicate here because we're just making sure that you belong to the first one or that the first one is valid which is you are a tenant, you are a user of the tenant. It's a lot of wordplay.</p><p>Sebastian Scholl (28:46)<br>We're just going to do the second check now. Does that task belong to a list which belongs to a tenant which has tenant settings of which non list owners can update the tasks? If that \"equals\": true, you're good to go. Save that.</p><p>Sebastian Scholl (29:04)<br>Once again, we've updated our permissions accordingly to now accommodate our final scenario which is not only do you belong to a tenant but that tenant has tenant-level settings which the roles and permissions engine is taking into account when scoping the data it's returning or when permission in the operation that you are sending to the API.</p><p>Sebastian Scholl (29:26)<br>I hope you found this video valuable. Interesting thought-provoking. There's a lot of different ways that you can take this. However, what it does is it gives you a little bit of a foundation on how you can start to think about roles and permissions and data model really working together to create those more, call it sophisticated scenarios for the applications that you're building.</p><p>Sebastian Scholl (29:48)<br>Thank you again for watching. If you have any questions please leave comments, reach out in the 8base community. Looking forward to hearing from you and looking forward also seeing you in future videos. Take care.</p><p>‍</p>",
		"post-summary": "A breakdown of single-instance multi-tenant and how to do it in 8base.",
		"thumbnail-image": {
			"fileId": "626ab7c5bac6bf2d55c93267",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/626ab7c5bac6bf2d55c93267_Screen%20Shot%202022-04-28%20at%2011.50.25%20AM.png",
			"alt": null
		},
		"slug": "setting-up-multi-tenant-data-models",
		"video-tags": ["61cd9c61af11497c130b0bc8", "61cd9c61af1149687a0b0ba7", "61cd9c61af11497c1f0b0baa"],
		"author": "61cd9c61af1149d1980b10aa",
		"updated-on": "2022-04-28T15:50:33.892Z",
		"updated-by": "Collaborator_5e55457e71987f51d810ff2c",
		"created-on": "2022-04-28T15:50:33.892Z",
		"created-by": "Collaborator_5e55457e71987f51d810ff2c",
		"published-on": "2022-04-28T15:50:33.892Z",
		"published-by": "Collaborator_5e55457e71987f51d810ff2c",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "626ab7c9cbc0165a48e7322a"
	}, {
		"_archived": false,
		"_draft": false,
		"academy-video-link": {
			"url": "https://youtu.be/acK-Rj1gR2k",
			"metadata": {
				"width": 854,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FacK-Rj1gR2k%3Ffeature%3Doembed&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DacK-Rj1gR2k&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FacK-Rj1gR2k%2Fhqdefault.jpg&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"854\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "8base Academy - How to Set Up a CI/CD Pipeline and Migrate Workspace Environments- Course 22",
				"provider_name": "YouTube",
				"type": "video",
				"thumbnail_url": "https://i.ytimg.com/vi/acK-Rj1gR2k/hqdefault.jpg",
				"description": "8base is a production-ready serverless backend-as-a-service that lets developers build amazing cloud applications using JavaScript and GraphQL. With 8base, d...",
				"author_name": "8base"
			}
		},
		"published-date-initial-load": "2022-03-29T00:00:00.000Z",
		"canonical-2": "http://www.8base.com/8base-academy/how-to-set-up-a-ci-cd-pipeline-and-migrate-workspace-environments",
		"order": 22,
		"name": "How to Set Up a CI/CD Pipeline and Migrate Workspace Environments",
		"video-link": "acK-Rj1gR2k",
		"time": "13:30",
		"transcript": "<p>Sebastian (00:04)<br>Hi there. It's Sebastian, Product Manager over here at 8base. Today, I'm going to be walking you through 8base's native implementation of CI/CD, which can stand for continuous integration, continuous deployment, and continuous development, all of the above. Now in this, we're going to dump into our it &nbsp;tool. I've also set up a little workspace where we're going to change the data model to show how I or how CI/CD works. However, what's really important to understand about CI/CD is why it's relevant.</p><p>Sebastian (00:33)<br>Essentially, in a workspace as we're developing, if we're just in development, we can use one workspace because whether or not we break it, we're constantly developing and things are constantly changing. However, after you do that first release to your users, your users are usually hoping or at least relying on some level of stability within your product and platform.</p><p>Sebastian (00:54)<br>If, while your users are using your product, you have your developers going in and adding new features, changing data model, trying out new things. That's not really going to work because your software might continuously be breaking while your users are trying to utilize the service.</p><p>Sebastian (01:10)<br>To solve that problem, what we do is we create up different environments of a workspace such as production, which is the one that your users will always be relying on; staging, which you'd then be able to maybe use for QA testing; and development, which would be where you develop or push developmental features and even feature branches if you have separate development efforts going on at one time. Now all this is possible using 8base's CI/CD system, which is super powerful and we're going to dive into right now.</p><p>Sebastian (01:42)<br>The first thing that I'm going to show here is actually inside the 8base console, which is this little area up here which is a drop-down called Master or with the select option Master. Now in any professional plan workspace, you should see a little button up here called Enable CI/CD. That button, once you click it, will give you this exact interface that I'm looking at and that essentially just turns on CI/CD as a feature of your workspace.</p><p>Sebastian (02:10)<br>Now, by default, the workspace that you create is the master environment as soon as you enable CI/CD. However, off that, we can create as many different environments as we require.</p><p>Sebastian (02:23)<br>Now, what's important to understand about CI/CD is that there's an implied hierarchy. For example, if I branch an environment off master, that is a child environment to master, just as if then I branch another environment off staging, that would then be a child environment to staging. In this example, we're going to create three environments which are master, staging, and development. In order to do that, we're going to jump into our command line.</p><p>Sebastian (02:52)<br>Here in my command line, I've taken a few steps. The first one being that I initialized an 8base project using 8base init. Then inside that project, I ran 8base configure to select the workspace that I want to interact with. In this case, it was the SuperTasks Backend. Now that I'm inside here, I can start running my different commands which are environment, migration, and commit commands. All these are the commands I'm using when interacting with the CI/CD system.</p><p>Sebastian (03:29)<br>The first thing we're going to want to do is create our environments. Let's just first run 8base environment show and we see that we are in our master environment. The next thing that we're going to run is 8base environment branch -n for name and give the environment name that we want, in this case staging.</p><p>Sebastian (03:55)<br>Now, the next thing that's important to note is that we can specify whether or not, when branching an environment, we want to bring all the data with it or leave the data and only the system parts such as data model and stuff like that. In this case, we're going to use mode full so that everything is copied over to staging. Now our staging environment was created.</p><p>Sebastian (04:18)<br>I'm also going to go ahead and just increase the size of my text here so it's a little easier to read. Cool. Now what we're going to do is we're going to switch environments and switch into our staging environment. I'm going to run 8base environment set and this is going to let me select between the environments I've created. I'm going to now go down to staging and set staging.</p><p>Sebastian (04:42)<br>Keep in mind that that change in environments there was only the change in the environment locally. The console, it's a completely separate interface that we are dealing with. This is just for our local development environment. Now that I'm in the staging environment, I'm going to run the exact same command again and I'm going to change the name to Dev.</p><p>Sebastian (05:04)<br>Now we are branching a new environment called Dev off of our staging environment. And instead of full, I'm going to say system, meaning that we're not copying into our development environment any data from the parent environment, just schema data model, roles, permissions, all that type of stuff, and run that. Once that's done, he will be back. We've now gone through all the steps of setting up our three environments, master, staging, and Dev.</p><p>Sebastian (05:36)<br>Now what's really cool is if we go back to the console, we can see that after reloading the page, our environment selector now reflects all those different environments, staging, master, and dev. When we cloned the staging environment from master, we said that we wanted to bring everything full clone. If I go to my staging environment now, and let's take a look at my list table, I can see that actually cloned my data in that table over.</p><p>Sebastian (06:07)<br>However, we said system only when we cloned our Dev environment. If I click into my Dev environment, that same table is empty because we left all the data in its parent environment. Now, inside this Dev environment, this is the only environment now that we can actually make changes to as its parent environments are locked.</p><p>Sebastian (06:27)<br>This is to protect against anything being broke or anything getting broken in those parent environments, as you're usually relying on those parent environments to be stable environments or stable testing environments, while development or the youngest child branch is the one that you can update your data model, deploy new functions to, all that type of stuff.</p><p>Sebastian (06:47)<br>What we're going to do is we're going to go into the task table and add a new field to our task table, something simple. This field is going to be called priority and we're going to make it a switch. The priority options of the switch are low, medium, or med, and high. Say it's a mandatory field and low is the default. Create that field. Now that's part of our schema. Now that's added to our tasks table.</p><p>Sebastian (07:21)<br>But what's cool is that if we go back to staging now, we can see that that field doesn't exist on our staging environment because we haven't committed it or we haven't migrated it to that environment. It only exists on the development environment, which is the one that we are allowed to actually go in and make changes to.</p><p>Sebastian (07:40)<br>Now we could be creating new tables, we could be configuring new roles, we could be doing a lot of different things here, right? However, what's really important is how do we actually now take that change and migrate it to a parent environment?</p><p>Sebastian (07:56)<br>For that, we're going to jump right back into the command line. The first thing I'm going to do is make sure that I'm in the right context or the right environment in my local environment. I'm going to run 8base environment show and it shows me I am in Dev and that's exactly where I want to be.</p><p>Sebastian (08:17)<br>The next thing I'm going to do is I'm actually going to generate the migrations that need to then be run to propagate that change to our data model up to its parent environment, which would be staging. We can see if I list out the directory structure that I currently have, it's normal the 8base.yml file, node modules, and some package.json files or the package.json lock file.</p><p>Sebastian (08:41)<br>However, if I now run the command 8base migration, generate -e for environment and then the name of the environment which is Dev, it's going to go ahead and generate those migration files for me, which now if I list out my directory, I can see that there's a new directory inside there or a new folder in there called migrations. Now I'm just going to go ahead and log out the contents of one of the files in there, which if I go to migrations, we can see that there's a typing file which is generated. Don't worry about it for now. But then a timestamp-schema-create-field-priority.ts file that was generated.</p><p>Sebastian (09:23)<br>If I cut that out, we can see that that file here has a pretty simple little script in it. It has some imports, has a version number, and then it runs a function which has an object in here which essentially declares all the changes that we did to our data model.</p><p>Sebastian (09:40)<br>There's a new default value called low on a field name called priority which is a switch type field. There's some attributes to that field, the idea of the field. Is it a list? No. Is it required? Yes. The name priority, and then the table belongs on tasks. Then it passes it to this little JavaScript function here at context.schema.field.create. That is essentially the migration that will be run against the new environment.</p><p>Sebastian (10:06)<br>Now there's a lot more that you can play in with or play with here, but we're just keeping at the basics today. However, in subsequent videos, we'll show how you can actually use that JavaScript API to perform more complex migrations.</p><p>Sebastian (10:21)<br>After looking at that, now we know that our migration was successfully generated. We're going to go ahead and actually commit that migration to the new environment. To do that we're going to run 8base migration commit environment name, which is staging, and mode which is only migrations.</p><p>Sebastian (10:48)<br>Now, you don't have to specify the mode because it will always default to full. However, just so I can mention it, essentially you have two options when doing a migration. Or three options. You can say that you want to migrate everything which is your custom functions and your schema migrations, or one or the other. I only want to migrate my migrations or I only want to migrate my functions.</p><p>Sebastian (11:18)<br>In this case, we don't have any functions so it wouldn't make a difference. However, know that you have those two options to where maybe you are working on some custom functions that you're not ready to deploy or ready to migrate to the new environment whereas you have some schema that you do need to do, you can differentiate between the two. I'm going to run that now.</p><p>Sebastian (11:38)<br>This should take about a minute so I'll be right back when it is finished up. Awesome. That ran pretty quickly. Also, too, it's just telling us the migrations which it applied, which was that file that we looked at. Now I'm going to jump back into the 8base console. Here if we now move over to our staging environment, we can see that our new priority field has been added to the staging data model.</p><p>Sebastian (12:06)<br>Now, this workspace has been updated so we can leverage that new feature or in this case that new field. However, master is still protected and no changes have been propagated up to that, but still a stable branch that has not had those changes propagated up to it yet. However, if we did want to move those changes from staging to master at this point, we would follow the exact same workflow that we just did from development to staging.</p><p>Sebastian (12:34)<br>Now the last thing to mention here is that this is not something that you have to always do manually by jumping into your command line and going step by step. All these commands can be run in any script that your repository or chosen repository allows you to run, for example, action scripts in GitHub. So if you wanted these types of changes to be made whenever a certain code was committed to a branch in your Git repository, you could absolutely do that and then have these commands execute automatically.</p><p>Sebastian (13:07)<br>I hope this gave you a good understanding of the power of CI/CD and how to get started with it. If you have any questions, please throw some comments in the video or go to community.8base.com and we will be happy to help you work through anything that comes up along the way. Thank you so much for watching and looking forward to seeing you in future videos.</p><p>‍</p>",
		"post-summary": "8base's native implementation of CI/CD, allowing for safer and more structured product development!",
		"slug": "how-to-set-up-a-ci-cd-pipeline-and-migrate-workspace-environments",
		"thumbnail-image": {
			"fileId": "626ab61ade8248f0a979d4f1",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/626ab61ade8248f0a979d4f1_hqdefault.jpeg",
			"alt": null
		},
		"video-tags": ["61cd9c61af114930440b0ba8", "61cd9c61af1149687a0b0ba7"],
		"author": "61cd9c61af1149d1980b10aa",
		"updated-on": "2022-04-28T15:45:29.267Z",
		"updated-by": "Collaborator_5e55457e71987f51d810ff2c",
		"created-on": "2022-04-28T15:45:06.015Z",
		"created-by": "Collaborator_5e55457e71987f51d810ff2c",
		"published-on": "2022-05-04T20:05:38.831Z",
		"published-by": "Person_5a0f5e7fbd61b20001498154",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "626ab6829e86106146813247"
	}, {
		"_archived": false,
		"_draft": false,
		"academy-video-link": {
			"url": "https://youtu.be/nIP3zsAKfy0",
			"metadata": {
				"width": 640,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FnIP3zsAKfy0%3Ffeature%3Doembed&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DnIP3zsAKfy0&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FnIP3zsAKfy0%2Fhqdefault.jpg&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"640\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "8base Academy - Setting Up Your Local Development Environment - Course 21",
				"provider_name": "YouTube",
				"type": "video",
				"thumbnail_url": "https://i.ytimg.com/vi/nIP3zsAKfy0/hqdefault.jpg",
				"description": "8base is a production-ready serverless backend-as-a-service that lets developers build amazing cloud applications using JavaScript and GraphQL. With 8base, d...",
				"author_name": "8base"
			}
		},
		"canonical-2": "http://www.8base.com/8base-academy/setting-up-your-local-development-environment",
		"order": 21,
		"name": "Setting Up Your Local Development Environment",
		"time": "4:14",
		"transcript": "<p>Everyone, this is Sebastian, Product Manager over here at 8base. Today I'm going to be taking you through a quick tutorial showing you how to set up your local development environment to develop custom functions on 8base. Now 8base is a low code software development tool, both for front end and back end.</p><p>‍<br>It's really amazing the things that you can accomplish using our cloud hosted tools such as the back end console or the app builder editor. However, at times, you have to extend your back end using custom code, which we allow you to do by authoring and deploying serverless functions or Lambda functions behind the scenes.</p><p><br>Now I'm going to quickly show you how to get Node.js Installed, use npm, and then create your first 8base functions package so that you have no problem at all getting started on actually extending your custom back end to do all the amazing things that your project demands. Let's jump right into it. The first thing that you're going to want to do is go to Node.js.org and go to their downloads page, whatever machine that you're on; Windows, Mac OS, or potentially another one, you should be able to find the installer that you need to install Node.js on your computer.</p><p><br>I'm going to go ahead and click the Mac installer. Give it a minute for that package to download. Awesome. Once downloaded, I'm going to go ahead and open it. Just go through the installer, choosing the default options. I recommend, if you don't know what the options are, just to accept the defaults. If you do, go ahead and customize it however you need to. Now once everything goes through and installs. Awesome. I can now close that move to the trash and we are good.</p><p><br>Now the next thing is you are going to need to use a terminal. Whether you use the integrated terminal and the VS Code, something like iTerm2 or whatever terminal that you prefer to use, that's great. Just make sure that you have terminal. Personally, I'm going to use iTerm2 in this tutorial I'm going to open up iTerm and I have a new terminal window here. Awesome.</p><p><br>Now if I run node- v, I can see that we successfully sold node or the latest version of Node, which seems to be 16.13.2. Now by installing Node, it's also installed npm on my machine, which is something that we really need, npm -v. npm is the Node package manager, which is essentially going to allow us to install in our projects any open source or private npm package that we want to leverage inside our custom functions that we deploy.</p><p><br>We can go ahead and now install the 8base command line by running npm install 8base-cli -g. Just give it a quick minute to install. Awesome. Now with the 8base command line installed, we're going to quickly authenticate the command line by running 8base login. This is going to redirect it to our browser where if you're already logged into 8base it will just authenticate automatically as I was.</p><p><br>However, if you weren't logged into your 8base account, just go ahead and log in; the same screen will pop up for you. Now once done I'm going to close that window, navigate back to my terminal. Now my 8base command line is authenticated and I'm ready to start developing.</p><p><br>We are currently working on tutorials to show you all the different use cases and ways that you can use functions. However, there's already a couple of hours of video content on YouTube and great documentation that we have that shows you how to develop those functions. That said, this is actually all the work that you have to do to get your local development environment set up so you can start offering 8base functions and deploying them to your back end. Thanks for watching. Looking forward to seeing you in future videos.</p><p>‍</p>",
		"post-summary": "A quick tutorial showing you how to set up your local development environment to develop functions.",
		"slug": "setting-up-your-local-development-environment",
		"author": "61cd9c61af1149d1980b10aa",
		"video-tags": ["61cd9c61af114930440b0ba8", "61cd9c61af114959330b0bf1", "61cd9c61af1149dd0a0b0bab"],
		"updated-on": "2022-04-28T15:38:59.846Z",
		"updated-by": "Collaborator_5e55457e71987f51d810ff2c",
		"created-on": "2022-04-28T15:36:21.845Z",
		"created-by": "Collaborator_5e55457e71987f51d810ff2c",
		"published-on": "2022-05-04T20:05:38.831Z",
		"published-by": "Person_5a0f5e7fbd61b20001498154",
		"published-date-initial-load": "2022-03-29T00:00:00.000Z",
		"thumbnail-image": {
			"fileId": "626ab4f7a45aa0332f54f71e",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/626ab4f7a45aa0332f54f71e_setting-up-local-dev-environment-cover.png",
			"alt": null
		},
		"video-link": "nIP3zsAKfy0",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "626ab4756061a6e476f729c6"
	}, {
		"_archived": false,
		"_draft": false,
		"academy-video-link": {
			"url": "https://www.youtube.com/watch?v=hk9Yp-9aOFo",
			"metadata": {
				"width": 854,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fhk9Yp-9aOFo%3Ffeature%3Doembed&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dhk9Yp-9aOFo&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fhk9Yp-9aOFo%2Fhqdefault.jpg&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"854\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "8base Academy - Develop a Custom CRM using Retool and 8base - Course 20",
				"provider_name": "YouTube",
				"type": "video",
				"thumbnail_url": "https://i.ytimg.com/vi/hk9Yp-9aOFo/hqdefault.jpg",
				"description": "Tutorial Repo: https://github.com/8base/retool-8base-custom-crm-tutorial Docs Links: - 8base API Tokens https://docs.8base.com/docs/8base-console/roles-and-p...",
				"author_name": "8base"
			}
		},
		"published-date-initial-load": "2020-08-19T00:00:00.000Z",
		"canonical-2": "http://www.8base.com/8base-academy/develop-a-custom-crm-using-retool-and-8base",
		"order": 20,
		"name": "Develop a Custom CRM using Retool and 8base",
		"video-link": "hk9Yp-9aOFo",
		"time": "34 min",
		"transcript": "<p><em>*This is an automated transcript. Please excuse inaccuracies.</em></p><p>‍</p><p>Hey there, my name is Sebastian. I'm the product manager here at 8base. If you like this video please like it as well as subscribe to our channel, it really helps us grow. So, in this video what we're going to be building is a custom CRM solution using a 8base back end and a re-tool front-end. &nbsp;</p><p> &nbsp;</p><p>If you look at the proliferation of low-code and no code tools that have popped up over the last years, it's really incredible what people that don't have traditional coding skills or computer science backgrounds can actually develop using little or no code. &nbsp;</p><p> &nbsp;</p><p>Now this is a great way to introduce to these two tools that is 8base and Retool. So, let's just dive in and build this thing. And so here we go as always what I've done is gone ahead and write a full tutorial that is hosted on GitHub. So, I will make sure that this link is in the video description, so you can follow along and complete each step with me if you want to or just go ahead and watch me do it. We're going to be starting from scratch and do everything just in the console of each tool right. </p><p> &nbsp;</p><p>So, first off what you're going to need to have is 8base and a Retool account. Both platforms provide you know free tiers or free trials that will allow you to complete this entire tutorial having no problem at all. So, don't worry about having to create any new subscriptions at the moment. &nbsp;</p><p> &nbsp;</p><p>Now just to kick off the tutorial what we're going to start by doing is building the data model for our custom CRM and then making sure that the Graphql API that we're going to set up is working. &nbsp;</p><p> &nbsp;</p><p>Now it's a pretty simple data model just because what we're going to be doing is using a template that Retool actually provides you and then retrofitting it to work with a Graphql API. But this will give you a really great understanding of how to you know construct a simple data model with an 8base and as well as just give you all the tools you need to then expand upon that in the future. &nbsp;</p><p> &nbsp;</p><p>So, there's two tables we're going to need; deals and touch points. So, deals is going to be the main record on our CRM that we're going to use and then touch points is simply going to be a related record that shows when the deal was last interacted with whether it's a phone call or an email or an in-person meeting; whatever that might be. &nbsp;</p><p> &nbsp;</p><p>So, let's shoot on over to 8base and go into our data builder and start adding our tables. So, we're just going to go ahead and add two tables first one is going to be deals which we have added there and then I'm going to add another table called “Touch Points”. And then I'm also going to make my screen a little bit better size for that, cool touch points- awesome. &nbsp;</p><p> &nbsp;</p><p>All right now on Touch Points we're going to only add one field which is going to be a field called contact medium and so this is kind of like a select list they're going to be building or an Enum. So, let's say contact medium is the name of the field we're going to select switch type and then custom and this is going to allow us to add multiple options in here. So, one option is going to be email, another option is going to be phone and the third option is going to be in person, cool. And then all we're going to do is say that this is a mandatory field and by default it's going to be a phone. The phone is going to be the default value if nothing is specified. So, let's create that field cool so we just had our first field great job. And next what we're going to do is we're actually going to build a relationship between the deals table and the touchpoints table. &nbsp;</p><p> &nbsp;</p><p>Now this is easy if I just drag the deals table over onto this new field input and drop it into place it's going to wire up most of what we need done. So, as you can see that now we have a relationship to where it says there's allowed multiple touch points per deal; it's a mini to one relationship that's what we want. We're also going to make the deal field mandatory because we want to make sure that every touch point belongs to a deal. We don't just want a random touch point in our database that's not belonging to anything and then what we're also going to do is rename it to where the relationship from the touchpoints table is called deal not deals since it's a singular relationship, cool. &nbsp;</p><p> &nbsp;</p><p>So, once we do that we go ahead and create the field and that's then they're done. So, then what we're going to do is that's actually all we need for touch points we're going to then jump into the deals table and this is where we're going to have to add a little bit more information. So, you can see that it already did the reverse wiring on the relationship between deals and touch points so it knows that a deal has many touch points. However, if we go over to our tutorial here and we scroll down it's going to show us the structure that we need here for the deals table this is just kind of talking about the steps that we just went through. So, we're going to see that we want a field called email which is a text field that's mandatory and has 30 characters. &nbsp;</p><p> &nbsp;</p><p>So, email let's make that a text field, all ready character size and mandatory, cool. Next up we have stage which is going to be another switch like we just did lead, opportunity and customer mandatory default is lead, So, let's see if I remember all that when I go in here. Stage we're going to have a switch type field let's get that to be custom. Let's have a lead. Let's have an opportunity and let's have a customer cool and then it's going to be mandatory and it's going to be a lead by default. So, then that's then there and then we're going to have an amount which is going to be a number with two decimal places. Amount to how much the deal is going to be worth. Number two, decibel places. Create that field. Then we're also going to add a deal name, so we need that deal name text. I think that we can leave it. Let's have it mandatory, but we'll leave it for 100 characters and yep that's good. Same thing for department but not mandatory. The department, cool. Text- create a phone number. All right we're almost there I'm sure you got the hang of this at this point phone number, text 12. Cool create that- awesome. And then finally touch points which is already done so, cool. &nbsp;</p><p> &nbsp;</p><p>Now something that's really cool that was happening right there is as we're going through and defining this table it's actually reverse engineering our Graphql API for us. So, already do we have a Graphql API that we can use start querying records from, sending records to, listening to subscriptions on; all that cool stuff. And so just to show that we did this right I'm going to jump over to the API explorer which is essentially a you know an API client that we can use to execute queries against our API. You could use the one that's embedded here in 8base, graphical postman, they're all out there and really easy to use. However, what we can do is I have this this mutation right here that's going to create a deal as well as you can see create two touch points for the deal in one mutation. So, I'm just going to drop that in here and run it to make sure that we got all our names right and everything like that. &nbsp;</p><p> &nbsp;</p><p>So, I just ran it and our response is success. So, it created the deal with that name and was created at this time. And then was also cool is while running that mutation we also created those two touch points which automatically are getting associated with our deal since they're being done through the relationship or they're being created through the relationship. And we can verify that as well if we go into our deals table now and we look at the data it's right there. So, that's our first record that we created as well as we go into our touch points table exact same thing our touch points are there. So, nice work there. &nbsp;</p><p> &nbsp;</p><p>Now the last thing that we're going to want to do is essentially when we're using this API client here the API explorer, 8base is handling the authentication for us. However, when we're going to plug it into Retool, we're going to use this our API from a Retool resource. We're going to need a way of authenticating those requests going to the API. And what we're going to do in this tutorial, is simply use an API token so if I go to my settings and API token, essentially, I can click the plus button and I'm going to say this is the re tool API token. And I'm going to give it the administrator role. &nbsp;</p><p> &nbsp;</p><p>Now you can create custom roles and permissions that will only allow certain tables or actions to be taken. There's a lot of great tutorials that we have for that at 8base. However, just giving you the administrator token will allow it access to all our tables and so we'll use that for now just for convenience. Create that token and I'm going to hide this value before I publish this tutorial. And so, I'm going to copy it. And make sure that when you copy this you store it somewhere safe because you can only see it one time. So, if you don't do that, you're going to have to regenerate it. So, one second, I'm just adding it to a little to a text field or text file saving that there cool and now I'm going to close it great. &nbsp;</p><p> &nbsp;</p><p>So, at this point it's actually already time to jump over to Retool and start setting up our CRM. Our entire back-end is actually done. And so, I would say at this point if you wanted to like customize the back end in some really cool way, you actually could go in and start doing that. I'd wait till after the tutorial though because the way we're going to wire up to Retool, the naming conventions are important. So, it would just you'll run into less issues if you just follow along with the tutorial and then fix it or change it to what you're trying to accomplish afterwards. &nbsp;</p><p> &nbsp;</p><p>So, let's go over to Retool and the first thing that we're going to want to create is a new resource so we can see I have one here that I created while working on this, but we're going to create a new one. So, if I clicked on create new and then I'm going to scroll down to this API section and click on Graphql because we're going to be interacting with a Graphql API. And so, let's call this the 8base CRM backend resource. And what I'm going to first do is go into 8base, go into settings and then get this endpoint URL right here; this is the endpoint for our API. Go back here and drop that as the base URL. And so, the authentication method that we're going to be using for API calls or authorization method excuse me is using a bearer token. So, we're going to say that the key is authorization and then bearer space. And now I'm going to recopy from my text file that API key just drop it in there right after that. And so that's it we can test the connection to make sure that it's working. Connection success; so, it was able to um get a get a valid response back. Create the resource. And now we have that resource that we can now use in the apps that we build with Retool. &nbsp;</p><p> &nbsp;</p><p>So, I'm going to go back to my app section now and click on “create new” and “create from template”. Now in here if I type in CRM, they have this flexible CRM template that we're going to be able to use which is super cool. So, just click on that. I'm going to say pick this template. Let's give it a name which is “my new custom CRM”, cool, and then create the app. So, it's going to go ahead and jump into the Retool app editor interface. And once that is loaded, you can see that we kind of have this this view right here and a lot of error messages. But now what we're going to do is go and kind of retrofit it to make sure it's working with the Graphql API. The reason being is because this template was developed to work with a MySQL database. And so, we're going to have to go in and say, “Hey, you know this is how we're going to redesign essentially the queries that are getting run to access the data it needs.” &nbsp;</p><p> &nbsp;</p><p>And so, the best place to start for us is going to be the leads query which is right here. So, as you can see you know it has the SQL statement that would run against MySQL database. However, what we're going to want to do is um is update that to be a Graphql call. And so, if we go down here to or actually not down there- oh if we look here, we can see that there's some inputs that it's using and um and we're going to also update those as well. &nbsp;</p><p> &nbsp;</p><p>So, first off instead of using the onboarding dB<strong> </strong>which we don't have, we're going to go and select the 8base CRM back-end resource that we just created. So, add that there and then it's going to ask us to input the query itself. &nbsp;</p><p> &nbsp;</p><p>Now I go into the tutorial and I scroll down, I have the leads query written right here and I'm going to walk you through it. So, essentially, we're doing a query that has two arguments it takes a stage which is a string and a name which is also a string and then it's going to query for a list of deals that have both that stage and the name contains that string. So, this will allow us to kind of filter or search for certain results. And then in response I'm asking for a list of all those items and I want the id, the stage, the email amount, deal name and the create ad and updated at times on that record right, So, I'm going to copy this query and pop right back over to Retool drop it in there. &nbsp;</p><p> &nbsp;</p><p>Now Retool's really cool and it's super responsive, so it actually saw on my query that I'm looking for a stage and a name. And if I scroll down now you can see that it pre-populated those two variables. So, within Retool there's a global namespace or that we can access right so all our components are making available these objects with different data on them. So, for example if we go to button group one which is if we look up here at the top of our table, we can see that, “Hey, you know there's these different buttons and they have the different values on them.” So, we can see that like you know currently in button group one the values lead and we're going to use that as the argument to our query. So, I'm just going to close that name space there and I'm going to go in and say for the stage, double brackets. that then allows us to access that. And so, for a button group one, I want the value which is lead, cool. And then for name essentially what we're going to want is the name input which is this guy right here; so essentially what name are we searching for on a deal. And so, I'm going to say name input I want the value of the name input, awesome. And then I'm going to scroll down make sure that there's nothing else that we need, update, cool. Nothing there and so I'm going to save this query it's going to run it and if I go back here- let's see where would that- if I run the query right here, you can see it ran successfully, I can drill down into the data and I can see that one item came back which is our big opportunity at Big CO right. &nbsp;</p><p> &nbsp;</p><p>So, that was the deal that we created in our base back-end so we're already getting data into Retool. However, we want it to now populate the table component that is where it should go. So, if we click on the table here, we can see that it's still looking for the data from the old query which is leads.data. Now that's actually the nesting of the object that we're now returning from our API, so we actually have to drill deeper into it. So, leads data, then there's a property called deals list and then on that there's an items array and once we get that items array that's each record that we want on our table. And so by simply updating that we're already now seeing the deals record inside our table right here right; so that's our first opportunity. &nbsp;</p><p> &nbsp;</p><p>So, pretty straightforward and I'm super powerful. &nbsp;</p><p> &nbsp;</p><p>So, next up what we're going to want to move to is updating our touchpoints query, so exact same thing you know SQL query let's change it. So, 8base CRM backend and now what I’m going to do is I'm going to go into the query and once again I have it written out over here and so our touchpoints query is a very similar one. So, I'm going to copy that, paste it in and essentially what's happening here is we're saying, “Hey, give us a give us a list of all our touch points but filter them by the deal ID that we're passing in.” So, only show me touch points belonging to a specific deal. &nbsp;</p><p> &nbsp;</p><p>Now how are we going to pass in the appropriate deal ID for this query? So, if we go down to our variables, we can see it's looking for a deal ID. And what's really cool is the table component makes available an attribute called selected row; which is then you know essentially any row that's highlighted or by default the first row in the table. So, if you were to click on a different row it would update that property and that's going to allow us to actually drill in and find the deal id for the touch points that we want to see. So, if we do double brackets cool and we do the leads. Let me spell that correctly- leads table, cool- selected row data. So, it's already guessing where we're going to go here and then if I click that I click on ID. Now we have the current the current table value that we want, awesome. And so, if I look down nothing else that we want to change here, cool. So, I'm going to save that query, I'm going to run that query and we can see once again if we drill into that we have two items and each one is the created at medium you know phone call whatever it should be there. And now when we look at where this goes, we have this kind of touch points view. So, let's click into that and see what it's looking for. &nbsp;</p><p> &nbsp;</p><p>So, essentially you know this is the old way it was formatting it, but what we're going to want to do is we're going to want to make just a simple array of strings that represent each contactor or let's say that represent each touch point that's happened to date, right. And so, I have this little JavaScript function here that will work for this, right. Now if I take it and I drop it into our touchpoint's items input here, so it's saying that we're “getting some unexpected token”. Let's just see what that might be. So, we have touch points data list items we're going to map over each one of those and for each touch point we look at what it was created at, change that to a date string and then we're going to look at the contact medium. So, touch point p-o-i-n-t and let's see what's available on it if anything. Touchpoint.ID- see if that allows us to do something. Interesting. Okay. So, if we go here you can see that we have ID let's just run this query again make sure that we have the updated data and we're going to go back in and say when it was the contact medium… okay… ah it's missing a parenthesis. There we go, cool. &nbsp;</p><p> &nbsp;</p><p>So, now we update that and once again super responsive now we're showing the list of touch points that we we should be. </p><p> &nbsp;</p><p>Now I think you guys get the flow of what we're going through here. So, we're just going to kind of move really quickly through the next four queries or the next four mutations, so that we can move on to just updating the rest of the components. So, for example for create lead this is actually going to be one where we add a new record or add a new lead to our database. So, we're going to go in say it's the CRM backend resource. From the tutorial we can see that we have this create lead mutation. Now when we create a lead, we're going to want its phone number, the department, deal name, email, amount and all that stuff. And so, what we're going to do is take this query this mutation, drop it in there and now we're going to go ahead and map all those inputs from our component which is a add new or create new lead modal, so these fields right here. So, we can see that the component is new deal name new deal phone new deal email. So, we're going to have to access all those. Let's go down to our variables and we're going to say here, new-deal, there we go, cool- new- deal- phone, got that. And so, then this is going to be a new- deal- department. New- deal- department, have that one. This one is going to be new- deal- name. Well got that one. Then we're going to go for the new- deal- email. Cool. And lastly one second- what did I do there? Okay close that back- new- deal- email. Got it. And then finally the new- deal- amount- value, right there. Awesome. &nbsp;</p><p> &nbsp;</p><p>All right, so we mapped all those up and then what we're going to do is we then we see that, “Hey, whenever you create a new lead rerun the leads trigger.” So, then we query it back and add it to the appropriate the appropriate response as well as close the modal that we had just opened to create it. So, I'm going to save that one, cool. And once it's saved. Awesome. So, let's do an upgrade deal so the upgrade deal the idea of this is that, “Hey, if someone's on offer a lead and we're going to upgrade them to an opportunity and then their opportunity we're going to upgrade them to the customer as well as downgrade them back down kind of like the sales funnel, right.” So, let's make sure that we're using the right resource.” Let's go ahead over to the upgrade deal mutation. Grab this mutation and drop it into our query input. And then it's going to show that we need the current stage which we know how to get from the leads table. Selected row data. Stage attribute- stage key, cool. And then same thing for the leads table, we want the ID because we have to run this mutation on the right record. So, we're going to go for the select or leads table- there we go. Data.ID. Cool. Got that one done as well. &nbsp;</p><p> &nbsp;</p><p>And then down here what we're just going to do is we're going to turn off or take off this um opportunities on success trigger thing that was with the old template. We're not going to need that anymore. So, just leave that there and run save and cool got that one saved. The downgrade deal is- oh you know what we messed up a little bit here so the stage that we're going to want to give it is actually the stage we want it to move to right because that's the update that we're going to be running. So, if we go back into the tutorial, we're going to see here that hey we have a leads table with the selected row. If the stage equals lead change to an opportunity. However, if it's not that it is an opportunity so let's change it to customer so that little ternary operation there, we'll take that and drop that in there. That's we're going to want it exactly, so we're seeing that this one is a lead. So, it would move to opportunity if we were to run the query on the current selected table. Awesome! &nbsp;</p><p> &nbsp;</p><p>Now very similar when it comes to downgrading the opportunity. Essentially what we're going to be doing is using a similar if not exact same query right here or mutation and drop that in to here. 8base CRM backend, drop that in. And then for the ID we're going to want the leads table selected rowdata.ID. And then we're going to do a little bit backwards to where if it's opportunity make it a lead or if it's not that it's a customer, so then make it an opportunity. So, let's pull that there and drop that right in to this input awesome. Now once again we're going to go down and remove opportunities, so we don't need that to run anymore and save our query. &nbsp;</p><p> &nbsp;</p><p>Now lastly, we're going to have the set details one which is going to allow us to update the value for our CRM you know so that's this little form here. So, it will be the name, the email and the amount. And so when we go into the 8base CRM back end let's run down to set details query take this mutation and drop it in. Cool. So, it's just going to be taking all those inputs that are optional and then running the mutation with the ones past passed in. And so, when we go ahead and update these values, we can just hover the component to see what the name of the component is. We can see this is the name is text input eight. So, let's go in here and say, double brackets text, input number eight value cool and it's nice that it shows the little confirmation what the value is. And so then for the email, we're going to go in and say this is number seven, text input number seven value. Cool. Finally, for the amount text input number six. So, text input number six value awesome and then we're just going to remove that empty field that we accidentally or I accidentally added. And then for the ID once again this is the leads table selectedrowdata.ID. All right save that query or that mutation and we're going to also remove opportunities from it as well I'm going to resave it because we don't want that to happen. </p><p> &nbsp;</p><p>So, cool, those are actually all of our queries and mutations that we have to have for our CRM to work. Now what we really want to do and I'm even just going to close this bottom view here, is we want to make sure that we're wiring all these up to the components that need to display them right. So, for example we can see that we know why is this information blank right here or why is this here. It's because we're not reading the right properties. So, for example if I were to touch on or tap on the text 13 input or component and I would go into here, I'd see that it's still looking for you know the dataID.length. &nbsp;</p><p> &nbsp;</p><p>Now what I can do is I can go to touch points data, go into my data list and look at the items and then see how long that array is. So, length and suddenly boom that component is updated. For the image this is just generating a random URL. Yeah, it's just like getting a random picture, but it needs some type of seed value. So, just for fun what we can do is we can take the deal amount and do it that way so if we go to our leads table selectedrowdata.amount, that the deal is worth it's going to then do a modulo operation on it with 500 and then from this API that it's using get an image that will work. </p><p> &nbsp;</p><p>Next up, what we'll want to do is this last contacted which if we go bring this down. Essentially what last contact is going to be is if I come down here, we're going to see that we're going to use moment.js which is a JavaScript date library. And then we're going to go through our touch points. Find the first one in the array. Look when it was created at. And then format it so it's the month-month/day-day/year-year format. So, let's just take this right here go back into Retool and for this value. highlight it all drop that in and we can see when they are last contacted now/ &nbsp;</p><p> &nbsp;</p><p>And then for next step and next contact these are just kind of kind of funny. So, essentially what we're going to do here is say that. “Hey, if the last touch point was a phone call shoot them an email or if it was an email book an in-person meeting.” And for the next contact we're just going to say, “Hey, this was when they were last contacted reach out in a week right.” And so, to make those happen what we have is first next step which is just an if-then statement. So, we're essentially saying if it is an email make it a phone call, if it's a phone call book an in-person meeting or send an email. So, copy this, go back over, click on the text 15 component and drop into the value right here so we can see that hey based on the last touch point send an email on the next one. And then for this one what we're going to do is we're just going to use the moment.js date library to add one week to when the last touch point was created and once again format it as we need to. So, go in next contact, basics, open that up, drop that in and that is there, right. &nbsp;</p><p> &nbsp;</p><p>So, now here's what's really cool right so let's go in or actually let's just run the app. So, close this. I think everything's saved. Yep everything's saved. Cool. So, let's run our app. And here's our custom CRM right so let's create a lead let's make sure it works. So, my new deal from today. And I'm going to go in and say that this is the number. I have an email at email.co. This is a 50,000 deal and it's with the product department of the company I'm dealing with. I'm going to create this lead and we got an invalid error; expected a float. So, let's see if I'm able to add some decimals there. It should be able to handle that. Ah, I think I know what's happening. So, it's expecting a float, but this input is passing a string. So, what we can do is if we go back to our editor and we go to our create lead query and then in here for the amount what we're going to do is we're going to say, “parse float” as the and pass in the value into there. And so, now if we know that's updated let's save it and let's go back to our application. And so, let's create our new lead. And so once again, we're going to go through new deal some phone number <a href=\"mailto:eem@mail.co\">eem@mail.co</a>. Deal is 50,000 dot-dot. And we're going to use the product department create the lead and our query ran successfully and there it is now in our CRM. And let's say that we updated the deal size, so it was much bigger. Let's add some numbers in there, submit edit. So, now that deal is way bigger and then now it's moving forward. So, let's convert; so, we're going to click on that. Let's now convert it. Well so now it is an opportunity. So, now when we click on opportunities it's bringing it back to us there and so if I go back to opportunities. And now as you can see if I click on it it's going to update the things that. We need we don't have any touch points yet so it's not adding any of those and so let's see if we copy email- just copies it right. &nbsp;</p><p> &nbsp;</p><p>However, I think that this is probably where we're going to wrap up here because during the course of this tutorial we essentially built an entire front end for this CRM, we set up a back-end really quickly and we really didn't write any code to do any of it which is super cool and powerful. And I hope you can see that using these basic tools that we covered how far you can actually take this into building custom business apps. So, I hope you found this tutorial helpful if you like it please let us know by liking it as well as subscribing to the channel and leaving comments in below. I'm going to be adding the GitHub link for the tutorial below as well as some documentation links to both Retool and 8base that will help answer some questions that you may have. However, thank you for following along in this tutorial and I look forward to seeing you in future videos, take care. </p>",
		"post-summary": "In episode 20 of the 8base Academy Series, we're building a custom CRM using Retool and 8base.",
		"thumbnail-image": {
			"fileId": "61cd9c61af11491a770b11df",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/5f36af125e3f496c24eaa6ff_Academy-Course20.png",
			"alt": null
		},
		"slug": "develop-a-custom-crm-using-retool-and-8base",
		"author": "61cd9c61af1149d1980b10aa",
		"video-tags": ["61cd9c61af11497c130b0bc8", "61cd9c61af1149dd0a0b0bab", "61cd9c61af11495fbb0b0bec"],
		"updated-on": "2020-08-19T18:59:22.441Z",
		"updated-by": "Collaborator_5e55457e71987f51d810ff2c",
		"created-on": "2020-08-19T18:59:22.441Z",
		"created-by": "Collaborator_5e55457e71987f51d810ff2c",
		"published-on": "2021-12-30T11:48:39.600Z",
		"published-by": "Person_5a0f5e7fbd61b20001498154",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "61cd9c61af11490a960b10b7"
	}, {
		"_archived": false,
		"_draft": false,
		"academy-video-link": {
			"url": "https://youtu.be/TOqkf1OlBbU",
			"metadata": {
				"width": 854,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FTOqkf1OlBbU%3Ffeature%3Doembed&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DTOqkf1OlBbU&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FTOqkf1OlBbU%2Fhqdefault.jpg&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"854\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "8base Academy - Managing Connected Devices using API Tokens - Course 19",
				"provider_name": "YouTube",
				"type": "video",
				"thumbnail_url": "https://i.ytimg.com/vi/TOqkf1OlBbU/hqdefault.jpg",
				"description": "GitHub Repo: https://github.com/8base/managing-devices-using-api-tokens Permissions Docs: https://docs.8base.com/docs/8base-console/roles-and-permissions#man...",
				"author_name": "8base"
			}
		},
		"published-date-initial-load": "2020-08-02T00:00:00.000Z",
		"canonical-2": "http://www.8base.com/8base-academy/managing-connected-devices-using-api-tokens",
		"order": 19,
		"name": "Managing Connected Devices using API Tokens",
		"video-link": "TOqkf1OlBbU",
		"time": "21:30",
		"transcript": "<p><em>* This is an automated transcript. Please excuse inaccuracies. </em></p><p>‍</p><p>Hi, my name's Sebastian, I'm the product manager here at 8base. If you like this video, please like it as well as subscribe to our channel it really helps us grow. So, in this tutorial what we're going to be talking about is how you can authenticate devices using API tokens and some of the different resolvers that we can actually create to handle things like device registration. </p><p> &nbsp;</p><p>You know very often when we think of authentication, we think of it in the context of a user needs to authenticate to my app, so then they can go in and perform the actions that they need to perform. However, it's not uncommon that if you're dealing with connected devices like an IOT device maybe even a VR headset or a registration kiosk per se that you actually need the device or the application itself authenticated, so that then users can use that application or the device itself can perform the task that it needs to perform. &nbsp;</p><p> &nbsp;</p><p>So, let's jump into this tutorial it's all on GitHub. I'm just going to go through it with you, so we can explain it all step by step and I hope you find this valuable. &nbsp;</p><p> &nbsp;</p><p>So, the first thing that we're going to do is, we're going to go down in the tutorial which I will make sure is in the video description below. So, what we're going to do is we're going to have a device which is really just going to be our laptop. Essentially, we have a few scripts that we'll be able to run that will execute calls to our Graph QL API on an 8-base workspace, as well as when we register the device, save an API token that we get passed back. So, what I'll do is I will copy only and head back over to S code and then just directory, orioles, cool and drop that right in there. Downloaded, so check this out. Cool. And then I'm just going to folder here in… cool now we got it. &nbsp;</p><p> &nbsp;</p><p>All right, so just to quickly break down the device application that we built- the tutorials are really not about that, but just to give it some context. Essentially, we have this folder here called, “Device” where in our package.json file, we have a command called “exec” which is going to run, we're going to hit our index.js file under course. Now very simple we pass this an argument and take that argument and find the right function that we are, the function name that we passed it and then these functions are really what we're going to be. So, register device, read activity and send activity. This will allow us to register the device as we're expecting to, and then we can just run a query and a mutation to show that we can receive and send device authenticated make sure that the right records are coming back and forth. &nbsp;</p><p> &nbsp;</p><p>So, with that said, we also have a simple storage system of essentially reading and writing object values to a json file, as well as in our utils we have an API module which we were using to communicate with our Graph QL API. So, there's encode comments for all this stuff- feel free to peel through it when you're going through the tutorial, but it's very straightforward. &nbsp;</p><p> &nbsp;</p><p>The only thing that we're going to have to change in this device repo is API endpoint that you connect into, you'll want to make it your 8base workspace; so, in just a minute we'll update that property. &nbsp;</p><p> &nbsp;</p><p>Now if we go back to the tutorial we can see that it is, telling us a little bit about that device structure that we just went through, telling us to switch out the 8base API or workspace API and then it gets to setting up the back-end which is the more important part. &nbsp;</p><p> &nbsp;</p><p>Now if you don't already have it installed all you want to do is install the apes command. Essentially, you'll be needing to use this both to import the schema that we'll be using for the tutorial, as well as then to deploy the custom resolver that we're going to write that will allow you to register your device. So, I already have it installed, but all you'd have to do is run NPM install global 8base CLI or you could use yarn whatever package manager you prefer over. Then once you are inside the project change into the server directory. So, then what I'm going to do is I'm going to go ahead and change into my server directory so server. And right in here if we look at it, we can see that there's the schema.json file. Now this is going to be a really simple and effective way of bootstrapping our application by using the import tool to import these tables that we'll need for the sake of this tutorial. That is registration codes devices and data entries- I think that's what we we're calling. It is just something that we can read and write data from to make sure that our device is able to do it as well. &nbsp;</p><p> &nbsp;</p><p>Now if you haven't already run 8base login and that will authenticate your command line. However, what I'm going to do is I'm going to run 8base configure so that I can select the workspace that we'll be interacting with. So, it is called- it's up here… device tokens tutorial that's it, cool. &nbsp;</p><p> &nbsp;</p><p>All right so now this project is connected to device tokens tutorial and the next thing that our tutorial is asking us to do is run 8base import the schema.json file; so that one right there. Let's go back here and run this command to make sure that is it all in our workspace 8baseimport-fschema.json. Awesome! Now this should just take a minute but I'll come right back when it's done cool so that was faster than I expected just 17 seconds great. </p><p> &nbsp;</p><p>So, now that we've imported that we're actually going to go over to 8 base workspace that we're dealing with and be there for a little bit as we set up the rest of the back-end that we need to have set up. So, if I go back here and I go to my device token tutorial workspace. Now if I go to my data and I refresh it we're going to see that we have a few different tables now inside our workspace. So, the first one is data entries which is very simple. It is a table that stores a record which has a value and those are related devices. The devices are essentially going to be sending these values to our API and saving those. &nbsp;</p><p> &nbsp;</p><p>Devices is the record we're actually going to use to track any device that's being authenticated. Obviously as you'd have a user record in your database this is going to be the device record. And so, we're giving it a name it has many data entries- exactly. It has one registration code which we generate to be able to authenticate these devices. And then also has an API token to it- the token we're going to have to generate and that will be the credentials able to pass back and forth. And then finally we have registration codes which have that one-to-one relation devices, then they take a text input essentially to um use a password when you sign up. &nbsp;</p><p> &nbsp;</p><p>So, very straightforward data model. Now let's see what it asks us to go and do next. </p><p> &nbsp;</p><p>So, what we're going to have to do after that is go into defining roles and permissions. So, if we go back here and we go to our app services go to roles we're going to add a new role and we're going to call this the device role. So, any device that gets registered is going to have this role associated with it you can add a description if you like up to you. So, now if we go “add role” and then click into this role we're going to go ahead and pretty much just turn off everything. So, let's go here- no records, no record, no records… this is an improvement we can make which is effective to turn everything off. But we're almost there in three, two, one- done. Awesome! </p><p> &nbsp;</p><p>So, now with all those off we're starting from a complete of setting up our permissions for the device role. And what we're to want is to, really the device is only going to have to deal with data entries and its own record device. Everything else is going to be handled on server-side logic without permissions being checked. So, with data entries that's a record that we're going to actually want devices to create data entries and only read the data entry needs to that it has created. So, let's make sure that we allow create data entry. &nbsp;</p><p> &nbsp;</p><p>Now if we were dealing with the users table right, we could just say, “user's records” right; so, any record that the user created they could see. But with devices it's different right and so if we were actually click into this we could see that that generates a custom filter to where it says, “Hey, for the data entry whoever it was created by if there are id equals the id of the logged in user, then they can see that record.” Well we have another dynamic variable that we're going to be able to use here called “Requesting API Token” and that's how we're going to be able to build this bridge of actually scoping which records a device can see or any other entity that works within your use case. So, what we can do is take this right here copy it over or let's write it out. I'm actually just going to copy this piece right here. I don't have to type it out and I'm going to delete the rest of this. So, we are on that data entries table here right. And so, every data entry belongs to a device so we're going to look at the device and then every device has an API token if it's registered. So, then we're going to look at the API token and then we're going to say, “For the API token if the token value equals the requesting API token, then that's the filter that we're going to allow that that user to have.” Pretty straightforward but works really well. &nbsp;</p><p> &nbsp;</p><p>So, drop that in there now we can go back to here and see that okay well when it comes to the devices table, which records does the device have access to. We in this case only want to give it access to itself. So, what we're going to do is we're going to go back in here and read to a custom filter. And now that we're on the devices record, we can just say, “We know it has an API token, we know that API token has a token and then we know we want to equals the underscore requesting”- that's why I don't do it- API and spell that right, I think that’s cool. So, once again this will scope it down to where it's only able to read its own. Now save that and we're also supposed to drop that in for custom filter. We'll check that and yep we're good there- cool. There's a lot more to learn about roles and permissions. I will also add a documentation link in the video description, but for now know that this dynamic variable requesting API token is the feature that allows us to essentially say, “When a device is using that API token to authenticate, we can use that to then scope the records in our custom roles and permissions.” Cool. &nbsp;</p><p> &nbsp;</p><p>So, with that set up, now we actually are going to go back over to VS code and deploy our serverless function, our registered device function. Now with basic crud operations that we need as well as subscriptions are just automatically generated by the API. So, when we want to create our data entries or read our data entry, update them whatever that is our API is already ready to go. But in this case, we kind of have this custom one we say, “Hey, we want a registered device register a device and there's a few different things that need to be coordinated for that effort.” So, we're going to use this resolver to accomplish that. So, let's hop back to vs code and read through that resolver function. I'm going to close devices here and I'm going to open server and I'm going to go in to the register device schema.graphql file. &nbsp;</p><p> &nbsp;</p><p>So, first off pretty simple we have a mutation and we have it's called “Register Device” and accepts a code which will be a string value, returns its result which is the id; can be the id of the device as well as an API token and that's the token we're going to have to store on the device. So, pretty straightforward, GraphQL schema- let's now look at the handler. So, we have just a couple basic constants up here. When we look at this registration code query, this is how we're going to check whether or not the code exists. When we look at the create API token mutation, this is actually how we are going to create the API token as well as associate with that token the device role. &nbsp;</p><p> &nbsp;</p><p>So, you can see here that we are connecting the role device to the API token once it's created, so that API token has the right permissions associated with it. Then we are doing this “create device mutation”, where when we create the device, we are giving its name, we are giving an API token and we are connecting it to the registration code; and there's a reason we're doing that and which we'll see in a minute. &nbsp;</p><p> &nbsp;</p><p>So, pretty straightforward when the event or when the trigger runs when the function runs, we get the code off the data. We then get back a registration code running, the registration code query and identifying it by the code that was passed in. Now if no code was found it was an invalid code, we just are going to return an error that says, “Hey, this one was submitted but it wasn't found no code found error” or no code found there- exactly. &nbsp;</p><p> &nbsp;</p><p>Next, we're going to see that well if the registration code was found, but if it has a device associated with it then it's already been used right. So, then we're going to say, “Hey, the submitted code was already used code assigned that's another error.” But if neither of those, we're going to assume the code is valid and then what we'll do is we'll say okay well now we're going to create an API token. So, we go ahead create that API token, give the token itself a unique name using the code that was passed in. Then once that's done, we're going to use all the information that we've got at this point to create our device. So, we're going to pass in the code id, we're going to pass in the token id and we're also going to give the device a name which you could come up with any name you feel. So, here we're just going to use device, underscore and then the code that was passed in. Then just a little console statement, so we have something in our logs that say, you know the token with was added to the device with this id at this time and then we are returning the id and the API token. &nbsp;</p><p> &nbsp;</p><p>So, pretty straightforward function but this is going to coordinate all those efforts that we've been discussing. &nbsp;</p><p> &nbsp;</p><p>So, all I'm going to do here now is run 8base deploy and this is going to package and deploy this function to the workspace. So, once this is done deploying, I will be back. &nbsp;</p><p> &nbsp;</p><p>Awesome! So, that just finished deploying now we're actually have to jump back really quickly into our roles and permissions and update one thing. Essentially, when we are registering a device the device is unauthenticated. So, we need to make sure that that specific Graph QL operation has public access on our API. So, what we can do is hop back over to our 8base workspace and go back to our roles, and here we're going to go in and click on our guest role. &nbsp;</p><p> &nbsp;</p><p>Now the guest role essentially defines what are the public resources. So, someone's making an API request without any authorization header, what are they able to do. And if we go into our “apps” tab here and scroll down, we can see that on the API the custom resolvers that we push to our Graph QL API will pop up. And so, what we're just going to do is click on register device to make sure that now we have public access to our registered device. Then what we're also going to do is go into settings and just take our workspace endpoint. We have to add this to the project so start testing out our device. &nbsp;</p><p> &nbsp;</p><p>So, let's go back to the tutorial and see and yeah, we're already at the testing phase cool. So, let's jump back into VS code and go into our API module on the device, source, bills, API drop in this value. Cool. So, now it knows which API to connect. So, what I'll do now is I'll just change back into the devices or the device directory and I'm also going to run NPM install to make sure we have all our these installed. Cool. And then if we look at our tutorial it's going to tell us which commands, we're going to test. &nbsp;</p><p> &nbsp;</p><p>So, what we'll do is first we'll go in and test that if we don't have permission if we're unauthenticated to read data. Then we'll register the device. And then we will send some data. Then we'll read that data and at that point we'll know that, “Hey, we successfully went through the entire flow that we're trying to accomplish,” &nbsp;</p><p> &nbsp;</p><p>So, to make sure that we'll be able to register our device let's go in and actually create our first registration code which is going to be registration codes add, don't select new device because there are none at this point. We're going to say, one, two, three, four, five our code. Add that row in the database now let's hop on back and start going through flows. So, first off and we can just look at the names of our functions right here because these are the ones we'll be doing. So, let's run NPM- run exec -<strong>[unintelligible 18:39] -</strong> activity. And cool, you don't have permission to perform this operation because we're not registered or we don't have any API token. Look here in storage you can see that we just have an empty object; so, let's then run register. So, NPM, run exec and we're going to call register device one, two, three, four, five and here we go. &nbsp;</p><p> &nbsp;</p><p>Okay so I know what happened there so essentially what's happening is that in this workspace we have it set up to where it's just deleting records, but not destroying them so our unique validation is still triggering. So, what we can do is we can hop right on back to our workspace and go update this code for a code that we most definitely have in use. So, let's say, six, five, four, seven, two, eight, nine. And I'm going to copy that so I don't have to remember it, we'll submit those changes. That code is now updated. So, go back to our command line tool, drop this in paste it and let's now register this device here we go cool. So, it said, “Adding the storage. Device is registered”. And if we go into our file here, we can see that our API token and the id of the device have now saved. </p><p> &nbsp;</p><p>But now if we run that same command that we did earlier read activity, it's going to say, “Hey there's no data.” So, let's actually send some data to our API- extend the activity and activity. And then 1 to 120. Do another one just for fun 110. So, entry saved to device with that id awesome. &nbsp;</p><p> &nbsp;</p><p>Now when we go ahead and run our read activity you can see that our device has been authenticated, it's getting the data back and forth and it's using that API token which created for it and associated with the right record. And what's important about this too is that where we create another device the roles and permissions feature that we're using that request an API token, the devices would not be able to see the data that either one is sending or perform operations on records that they're supposed to. &nbsp;</p><p> &nbsp;</p><p>So, this is a really powerful tool if you're essentially, building this a fleet of IOT devices or you're having connected devices that might have access to AdSense data. You'll really want to use this type of system or a tool like this to scope down the records that these authenticated entities actually perform operations. &nbsp;</p><p> &nbsp;</p><p>So, I hope you found this video helpful. If you did, please once again subscribe to the channel, it really helps us grow. And I look forward to seeing you in the next one. Thank you so much and have a great day. </p><p> </p><p>‍</p>",
		"post-summary": "In Episode 19 of the 8base Academy Series you'll learn how to using API Tokens for authorization.",
		"thumbnail-image": {
			"fileId": "61cd9c61af1149adfd0b11c3",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/5f283210d49d3484d9486488_Academy-Course19.png",
			"alt": null
		},
		"slug": "managing-connected-devices-using-api-tokens",
		"video-tags": ["61cd9c61af11497c1f0b0baa", "61cd9c61af114959330b0bf1", "61cd9c61af1149687a0b0ba7"],
		"updated-on": "2020-08-03T16:26:01.932Z",
		"updated-by": "Collaborator_5e55457e71987f51d810ff2c",
		"created-on": "2020-08-02T20:55:39.893Z",
		"created-by": "Collaborator_5e55457e71987f51d810ff2c",
		"published-on": "2021-12-30T11:48:39.600Z",
		"published-by": "Person_5a0f5e7fbd61b20001498154",
		"author": "61cd9c61af1149d1980b10aa",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "61cd9c61af114923590b10b3"
	}, {
		"_archived": false,
		"_draft": false,
		"academy-video-link": {
			"url": "https://youtu.be/IDpfnp5SDxQ",
			"metadata": {
				"width": 854,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FIDpfnp5SDxQ%3Ffeature%3Doembed&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DIDpfnp5SDxQ&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FIDpfnp5SDxQ%2Fhqdefault.jpg&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"854\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "8base Academy - Setting up Auth0 as an 8base Authentication Provider - Course 18",
				"provider_name": "YouTube",
				"type": "video",
				"thumbnail_url": "https://i.ytimg.com/vi/IDpfnp5SDxQ/hqdefault.jpg",
				"description": "GitHub Repo: https://github.com/8base/auth0-login-examples 8base is a production-ready serverless backend-as-a-service that lets developers build amazing clo...",
				"author_name": "8base"
			}
		},
		"published-date-initial-load": "2020-07-22T00:00:00.000Z",
		"canonical-2": "http://www.8base.com/8base-academy/setting-up-auth0-as-an-8base-authentication-provider",
		"order": 18,
		"name": "Setting up Auth0 as an 8base Authentication Provider",
		"video-link": "IDpfnp5SDxQ",
		"time": "27:43",
		"transcript": "<p><em>* This is an automatic transcription. Please excuse inaccuracies. </em></p><p>‍</p><p>Hey, my name is Sebastian. I'm the product manager here at 8base. if you find this video helpful please like it as well as subscribe to our channel it really helps us grow. So, I'm excited to say that this is actually a pretty anticipated video from our 8based community. we're going to be going over how do you integrate auth0 with 8base. &nbsp;</p><p> &nbsp;</p><p>So, when it comes to authentication and 8base there's actually one really important concept that you need to understand, which is that an 8base you don't store passwords and we don't store passwords. What we do is we use an authentication provider to store passwords and handle authentication. And then our API can read the JSON web tokens with the ID tokens that that authentication provider issues. &nbsp;</p><p> &nbsp;</p><p>Now this means that under the hood currently we actually just use auth0 to provide authentication; however, it could be any auth provider. And we also give our developers the option of bringing their own authentication providers to their workspace. For example, one like auth0 or Cognito Okta, whoever you want to use. In this tutorial that we're going to be going over how can you bring your own auth0 to 8base or your auth account to 8base and set that up with using two different types of authentication. The one way we're going to do it is directly interfacing with the base graph QL API and the other way we're going to do it is the hosted login page with redirect. So, let's just jump right into it and go ahead. &nbsp;</p><p> &nbsp;</p><p>So, one thing to visualize really quickly to hopefully help understand how the authentication is working is when you have a front-end application you want someone to log in, you can either send them to a hosted login page or you skip the login page and you just send their credentials directly to [in this case we're using the Graph QL 8base. Now 8base then is going to look at the authentication profile that you set up and then communicate with the appropriate authentication provider. If the credentials passed were valid, we're then going to issue a token back to the front-end; which then whenever you're making API requests you can pass as a bearer token. Whenever those bearer tokens are used, we verify them to make sure that they're valid and that's then the communication that's essentially happening between those two systems. &nbsp;</p><p> &nbsp;</p><p>Now we can go deeper on that if we one, two; however, I would recommend checking out the 8base docs to dive in a little deeper and understand it at a lower level. &nbsp;</p><p> &nbsp;</p><p>With that said the first thing we're going to do is do the straightforward hosted login page with redirect authentication. And the way we're going to do that is actually by starting here and auth0. Now what this means is that when a user wants to login to our application, we're actually going to send them to a hosted login page in which they go about authentication and then auth0 will redirect them back to our app with all the auth results stored as hash parameters in the URL. &nbsp;</p><p> &nbsp;</p><p>So, to start this process what we're going to need to do is actually create a new application auth0. So, we're going to click on create application. And depending on the type of application that you're building, here we either do a regular web application or a single page application. We're going to do a single page application because I built a little simple react application to show these examples in practice. So, I'm just saying use single page web application and I'm going to say that, this is my SPA demo app. Go ahead and create that well. &nbsp;</p><p> &nbsp;</p><p>Now what it's going to do if we go over to settings is, give us all these different keys that we're going to need to use. But we're also going to need to set some white listed URLs. So, for example, my app is going to be running on localhost, so I'm going to HTTP localhost 3,000. And this is the callback URL, so this means that after someone's authenticated what you path should auth0 redirect them back to and that's where you're going to have to handle the auth result. So, I'm going to say it's going to be at auth/callback. &nbsp;</p><p> &nbsp;</p><p>Now for the logout URL we're going to also whitelist what URL someone will be sent to after they log out. So, I'm going to do HTTP/localhost3000/ logout. And then finally what is the allowed web of orange in; so, we're just going to take our localhost and again drop that right in there. For example, you know if your website was called letmelogin.com you'd be using letmelogin.com instead of the localhost, but we're all going to have this in development so it doesn't really matter. &nbsp;</p><p> &nbsp;</p><p>So, then I'm going to go down and I'm going to save my changes all right now what I'm going to need to do is go over to the 8base side of things and actually start or input some of these different credentials so we can build that connection. &nbsp;</p><p> &nbsp;</p><p>So, I'm going to go into an 8 base workspace I have here and I'm going to go to my app services. &nbsp;</p><p> &nbsp;</p><p>Now under authentication here's where I can add an authentication profile. I'm going to click in there. I'm going to say this is for hosted login page auth name. I’m going to select my own auth0 account. So, here's where it's asking for all this information right so what I'm going to do is I'm going to say, okay well I want to get the domain. Let me go back there drop the domain in. I want to get the client ID- drop the client ID in there I take my clients secret- client secret. And then it's going to ask for the database name. So, what we're going to do is we're going to go up here to our connections and we can see that by default, we have the username password authentication database- so I'm just going to use that one right there. Okay go back auth0 and drop that database name in there. And then if you had a custom URL for your auth management domain you'd want to add that in here, but we don't so we're not going to have to use it. </p><p> &nbsp;</p><p>I'm going to say that this is an open to all signup page and this is all 8base stuff and that anyone that signs up is automatically going to be assigned to the guest role. &nbsp;</p><p> &nbsp;</p><p>I'm going to add that profile and once done cool we have that we have that done there. &nbsp;</p><p> &nbsp;</p><p>So, now what we can actually do is jump over to the kind of that demo app that I built and add these credentials and actually just go straight through the hosts of login experience; it's pretty straightforward. &nbsp;</p><p> &nbsp;</p><p>So, let me click over to vs<strong> </strong>code, I'm going to open this client, open the source. &nbsp;</p><p> &nbsp;</p><p>Now there's a few things that we are going to want to do when it comes to hosted login page. So, first off, we set all those redirect URLs right. So, if I go into this app that I built- this react app I scroll down you can see that for the callback component and the login page I had to set three different routes; a logout route; the callback route; and then just the page that we're going to initiate the login from that could be your home page or even your navbar if you wanted to do it that way. &nbsp;</p><p> &nbsp;</p><p>So, let's go first look at the login page. So, that's the hosted login page example by going here and I see prompt.JS. &nbsp;</p><p> &nbsp;</p><p>So, we can see that here is that we're importing this auth module and we have this login button that when it's clicked, we just call this authorized method on there. Let's go see what the utils auth module looks like. I'm going to utils, auth you can see here that's a pretty straightforward initialization for the client. We import it from 8base auth, we call this create client method on it, we're giving it the strategy which is web auth0. There are different strategies that you can use for authentication this one will work for auth0 and then what we need to add is the domain and the client ID. &nbsp;</p><p> &nbsp;</p><p>So, I'm just going to grab those really quickly from auth0 because they're easier more easily found there. First let me take the domain cool and drop that in here. Excellent! And then I'm going to go grab the client ID right there. Excellent! And bring it back. &nbsp;</p><p> &nbsp;</p><p>And then what you can see what we did here too is for the redirect URI and the logout redirect URI, we are just taking the location origin from the DOM and then appending or however you want to save the string coercion- but adding the path that needs to be there, so that those settings are properly configured. So, we save that and that's actually it for this part. &nbsp;</p><p> &nbsp;</p><p>So, let's go ahead and boot up this application. It might take a minute so we will be back when it does. Alright so here now we can go to our hosted login redirect page. So, here we have this button which we saw that we're going to call that authorized message on or method on. &nbsp;</p><p> &nbsp;</p><p>So, if I click it you see it took me off to a completely different page where now here's where we're going to handle all our authentication stuff. If we wanted to, we could sign up, we could login in or we could do a forgot password and auth0 by default we just send us an email. &nbsp;</p><p> &nbsp;</p><p>So, I've already signed up for my app or actually- no I have it so I'm going to go ahead and sign up with my Google+ profile. I'm going to say okay authorize. All right and so it sent me back to the app after authorizing and you can see that it had got my email, it passed the ID token and this is the ID token that we can then use to interact with the 8base API. And then it gave some other payload information like my name a family name, nickname picture generated for me and some other information. And depending on how you're using your auth0 profile, you can adjust these things however you want to now. Also, you can see that since I did a single sign-on or social sign-on my emails verified, whereas if you the user had signed up with just email password it would have not been verified and they would have gotten an email- but you can customize all those emails on auth0 as often as you need to. </p><p> &nbsp;</p><p>So, now I have this logout button and if I go back to text editor, we can see that if on the callback- well first let's actually go through this callback. So, when it redirected it redirected us to the callback path and then we get this component rendered. Now this component when rendered, pretty simple, just has you know some basic template and then it has that when there's an auth result or when the auth results undefined say it's loading the auth0 result but then show the author's all. Now just for the sake of demonstration, I just pretty much print it out the results from the key value standpoint right. But this is where you'd want to take that result and store it in local storage, put in your state management system, however you want to keep that ID token and potentially refresh token and whatnot. However, what we're doing here is once the components mounted we're calling our auth module or using our auth module to call this get authorized data method which then once it's done it returns the auth result and we're setting that in the state and if there was an issue we're setting the issue in the state as well just because it would print it out for the sake of this demo. But right there is the moment that we are actually getting our ID token and all the other author information that we need. &nbsp;</p><p> &nbsp;</p><p>Now what we can see here too is that we have this logout button that when you call when you click it, it calls the logout method on the auth module. And what will that would do is successfully log us out and bring us to our logout path. &nbsp;</p><p> &nbsp;</p><p>Now all these routes and whatnot are customizable. Maybe you want different flows. Maybe you want to automatically redirect someone back to a home page; however, you want to configure it, it's completely up to you. But what's really cool up the hosted login experience is you can see just in a couple minutes almost we were able to fully set up an authentication a system for application and get the information that we need back to start securely making calls to the 8base API. &nbsp;</p><p> &nbsp;</p><p>So, what we're then going to do now is just go back over to our app, click the logout button and we can see what it did is brought us right to the logout path that we wanted to use. &nbsp;</p><p> &nbsp;</p><p>Now what if you do not want to use the hosted login experience that's absolutely fine. The 8base API actually offers by default some of the authentication resolvers or mutations that you need to have to log in users, sign them up with passwords or sign them up with tokens and perform other actions like that. And so now what we're going to do is, pretty much go through some of the same steps, but doing it for if you didn't want to use hosted login and instead just wanted to use the Graph QL API to build your own login experience. So, how we're going to start that is going by going back over to auth0. </p><p> &nbsp;</p><p>Now we're going to create a whole different application for this and we have to understand when using the 8base graph QL API is all the requests are going to 8base and then 8base is the one making the request to auth0. So, when we create this new application what we actually want to create is a machine-to-machine application since it's the 8base server talking to your authors your management API. Let's just call this my eighth base workspace select machine-to-machine and create that app. &nbsp;</p><p> &nbsp;</p><p>Now it's going to ask what API we want to get permission to we could create our own API, but we're going to use the auth0 management API by default. &nbsp;</p><p> &nbsp;</p><p>Now we're going to need to make sure that our 8base or the 8based workspace is able to see which users are in your auth0 tenant as well as create users in there. And depending on what else you're doing you might need to add some more scopes and permissions to this connection, however for what we're doing here, these two are the basics that we need. &nbsp;</p><p> &nbsp;</p><p>Now I'm going to go ahead and authorize this application alright so it gives us a little bit more information down here on you know depending on what languages we're working with, how we can interface with the with the management API. However, I'm going to go over to my settings I'm going to scroll down to the bottom and under advanced settings here, I'm going to specify that the we also need the password grant type- this is what will actually allow us to have people log in. I'm going to save that change and after doing that I'm now going to head back over to 8base. &nbsp;</p><p> &nbsp;</p><p>Now I'm going to add another authentication profile and that's going to be called my graph QL API auth. Once again, I'm going to say my auth0 or you're auth0 and then I'm going to go and get this information. Once again so let's drop in the management domain, let's drop in the client ID drop in a client secret, then we're going to add the same username password database. So, if I go down to connections database, so I can copy it… let's see auth0- all right looks like it's loading for some reason. There we go- just click on here and here we can see that if we look at the applications it's turned on for the my 8based works-based application. So, take that drop it, drop it in here and once again we can leave the auth0 management domain blank because we're using the default management API. I'm going to say this is open all as well and I'm also going to say that, someone that signs in gets the guest role now we're going to add that profile cool was created. &nbsp;</p><p> &nbsp;</p><p>Now what we have to do is we're have to go back in and update the update the login form that we built in the react app that that we'll use now this new authentication profile. So, what we can see here is if we go back to our main app page, we have this one route to this graph QL API example component. So, if we go into our views and graph QL API example, you can see there's just one form. &nbsp;</p><p> &nbsp;</p><p>Now this is a little more involved because we're handling everything on the front end through the API however it'll be pretty simple and pretty straightforward to understand. So, first off, we can see that we're bringing in this Apollo module which is a very simple just using the default Apollo client and we need to add our 8base API workspace and point to it. So, let me hop back over to 8base and go and find that which is right here in our settings- copy the endpoint URL. So, let's go back in and drop that in here. Then if we go back to that form, we can see the next thing that we import are these mutations. &nbsp;</p><p> &nbsp;</p><p>Now these are all the mutations that we can use to authenticate our users right. So, for example we have the login mutation which takes an email password and the auth profile ID and then it will return if successful the refresh token and the ID token. We have a signup mutation which takes the email the password and the auth profile ID, and it signs up the user with a password returning the ID email and the word date that the user was created at when successful. And then finally, we have this forgot password mutation which takes the email and then returns a success response if successful for having sent the user a reset password email. &nbsp;</p><p> &nbsp;</p><p>This is actually going to be a custom resolver that we build and so just stay tuned and we'll get how we set that up and how that one works. &nbsp;</p><p> &nbsp;</p><p>Now if we go back to our form, we actually only need to add the auth profile ID because we already configured the auth profile with the necessary credentials on the server side. So, if we go back to our form what we can do is we can see if we scroll down that here in the state of this react component, we have a form which has email password an auth profile ID. So, what we were going to want to do is go back over to 8base, look at our authentication profiles and get the right one for my graph to our API auth this is the profile ID right here. This is exactly where we want to put that auth profile ID that we just got. And what's cool about this is this will actually map it to the appropriate<strong> </strong>auth profile ID which is exactly where we specified the client secret, the client ID it's a domain all that different stuff. &nbsp;</p><p> &nbsp;</p><p>So, already we're at a point where a user could log or a user could log in and sign up now you know we could look a little bit at this form it's pretty straight forward. We have a very basic react component with the with the form. And when someone clicks submit the form, we're going to run those mutations that we just looked at right. &nbsp;</p><p> &nbsp;</p><p>I'm going to have all this code and GitHub for you so you can take time to look through it, but it's a very straightforward email password form; just know that. &nbsp;</p><p> &nbsp;</p><p>So, let's go back to our application and I'm just going to reload it and then go to our Graph QL API auth and here you can see that we have it to where we can test a sign-in we can test the sign up and we can test a reset password. So, first let's test a setup. So, I'm going to say that my email address is one <a href=\"mailto:randominbox@gmail.com\">randominbox@gmail.com</a> and I'm going to put a password right there sign up. Now this is sending that to 8base which is then pinging auth0 and it's going to return the result in just a second. &nbsp;</p><p> &nbsp;</p><p>Now we can see that we successfully signed up and the information that was responded or was given back was exactly what it asked for which was our ID our email and when the user was created. &nbsp;</p><p> &nbsp;</p><p>Now I can actually just switch to the sign-in and it's going to maintain these based on how I built the form it's going to maintain the credentials. So, now let's test a sign-in because we just signed up. So, if I click sign-in once again it's going to go and here, we have it. We have a user log and successful; it gave us a refresh token; as well as my ID token. So, we could just use that and put it on our state and our user is authenticated so that's pretty great. &nbsp;</p><p> &nbsp;</p><p>Now what about reset password in this example we're going to have to actually get auth0 to send a password reset email to the user right. And we don't have that by default on the graphical API for a number of reasons but we can add it using a custom function. So, if we go back over to our vs code to our text editor and we look in the auth functions- here we have an 8base project where we're going to deploy this resolver called user forgot password. And we can just see that here in our 8base.EMl file, user password forgot password and we have a path to the schema file and the handler file. &nbsp;</p><p> &nbsp;</p><p>So, if we look at the schema, we can see it's a simple mutation that takes an email address and returns a success response true or false; very straightforward. And if we look at our handler here, what we can see is okay well we import these two modules auth management and author your authentication from auth module. We can look at that really quickly right here which we see is a simple way that we are initializing both the management client from auth0 SDK and the authentication client from auth0 SDK and then just exporting those in a single object. &nbsp;</p><p> &nbsp;</p><p>Now we're going to set the domain client ID and the client secret, so let's go grab both of those. If I go back here and I go auth0, now I'm still in my 8base workspace. Perfect! So, what I'm going to start doing is copying these right over. So, first I'm going to take the domain and drop it right in here. Then I'm going to take the client ID and drop it right back in here. And then finally you guys are going to get to see my secret but I'm going to delete this as soon as I post the tutorial, so don't even try to do anything funny. However, you should set these as environment variables rather than hard code these values directly into your workspace. &nbsp;</p><p> &nbsp;</p><p>So, now finally I'm going to add that secret or your function. So, I'm going to add that secret, save it and go right back to our handler function. So, now we can see we import both of those from our auth0 module. And then what we are going to do is we're going to look up our user by email address; that's why we need that read users scope when we set up our management API. Then if the user exists, we're then going to request a password email change and then when doing that we're going to supply it the connection which was the database name. And if that was successful, that user will receive an email that will allow them to go in and update their password. &nbsp;</p><p> &nbsp;</p><p>Now what's important to note here is that maybe you'd want to in your resolver actually let the users submit the new password. You can do whatever you want because here you be able to communicate directly with the author your management API; so, whatever is on that SDK you would be calling or be able to use from this custom function. So, it's pretty much up to you however creative you want to get or how creative you want to get in setting up your own authentication and flows. &nbsp;</p><p> &nbsp;</p><p>Now let's deploy this, so we can actually use it. Pretty simple- all I'm going to do is run 8base configure then you set it up with our workspace here. 8base configure and I'm going to go down and find my workspace which is auth0 tutorial workspace. And then I'm going to run 8base deploy. And that's going to take care of packaging and deploying our function, So, this usually takes a minute when you do it for the first time, so we'll be back once it's done. &nbsp;</p><p> &nbsp;</p><p>Great so that function has deployed and that means that now if we look at our resolver over on our client project which is right here in source, utils, graph QL. Well that means that now we have this operation available on our Graph QL API. &nbsp;</p><p> &nbsp;</p><p>So, what we can do is we can open back up our sample application is right here. And in the test reset password I'm going to run this reset password and whoops it says that I do not have permission for this operation; there's a reason for that. So, we just deployed the function what we're going to have to do is jump over into 8base go to our settings or go to our app services go to our roles go to our guest role; and our guest role is pretty much defining what can we do without being authenticated. And if I look here, we can say, “enable for role user forgot password”. Easy. So, back to our react app let's run that again and three two- there we go you just forgot password success. &nbsp;</p><p> &nbsp;</p><p>So, I hope you found this tutorial really helpful if you're using auth0 in 8base. If you have any questions, please just reach out and ask. I'm going to make sure that there's a link to the GitHub repo right below in the description. Once again if you found this video helpful please like, as well as subscribe to our channel, it really helps us out and I look forward to seeing you in future videos. Take care. </p><p> </p><p>‍</p>",
		"post-summary": "Course 18 of the 8base Academy video series demonstrates setting up Auth0 with 8base.",
		"slug": "setting-up-auth0-as-an-8base-authentication-provider",
		"thumbnail-image": {
			"fileId": "61cd9c61af1149e5110b11c1",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/5f17218f9186eb1f7082080c_academy-course18.png",
			"alt": null
		},
		"author": "61cd9c61af1149d1980b10aa",
		"video-tags": ["61cd9c61af1149687a0b0ba7", "61cd9c61af1149fb100b0bf4", "61cd9c61af114959330b0bf1"],
		"updated-on": "2020-07-23T20:00:32.905Z",
		"updated-by": "Person_5a0f5e7fbd61b20001498154",
		"created-on": "2020-07-22T02:56:47.006Z",
		"created-by": "Collaborator_5e55457e71987f51d810ff2c",
		"published-on": "2021-12-30T11:48:39.600Z",
		"published-by": "Person_5a0f5e7fbd61b20001498154",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "61cd9c61af1149eff30b10b2"
	}, {
		"_archived": false,
		"_draft": false,
		"academy-video-link": {
			"url": "https://youtu.be/LiA3I9oYI3s",
			"metadata": {
				"width": 854,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FLiA3I9oYI3s%3Ffeature%3Doembed&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DLiA3I9oYI3s&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FLiA3I9oYI3s%2Fhqdefault.jpg&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"854\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "8base Academy - Building a Public Chat Room with GraphQL Subscriptions - Course 17",
				"provider_name": "YouTube",
				"type": "video",
				"thumbnail_url": "https://i.ytimg.com/vi/LiA3I9oYI3s/hqdefault.jpg",
				"description": "GitHub Tutorial Link: https://github.com/8base/Chat-application-using-GraphQL-Subscriptions-and-Vue Blog Post link: https://www.8base.com/blog/how-to-build-a...",
				"author_name": "8base"
			}
		},
		"published-date-initial-load": "2020-07-11T00:00:00.000Z",
		"canonical-2": "https://www.8base.com/8base-academy/building-a-public-chat-room-with-graphql-subscriptions-course-17",
		"order": 17,
		"name": "Building a Public Chat Room with GraphQL Subscriptions",
		"video-link": "LiA3I9oYI3s",
		"time": "24:53",
		"transcript": "<p>*&nbsp;<em>This is an automated transcription. Pleas excuse inaccuracies.</em></p><p>‍</p><p>Hi, my name is Sebastian. I'm the product manager here at 8base. If you find this video helpful please like it as well as subscribe to our channel- it really helps us grow. So, in this video we're going to be building a public chat room using GraphicQL subscriptions and VueJS for our front-end framework. This is going to give you a great primer on how to use subscriptions to build real time notification applications, a real-time event application for example, messaging apps, notification feeds or anything else that you want to use essentially behind the scenes web sockets for. So, let's just dive right in and go ahead and build this. &nbsp;</p><p> &nbsp;</p><p>So, what I did the other day was went ahead and made a tutorial for how to build this chatroom. Frankly, it will take anywhere from like 10 to 15 minutes it's really fast. What we're going to do is we're going to use VueJS for the front-end with Apollo client as our Graph QL client and then 8base for the backend. 8base will give us all the resources we need to set up our back-end and use the subscriptions via GraphQL. So, what we're going to do is we're just going to walk through this tutorial step by step I'll complete it with you, however I'll add some context to all the steps as we go through them. Well, alright let's get started. &nbsp;</p><p> &nbsp;</p><p>So, the first thing that we're going to do is go ahead and set up our project so for example, here it is we're in the git repo right now. So, what I'm going to do is I'm going to go ahead and go to the root of this repo get the get URL and we're going to go ahead and clone it down. Open the terminal and I'm going to move into my code directory that's where I like to work out of and run “get clone” add in that and I'm just going to call it group at. Awesome. Let that run, yep it cloned it down. Cool, so now I'm going to move into the group chat directory and next it's going to stay up just run yarn. We're going to run yarn install all the dependencies that we need. &nbsp;</p><p> &nbsp;</p><p>So, the next thing that we're going to do is we're going to actually add a dot ENV dot local file to our project. This is going to allow us to specify any environment variables that we need for our group chat component to actually work; namely the endpoints and then the 8based workspace ID that we’ll be connecting to. So, there's this little command that we can just run in our command line here. Essentially, we're just echoing this into a new file called dot ENV dot local. Awesome! So, now if I open up my files right here [I'm going to make this full screen] I can go ahead and [oh we actually have to open the folder here]. So, I'm going to go ahead open the folder, code, group, chat, done and here our ENV dot local. And so, it's asking for our 8base workspace ID, however we're going to go get that in just a minute. &nbsp;</p><p> &nbsp;</p><p>Back here now what we can do is we can go down and now look okay, so now it's going to tell us to import the schema. So, we could easily go ahead and build out our data model and 8base it's a very simple data model as you're going to see. However, this is a great way to just get introduced to the 8base command line tool and it will just scaffold the data model that we're going to need for this project. &nbsp;</p><p> &nbsp;</p><p>So, I'm going to go ahead and just reinstall the command line. So, 8based global, add 8base CLI that will just take a second. And then while that's downloading, we're going to then have to actually authenticate our command line. So, that's going to add an 8base RC file to the root of your computer that will store some authentication credentials. So, 8base login and to do this is actually going to launch the browser and then it's going to four log ins to 8base, it is authenticated. And we are good. Well just going to close that now. All right so now with that authenticated now what we're going to do is, actually import our schema. So, we can see that the 8base command line gives us this import statement and then we can pass it a file path as well as the workspace ID. However, first what we're going to actually want to do is go get that workspace ID so I'm going to go ahead and do that. I'm going to open a new tab app.8base.com. Once here, I'm going to log in be back in one second okay cool. &nbsp;</p><p> &nbsp;</p><p>So, I was able to log in eighth base and essentially, I just have a basic workspace for this demonstration here. You can use any workspace that you have even a current project and just add the table if you wanted to do it that way. But what I'm going to do is I'm going to go down into my settings I'm going to get my workspace ID- that's going to be important here. So, first off let's go back to VS code and what we're actually going to start by doing is by configuring the project. So, what that means is we're going to run 8base configure and pretty much tell 8base what works based this this repo is going to be dealing with. So, first off let's go down to group chat that was the name of my workspace we're done there and next we're going to use that import command that we saw in tutorial. So, let's go to 8base import - F. We're going to give it the file path which is chat schema, it's right there. Then we're going to say that the workspace ID is the one we just copied. From that cool- so this should be going alright, it's importing the schema. This is essentially just going up in a scaffolding the data model that we need for the chat room. &nbsp;</p><p> &nbsp;</p><p>The second thing we're going to do here too is we're going to just in this dot ENV dot local file, we are going to add our workspace ID or set that variable well paste that in there. Awesome! &nbsp;</p><p> &nbsp;</p><p>Now if you just want to look at these environment variables really quickly, we can see that we have two API endpoints; one for just our Graph QL requests and the other for our WebSocket requests. So, to the API endpoint we're going to be making our queries and Mutations. To the WS endpoint we're going to be making our subscriptions or WebSocket unit. And then the workspace ID we're going to use in both those different API modules that we're going to create to specify essentially which workspace at those endpoints we are going to be dealing with. &nbsp;</p><p> &nbsp;</p><p>So, let's jump back over to our tutorial. Okay so we imported the schema now we want to go set the API permissions. So, essentially, we're going to make this a public chat room, but we're not going to handle authentication. And what we're going to want to do is essentially tell the workspace what permissions we want a guest do you have. The guest role is a special role in 8base. It means public permissions, so you don't have to pass any off headers, you don't have to identify who you are, anyone that wants to hit the API can then perform these actions. So, let's go back to our workspace, let's go to our app services roles click on “guest”. And here we look back here we can see that okay, what we're going to want to do is make sure that the users we can do all the user's operations and then the messages operation pool. So, if I go back in here, I'm going to say users I'm going to say, “All records” and cool. Then we can see that we have the messages table here let's go back and look at reload this page is it should have imported our… cool. So, we have our messages. This table was imported with the import that we ran. But now if we go back to our roles on guest, we can see… cool, now we can do it with messages. We want to be able to create messages and we want to be able to be all messages. I think that's going to settle it if not we can come back later and update it as needed. &nbsp;</p><p> &nbsp;</p><p>Right now, then we are now moving on to actually writing our queries. So, these are going to be all the queries we need to run a chatroom. We're going to read through them really quickly and then copy them into our project as it's apps where they're going to need to work. So, for the first one we're going to see that okay well we have a few different Graph QL queries writing here. The first one is an initial chart data. Essentially when we load this chatroom we're going to say give us all the users and then give us the last ten messages, so we can populate it with some activity. Then we want to be able to create a user which makes sense because whenever a user is created- we want to be able to create a user whenever they join the chatroom. We want to delete a user whenever they leave the chatroom; once again it's like public chat room so we just want to get rid of people after they leave. Then we want a user subscription. So, you look at the subscription you can see that we say hey we want a subscription on the users table whenever there's a Mutation that's create or delete. And when that happens, we want the Mutation name back as well as the node [which would be the user in this case] with their ID and email. So. this is going to allow us to do those real-time listens to those real-time events. And pretty much the same thing runs for messages we want to be able to create messages. Connect them to the author that's the person that's the chatroom participant, as well as listen to messages being created on the create event and get back some of the data from that message that we created. &nbsp;</p><p> &nbsp;</p><p>So, let's copy this over to our project. We can see that it's telling us to put it in the utils Graph QL.JS file. Utils Graph QL.JS we're going to pop that right in there and keep cruising. &nbsp;</p><p> &nbsp;</p><p>So, next up we're actually be creating our API clients that's both the Apollo client and then a description client for our WebSocket or our subscriptions. So, we can see I'm actually going to copy this over to our code editor so we can enjoy the syntax highlighting. We can see that this one's supposed to go in source utils api.JS; so api.JS right here- awesome. Drop that in. Essentially, we can see that we're importing Apollo client from Apollo blue boost HTTP, HTTP link in memory cache. We're getting our environment variables from our environment file. And then we are initializing the Apollo client with pretty much the basic options that you can give it. And what we're going to do is we're in as well or interpolating the endpoint with the workspace ID, So, it's going to be a API.8base.com/your workspace ID- that is the endpoint you'll have to use to run the basic Graph QL queries against the API queries in Mutations. So, with that done we initialize that we export it and we can use it in our view component. &nbsp;</p><p> &nbsp;</p><p>Now if we go back, we can see that the next one is the subscription client. Once again, I'm going to copy this over and then we can talk about it because once again this one is a little bit more involved than the last one. So, let me copy that cool and this one's supposed to go in utils.WSS- boom right there. Alright copy this over. And so essentially what we're doing is we're going to be importing the implementation of WebSocket that we want to use in our subscription client as well as the subscription client itself which we're going to use from subscriptions transport WS. Make sure it's an Apollo managed package and then we're going to be importing once again the endpoint and the workspace ID. &nbsp;</p><p> &nbsp;</p><p>Now when we go ahead and we initialize our subscription client. We're going to be given at the endpoint we're going to specify the reconnect true parameter; so, if it disconnects for some reason it'll automatically reconnect. And then pass in the connection program workspace ID and set that to our workspace ID. Now this is different, then we did it with the API client in which we are part of the URL path. Here were actually putting it as a connection pam which kind of comes out as a header- think of it that way. And then lastly, we're going to be specifying in the subscription client what implementation of WebSocket we want to use which is the isomorphic WS that we imported; so, adding that right there. &nbsp;</p><p> &nbsp;</p><p>Once that clash is initialized while we're going to do is, we're going to export an object with two methods on it bribe and close. This subscribed method is the one that we're going to be passing our query or subscription queries to with the options that we want to use; those options being, “Hey, what's the data callback that we use when the subscription client receives an event or the error when there's an error callback and of course any variables that we're actually passing to our subscription.” And so, we create that, we get the result back and then whenever there are these events which is next or error on the subscription client, we are passing the result to those callbacks that we defined ourselves- so, pretty straightforward. And in the close method the subscription client has a close method on it we're essentially aliasing, so we can use easily. Once that whole thing is configured, we just export it and once again we can use it now in our component- pretty straightforward. &nbsp;</p><p> &nbsp;</p><p>So, now what we're going to do is actually go in and write out our view component. And what's pretty cool is this whole chatroom is just going to be one view component and it's going to be pretty straightforward. But you can use this in any project you want; you can even use it in an on-view project if you just wanted to add view as part of project as view is that that lightweight. But let's hop back and first off, we're going to need our imports- so pretty straightforward. Bring these over, I'm going to add them to the OP of our script file and what we can see here is we're importing the API and the WSS modules that we just looked at initializing. We're importing all the different Graph QL queries, subscriptions, patients that we had written in the Graph QL.JS file and then we're importing some styles. &nbsp;</p><p> &nbsp;</p><p>Now I promise you these Styles are not pretty to look at. You can develop any type of client application or any looking field that you want and I encourage you to do that. I wanted this to be as bare-bones possible so that you can and should look at the concepts, but we'd not get distracted with any type of SS writing or whatnot; so, drop those in there. &nbsp;</p><p> &nbsp;</p><p>Now if we go down, we can now see that the next thing we want to add is our component data, so I'm going to bring this over and we'll talk through each one that we are adding in. So, first off is in this data function we're returning an object which is going to have messages array on it, so that's we're going to store all our message objects. We're going to have a new message which is where we're going to potentially put the string this the draft being a message before they sent it. Then we have this object called, “Me” which by default has an empty email that's going to represent the user that is participating in the chatroom and then users which is going to be everyone in the chatroom- we're going to keep track of that and manage that array. &nbsp;</p><p> &nbsp;</p><p>So, let's just save that and then we're going to go back and now what we're going to be adding is our lifecycle hooks. So, depending on what framework were you use and just to reiterate that you can do this with any framework that you'd want to use. The components might have different life cycles or you might trigger it at different ways and with view we're using the lifecycle hooks create and before destroy which run when a component is first created and then when it right before it's destroyed. Essentially what we're going to want to do in these lifecycle hooks is initialize the chatroom with the data we need, initialize the subscriptions that we want to listen to for when users are created, deleted or messages are created. So, we can just see that right here pretty clearly, so when it's created this created function is going to run, we're going to use that WSS model and subscribe through the user subscription which we wrote back here I'm at look at. So, a subscription on the user's table, let's only get something when there was a Mutation on create or delete and let's get the Mutation back and the node with the information. So, that is pretty straightforward we're going to pass that subscription and then the data callback is going to be handle user function which we've yet to write, but we're going to look at that in just a second. Same thing with messages, WSS, subscribe to the message's subscription, give it the callback data, add message. &nbsp;</p><p> &nbsp;</p><p>Then we're going to run an API query with and get the initial chart data and from the response that we get, we're going to get the data back and then assign the users list items to the users in our component data and then the messages list items to our messages on our component data. And then one thing I added here too was that, before if you were to reload the page this call back would be triggered that's just going to run this close chat method which we're going to look at in a second to essentially delete the user that was in the chat and cancel their subscriptions. And then that same thing is going to run them before, destroy, cool. &nbsp;</p><p> &nbsp;</p><p>So, now what we're going to do is we're going to go past that and now the component methods. So, there's a few more of these but we're going to breeze through them really quickly because they're pretty self-explanatory and you'll be able to jump in and play with them yourself if you'd like to. I'm just going to copy over the user or the methods object here with all the methods on it. So, let's just drop that in there, cool that there. I don't know where that comma came from and awesome let's just run through this now. &nbsp;</p><p> &nbsp;</p><p>Okay, so now we have the methods and these are the methods that are available on our component we have a create users method what does it do, it hits the API, runs a Mutation with the create Mutation and gives it the email address as a variable pretty straightforward. We have a delete user method it hits the API with a Mutation delete user, passes it the ID- nice. We have a handle user callback. So, once again in the created lifecycle hook, we're using this handle user for the user's subscription. &nbsp;</p><p> </p><p>Now when that subscription returns data or that event is triggered it's going to tell us the Mutation that ran create or delete. We have this you know this little switch statement right here essentially that's well hit the correct all back from this object and then invoke it passing the note is data which is add user and remove user which is right here. So, if it's add-user, we get the user if the email address is the current participant email address, we set that user to the me record on the me data property on the component. And then we also just will always push it into the user's array. Remove user- we filter the user by its ID out and that can be any user whether it’s current participant or any other participant. Because remember one cool thing to notice here is that even in like the delete Mutation that we run or create Mutation that we run, we're actually not listening for any response because we're getting those responses through our subscriptions. So, we're just sending these off and expecting them to come through subscriptions which is just a really nice clean way of handling it. &nbsp;</p><p> </p><p>Then we have our create message method a straightforward, create message, give it the ID in the content and then when after this is run, we're actually listening to the response here. We're just going to clear the new message. Essentially that message was created, we emptied it, but add message, get the message back from the subscription, put it into the messages array and then close chat; which is we're going to close from the close method on our subscription client. Now that will actually close our subscriptions for both our users subscription as well as our messenger subscription- this is the same client just two different queries, as well as we're going to run the delete user method which we just looked at and set me back to the empty default- pretty straightforward. &nbsp;</p><p> &nbsp;</p><p>So, going back here now let's roll down and look at component template. Now you can build it once again a template, however you want to you can do it with any framework you want to. This is essentially like what are is the basic template that you need to make this messaging app functional. However, we will just go over really quickly. So, first off if me that's the current user has an ID that means they are created user, then we'll show the chat. If not, we're going to go down to the if-else statement we have a chat signup symbol form. Signup and there's an input where it uses the email address. So, it's bound to the email address, so as you type in, it's going to say that is your email address and when you blur the input it's going to go ahead and create the user using that email address that you put- that's it and so once that subscription returns that user if it was you then the email addresses are matching, it sets you and your ID, sends you those ID, drops into the chat component. It tells us how many users are online. We then have a closed chat button we can use. I want to close out the chat. For every message that we have we're going to render it out and we're going to add this me class essentially to where if the user ID or the participant ID is your ID, then I think this is actually author. I'm going to update that and hope for the best. &nbsp;</p><p> &nbsp;</p><p>Actually, what we can just do we can look back at our Graph QL script descriptions and we can see that we get a message author_ID_email- cool. I have that right. So, if the message author ID is equal to your ID, then we're going to be using me class and that's how we'll delineate, “Hey, should these messages or yours go on which side of the screen?” So, you can see where your messages are. And then very simply there's an input for a new message that once you write it you click create message and it's going to send that. &nbsp;</p><p> &nbsp;</p><p>So, pretty sure that's it. Let's boot this thing up and see what happens. So, Yarn serve, run that. This will probably just take a second to boot up and since what we're going to do is first, we're going to see if it works and then we're going to open two windows and watch kind of a chat work back and forth with each other. So, let's go here, reload this okay what's my email address? It's <a href=\"mailto:John@Yo.Co\">John@Yo.Co</a>. Right, exit out the input and cool. So, it says, there's two users are online. We go into our 8based workspace. Then we go to our users table, we can see here that <a href=\"mailto:John@Yo.Co\">John@Yo.Co</a> signed up and then my default account is there. So, I'm going to write my first message which is going to be hello. And that hello, I'm on the right side of the screen there. Now there's no one else to talk to, so I'm going to open another browser tab, localhost 8080. Here I'm going to say I'm <a href=\"mailto:Steve@Me.Co\">Steve@Me.Co</a>. And Eve is now in the chat room. So, three users online and if I go back to this window three users online- all right, all this is working through and this one's on the right side of the screen. So, “Hello what's up John.” Cool and I go back here and got the message, right. So, here's our subscriptions. The chatroom is all alive. So, we can just say something random like, hello again and send that- awesome! And so here we go and then once again what's even cooler we can just keep adding this. So, if this was a chat room everyone could just keep piling on. Let's say Jess at Yo.Co and Jess is now in the chat room. “Hey, guys”- sure you guys are thrilled at this point of me talking to myself like three different personalities but as you can see this is all working pretty seamlessly. &nbsp;</p><p> &nbsp;</p><p>So, I hope this video gave you a good idea of how easy it is to get started using subscriptions and building real time event-driven components or applications. This is just the surface right- there's so many other things. You can do we could do different channels, we could do authenticated private messages images, all these different things and build a really rich messaging application. And if this video is well received, if you guys like it ask for it in the comments, vote it up- absolutely will that be the next thing that we dive into. Once again, if you found this video helpful please like it as well as subscribe to the channel. Thanks for watching and looking forward to seeing you in future videos. </p><p> </p><p>‍</p>",
		"post-summary": "Course 17 of the 8base Academy video series shows how to use subscriptions to build a chat app.",
		"slug": "building-a-public-chat-room-with-graphql-subscriptions-course-17",
		"thumbnail-image": {
			"fileId": "61cd9c61af1149f4fc0b11bc",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/5f0f2e35711d02f049bb2d99_5f0c962d525076552938ffbb_maxresdefault-p-500.jpeg",
			"alt": null
		},
		"author": "61cd9c61af1149d1980b10aa",
		"video-tags": ["61cd9c61af11495fbb0b0bec", "61cd9c61af11497b5f0b0bf3", "61cd9c61af11495ba20b0ba9", "61cd9c61af11499afa0b0ba4"],
		"updated-on": "2020-07-23T20:00:25.330Z",
		"updated-by": "Person_5a0f5e7fbd61b20001498154",
		"created-on": "2020-07-13T17:13:30.520Z",
		"created-by": "Collaborator_5e55457e71987f51d810ff2c",
		"published-on": "2021-12-30T11:48:39.600Z",
		"published-by": "Person_5a0f5e7fbd61b20001498154",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "61cd9c61af1149dae10b10ad"
	}, {
		"_archived": false,
		"_draft": false,
		"academy-video-link": {
			"url": "https://youtu.be/0m51ZsdIQbw",
			"metadata": {
				"width": 640,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F0m51ZsdIQbw%3Ffeature%3Doembed&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D0m51ZsdIQbw&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F0m51ZsdIQbw%2Fhqdefault.jpg&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"640\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "8base Academy - Working with Scheduled Task Custom Functions - Course 13",
				"provider_name": "YouTube",
				"type": "video",
				"thumbnail_url": "https://i.ytimg.com/vi/0m51ZsdIQbw/hqdefault.jpg",
				"author_name": "8base"
			}
		},
		"name": "Working with Scheduled Task Custom Functions",
		"transcript": "<p><em>* This is an automated transcript. Please excuse inaccuracies.</em></p><p>‍</p><p>Hey there, in this video, we're going to be talking about custom task functions and how they can be run like cron jobs on a schedule interval. We'll be using the command line tool to generate a new task function then write some custom code within it and deploy it to a workspace, where then we can see it executing by reviewing the functions production logs. Let's jump right into it. &nbsp;</p><p> &nbsp;</p><p>So, before we get started please note that we have some good documentation about task functions if you use docs. 8base.com. Here you can find out you know the different parameters and configurations that they expose, as well as how to just set them up in general. However, in this example what we're going to be doing is we're going to be looking at a workspace called Vue Todos, it's an application that I've used before in previous videos. However, the one thing that we will do for the sake of this video is add a complete by field to our to-do which is going to be a date. Let's just leave it as date. And let's give it a default value of let's say we have to complete all our new things by December 5th of 2019 and its mandatory. I'm going to create that field and we're good. &nbsp;</p><p> &nbsp;</p><p>So, let's now jump into the command line and get started. So, now in my command line and I also have my text editor open here, I'm going to just take a peek at the generator commands that we have for custom functions. So, if we do 8base G and we use generate or G, it's just an alias task and then let's look at the help that we have for this. So, we can see that, okay well on the generate task command we can pass schedule which would be the schedule on which the task runs; whether or not we want to include mock files; whether or not the syntax should be typescript or JavaScript; as well as whether or not we want to disable printing the information into the console. So, really the important one here is the schedule right. &nbsp;</p><p> &nbsp;</p><p>So, first we're just going to initialize the task function with a schedule of going once per day or let's actually do once per minute, so we can see it when we when we run it after deployment. So, let's do 8base G task and then let's give it the name. So, let's call this name “incomplete tasks report”. All right and then we're going to say, okay “has a scheduled… S-c-h- scheduled which goes at a rate of 1 minute”… cool. So, if I run that, we can see that okay so it updated our 8base.yml file which if I click over here, we can see that did that. We also created a handler file as well as the mock, so we could run it immediately all right so and you can see here how I did the syntax versus, okay well the schedule is running at is one wait per minute. These are just convenience functions essentially or syntax. So, if we want to say one per minute one per hour. one per day. it would be super straightforward. However, if you do want to use cron syntax you absolutely can and I would recommend the check out the documentation for a much more thorough overview of what that would look like. </p><p> &nbsp;</p><p>So, in that case let's jump into our source directory and look at our tasks which now we have our incomplete tasks report and the handler function for it. So, you can see that it also gave us the command that we could use to invoke that function locally. So, if we just pasted that into our command line, we can see that hey it's running and boom it received the data that we sent it which is the data that was specified within the mock file. So, if you wanted to have any different types of arguments coming to that function, you could specify here. But remind you this is only for your local development environment, so you won't have to deploy your function to production every time you want to invoke it. </p><p> &nbsp;</p><p>So, if we were to look at the handler file you see that, hey we have our context argument coming in, we have the event coming through and then inside of here we can run any type of JavaScript that we want- any script we write, right. So, since this is the incomplete tasks or what we will do is, write a query that will bring back all the tasks that are not done and after a certain date or after their completion date; so, let's jump in and do that right now. &nbsp;</p><p> &nbsp;</p><p>So, to save a little bit of time I went ahead and wrote the query out in my API Explorer and just tested that it worked and as well as created the argument that we are going to be passing to that query. So, just to walk you through it really quickly what we're going to be doing is passing a date, which is going to be today to our query which then query is a list of to-dos and filters them by where they completed or should they be completed by later than today and are they still pending. So, this will be our list of incomplete reduce. And then we'll get back how many that we have, as well as the description for each of those. And then to get the date for today, simply say, “create a new date”, “convert it to JSON” and then split it on T and give me back the first argument or the first item in the array. So, that will work to give us a date string that looks something along the lines of this… so 2019… let's say 09 for the month and then 25. Cool. &nbsp;</p><p><br></p><p>So, now what we're going to do is we're going to say, okay well taking our context argument that we get from the custom function let's get the API and run a Graph QL request; which then we're going to pass the query to is the first argument. And then our variables there's going to be today. And then one thing we're going to do is we're just going to say, “Check permissions false.” The reason we're doing this is, because we do not want to have to specify any type of API token or any type of role of this custom function is going to be inhibited by. We just want to say, all the to-dos that are out there bring them back and we're going to end up just printing to the console for the sake of example. &nbsp;</p><p> &nbsp;</p><p>So, what we're going to do is a wait for this to execute and then we're going to get or store the response right here, cool. And so, then what we want to do very simply is we're going to console.log out the minute report. Then right here just put the response. Perfect! There! And what we can then say is, report for the result on our custom function. We could say, “The report has run.” Cool. So, one second… let me think… that is what it's asking for. Yeah that's it, cool. &nbsp;</p><p> &nbsp;</p><p>So, what's next? Just to mention in this example to where our task is running on, an interval though response does not mean as much as maybe the console.log output would right. So, let's actually take this and deploy it so eight basic one second, I'm going to 8base config, make sure that I'm in the right workspace. So, I'm going to go to my new to-dos, that's the one. Cool. Alright. And then I'm going to run 8base deploy. So, let's give this just a quick minute to upload the new function the functions now deployed. And I've let it stay up there for I'm in there - so we can jump in and actually look at the production logs as they've been running. So, if I move over to my workspace and I go to my logic section I'm going to reload this page and cool our incomplete tasks report is not here and we can see that it runs every minute. &nbsp;</p><p> &nbsp;</p><p>So, let's move over to the function logs which is right here in this tab. And if we do that, cool, so we see that it's been running a number of times and the minute report is giving us our to-dos list. These are all the to-do's that are not done yet, but still have time to be completed. And we can just see that there's only one of them in there that fits the criteria our search criteria. We want to of course to tail these logs and have them start populating in real time right. &nbsp;</p><p> &nbsp;</p><p>So, this is a great example of how you could create any type of reoccurring task or automating any type of reoccurring task by deploying a custom function on a scheduled interval. However, if we look at the documentation, we also see that we could use tasks in a different way. So, for example, if we did not specify a schedule right that task would have been deployed, but we wouldn't really have a way of invoking it. The way that you would invoke it is potentially from other custom functions, whether that be a webhook, resolver or even some type of trigger. And what you can do is, you can use the context our and there's a method on it called, “Invoke function” which you give the function name to you then can specify the arguments that you want passed to your custom function as well as specify whether or not you want to wait for these response. If you say, wait for response false, that function or that task that just got invoked will run asynchronously and you can return an immediate response to whichever function or the script that you are currently working in; rather than having to wait for a task that might take a long time to actually complete. &nbsp;</p><p> &nbsp;</p><p>I hope this was a really valuable video for you, in understanding how to get up and running by writing custom tasks and deploying them to a workspace, as well as how to specify them or when you want them to run an interval or potentially use them from other functions by invoking them with the invoke function method. If you have any questions please leave some comments in the video and looking forward to seeing you in future videos. Take care. </p><p><br></p>",
		"post-summary": "Course 13 of the 8base Academy video series shows how to write and deploy scheduled task functions.",
		"thumbnail-image": {
			"fileId": "61cd9c61af114931b40b11b2",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/5ef2db2e7badac3cb9a31173_c-thumbnail__video--14ScheduledTasks.png",
			"alt": null
		},
		"slug": "working-with-scheduled-task-custom-functions",
		"video-tags": ["61cd9c61af114959330b0bf1", "61cd9c61af1149661d0b0bf2"],
		"updated-on": "2020-07-13T17:04:06.832Z",
		"updated-by": "Collaborator_5e55457e71987f51d810ff2c",
		"created-on": "2020-06-24T04:49:39.274Z",
		"created-by": "Person_5a0f5e7fbd61b20001498154",
		"published-on": "2021-12-30T11:48:39.600Z",
		"published-by": "Person_5a0f5e7fbd61b20001498154",
		"author": "61cd9c61af1149d1980b10aa",
		"order": 13,
		"time": "10:45",
		"published-date-initial-load": "2019-10-01T00:00:00.000Z",
		"video-link": "0m51ZsdIQbw",
		"canonical-2": "http://www.8base.com/8base-academy/working-with-scheduled-task-custom-functions",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "61cd9c61af114908510b1050"
	}, {
		"_archived": false,
		"_draft": false,
		"academy-video-link": {
			"url": "https://youtu.be/nyoPsOT2cg4",
			"metadata": {
				"width": 640,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FnyoPsOT2cg4%3Ffeature%3Doembed&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DnyoPsOT2cg4&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FnyoPsOT2cg4%2Fhqdefault.jpg&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"640\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "8base Academy - Salesforce Integration exposed through GraphQL API - Course 14",
				"provider_name": "YouTube",
				"type": "video",
				"thumbnail_url": "https://i.ytimg.com/vi/nyoPsOT2cg4/hqdefault.jpg",
				"description": "8base is a production-ready serverless backend-as-a-service that lets developers build amazing cloud applications using JavaScript and GraphQL. With 8base, d...",
				"author_name": "8base"
			}
		},
		"name": "Salesforce Integration exposed through GraphQL API",
		"transcript": "<p><em>* This is an automated transcript. Please excuse inaccuracies.</em></p><p>‍</p><p>Hi everyone, I'm really excited be sharing today the Salesforce integration with you which we've been working really hard on. And I'd say that let's jump right into it and look at how we can start building data-driven applications that utilize both Salesforce and 8base data. &nbsp;</p><p> &nbsp;</p><p>So, starting in my workspace home I'm going to navigate over to the data builder and then we can add external data sources as a table right. So, if we go to click “external data” source we have an option which is now the Salesforce integration and clicking that we can select “to create the integration”. If you wanted to rename it you could, but we'll just leave it with the default Salesforce. Now that that integration is added I'm going to have to go log in to my Salesforce account. To log in let's just click “connect”. It is going to ask you to authenticate to your Salesforce account. I have a Salesforce Developer account, though if you had access to Salesforce data through your Salesforce instance you could log into that account as well. So, let me just enter my Salesforce credentials and it'll bring me back to the 8base app. &nbsp;</p><p> &nbsp;</p><p>So, essentially what's happening right now, it is pulling in your data schema from the Salesforce take a look at all the tables you have on your Salesforce account. And by default, that's like over two hundred and fifty something tables and if you'd customized your Salesforce farther that will include your customized tables. However, once it's pulled those in as we can see that's done here with that success message let's click on “add tables”. &nbsp;</p><p> &nbsp;</p><p>So, now back in our data builder we see that there's this new section over on the right left-hand side which is Salesforce and from it we have four tables which is, account, contact, lead and opportunity. If we were to click, “select tables”, we go through all the different tables that we have stored in Salesforce right and then select one of those to import it. For example, order, product, feed. I select it, it's going to add the table two to my 8base workspace. &nbsp;</p><p> &nbsp;</p><p>So, we can see here all the data that's stored or all the field types that are stored on the table, as well as the data types that they're stored as. And if we wanted to, we could even add custom fields to these tables which is pretty cool. However, what I want to show is that for example in this application let's say that we have brokers and brokers have leads. We could say a broker has many leads, so let's allow multiple leads for her broker cool and then create that relationship right. So, what's really neat about that is, now we have two different tables, one table in 8base that's really to another table in Salesforce right and we can query that already through our graph QL API. &nbsp;</p><p> &nbsp;</p><p>So, just for fun what I'm going to do is I'm going to go to my brokers and I'm going to edit this first record. And I'm going to say, “Hey, it has a few different leads. The Salesforce account added some dummy data or seed data to my developer account, so I already have some records in there.” So, I will submit those changes. Then I'm just going to show the ID, so I can look up this broker awesome and now let's jump over to the API Explorer. &nbsp;</p><p> &nbsp;</p><p>Okay so now what we're going to do is we're going to look up that broker, so let's do a query. And let's look up that broker by their ID okay. I got a string. What I got here? Oh, there we go. Awesome! So, now if we wanted to, we could see that, hey there's all these different fields on the broker. Let's just return the lead- it would be lead, so let's update the name of that relationship. So, if we go back to broker and we say, “Broker has many leads.” Cool that makes more sense. Awesome! Now we go back here so now we say that they have many leads cool. And on that we want to know how many leads they have and then for each lead they have we want this data which is the name and the title and the company once again, all of which is stored in Salesforce. So, let's run this query and that's exactly what we got back right. &nbsp;</p><p> &nbsp;</p><p>So, remember this query could be executed against your workspace in point now so no matter what client application you are building, you now have a unified access to both the data stored in 8base as well as the data stored in Salesforce. And of course, if we wanted to, we wouldn't have to go through that table that we had created in 8base which is the broker’s table. What I mean by that? So, for example let's write another query we were to say hey this query is going to be a lead list right and for every lead that there is. One second, let me fix that. So, there's a count of leads and then for every lead there is which is stored under items, we want- oh here in one second, you got the wrong leads table. &nbsp;</p><p> &nbsp;</p><p>So, let's go to Salesforce that's a namespace there. Then in Salesforce we had a lead list- cool. And if I fix that there. All right now when we look at the fields that are on the lead table, we can say, “Hey, we want the last name and the first name.” Alright do that and now we see all the leads that we have stored in our Salesforce account right. &nbsp;</p><p> &nbsp;</p><p>So, right now this integration is a read-only integration, so you are only able to query it however we are soon to release the ability to also push updates to the Salesforce data. So, this opens a really seemingly infinite range of possibilities for application that you could develop right. So, whether or not you're working with a client that has Salesforce or uses Salesforce in their business and you could develop custom applications for them or you have access to your own Salesforce data, and would like to use it or expose it in different ways. This is probably one of the easiest to use Salesforce APIs available on the market. &nbsp;</p><p> &nbsp;</p><p>So, thank you so much for watching. I hope this was interesting to you. If you have any questions, please feel free to leave comments in the video and we will be updating the documentation shortly. Thank you.</p><p><br></p>",
		"post-summary": "Course 14 of the 8base Academy video series demonstrates using the 8base <> Salesforce integration.",
		"thumbnail-image": {
			"fileId": "61cd9c61af11496cab0b11b1",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/5ef2da1fb098285c3cc39a02_c-thumbnail__video--13SalesforceIntegrations.png",
			"alt": null
		},
		"slug": "salesforce-integration-exposed-through-graphql-api",
		"author": "61cd9c61af1149d1980b10aa",
		"video-tags": ["61cd9c61af1149dbcd0b0bef", "61cd9c61af11493d570b0bf0"],
		"updated-on": "2020-07-13T17:04:29.914Z",
		"updated-by": "Collaborator_5e55457e71987f51d810ff2c",
		"created-on": "2020-06-24T04:45:05.679Z",
		"created-by": "Person_5a0f5e7fbd61b20001498154",
		"published-on": "2021-12-30T11:48:39.600Z",
		"published-by": "Person_5a0f5e7fbd61b20001498154",
		"order": 14,
		"time": "06:39",
		"published-date-initial-load": "2019-10-01T00:00:00.000Z",
		"video-link": "nyoPsOT2cg4",
		"canonical-2": "http://www.8base.com/8base-academy/salesforce-integration-exposed-through-graphql-api",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "61cd9c61af114950550b103a"
	}, {
		"_archived": false,
		"_draft": false,
		"academy-video-link": {
			"url": "https://youtu.be/lAkBItkJ_9Y",
			"metadata": {
				"width": 640,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FlAkBItkJ_9Y%3Ffeature%3Doembed&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DlAkBItkJ_9Y&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FlAkBItkJ_9Y%2Fhqdefault.jpg&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"640\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "8base Academy - Using GraphQL Mutations to Manage Model Relationships - Course 15",
				"provider_name": "YouTube",
				"type": "video",
				"thumbnail_url": "https://i.ytimg.com/vi/lAkBItkJ_9Y/hqdefault.jpg",
				"description": "8base is a production-ready serverless backend-as-a-service that lets developers build amazing cloud applications using JavaScript and GraphQL. With 8base, d...",
				"author_name": "8base"
			}
		},
		"name": "Using GraphQL Mutations to Manage Model Relationships",
		"transcript": "<p><br><em>* This is an automated transcript. Please excuse inaccuracies.</em></p><p>‍</p><p>Hey there, in this video we're going to be showing how you can establish relationships between records while creating or updating them by using Mutations. &nbsp;</p><p> &nbsp;</p><p>If we were to look at the Mutations documentation on Docs.8base<strong>.</strong>com, we can see this relationship section which talks about, four different types of operations that can be used within a Mutation. Those are, create, connect, reconnect and disconnect. So, we're going to jump into the API Explorer and just play around with these to give you a great understanding of how they work and how you can use them in your own applications. &nbsp;</p><p> &nbsp;</p><p>So, apologies if this is too stereotypical, but for the sake of these examples we're going to be using a to-dos application so we have boards which has many to-dos and to-dos which belong to a board and then have a description and a status. All right so knowing the domain let's now jump over the API Explorer. &nbsp;</p><p> &nbsp;</p><p>Now that we're here I'm just going to delete the default comments and we're going to start immediately by writing a Mutation where we're going to be creating a board. So, board- create. We need to pass it some data and then on that we need to give it a name and so the name is just going to be example, “board”. And then as we can see the relationship to-dos gave us an option. So, if we do to-dos and then we pass that in array or actually we have to give that an object and then on that object, we can either specify, connect or create. &nbsp;</p><p> &nbsp;</p><p>So, connect would be the ability to add existing to-dos to this board after the board's been created. And create is going to give us the ability to once the board's been created also create some to-dos. So, let's do it with the create for this example. So, create and then if we want to, we can then say, now it's going to write because we have to pass it many to-do objects. So, then pass that object and now we're looking at the different types of fields that can be defined on a to-do. So, for example the description for this to do will be buy milk and cookies. And the status will be opened. Actually, let's look really quickly at our to-do and see which options we have pending. Pending is in the default value, so we can just leave it out. So, let's leave that out and let's say, okay so if this works what we want back is we went back to the name of the board. And then for the to-dos that were created we want for every to do the description and the status of that to do. &nbsp;</p><p> &nbsp;</p><p>So, first off let's do that okay. So, we create our board, example board and we also create our to-do item on that board by milk and cookies. And so, what's cool about that is in one single query we created two different records and establish the relationship between those records. So, if we go back to our to-do and we look at our data we can see the hey this to do buy milk and cookies, it belongs to the example board right. &nbsp;</p><p> &nbsp;</p><p>So, let's jump back to the API Explorer. I'm just going to comment this out for a second and run a quick query for our boards. So, board lists and for every board, we want its ID and let's just bring back its name, so we know which board it is. So, the example board here's the ID, so we're just going to save that over here and that's what we're going to use for the other examples. &nbsp;</p><p> &nbsp;</p><p>Okay so now that we've created this board, what we're going to do is we can uncomment it and we can say, “Hey, now we're going to do an update.” So, we're going to update this board and we're going to pass it- I think the name has to be unique, so I think it will be good here right. What we can just do instead, we can just specify the ID just so we know that we're doing this on the right board. &nbsp;</p><p> &nbsp;</p><p>So, now on an update let's see what options that we're given when it comes to the to-dos. So, I'm just going to delete eat create and look back. And so now we have, connect, disconnect, reconnect, create right. So, as I said earlier connect would be if we specify the ID of an existing to-do, we can now update it to be related to this board right. If we wanted to disconnect a specific to do, that would be the ability to specify to do that currently belongs to the board and remove that relationship. And reconnect is an interesting one to where let's say that, we have three different to do is related to our example board. And what we wanted to do was relate three new to-dos to this board, while dropping all the other ones reconnect would reconnect all the established relationships. So, use it carefully, but it becomes really helpful when that's the use case that you're going after right. &nbsp;</p><p> &nbsp;</p><p>So, let's just do this. So, let's say we're going to connect and we're going to pass it an array. And what we're going to do now is, we're going to go back to our data, we're going to look at the to-dos that we have. So, this to do it belongs to my first board. So, I'm going to look for the ID, copy the ID, go back to the API Explorer. Now I'm going to pass it an object with the ID set to that. Alright and so now we're going to run this again and we want the status in the description- cool. So, if I run this… all right so now it updated our example board we can see that it still has the original buy milk and cookies to do that we had given it and now it also update it so that we have the buy milk which has already been completed to do associated. &nbsp;</p><p> &nbsp;</p><p>So, let's do another one now to where now we're going to say, “Okay well we want to run that disconnect.” Run disconnect- exact same type of syntax- update that- alright and it returned now it's updated to where it's back to where originally started. Now what's cool here is that let's say, we wanted to do reconnect right. So, this was the ID of the one that we just removed. It still has the original to-do item attached to it; which is the buy milk and cookies. And remember you could this is an array so you could also always pass multiple to do is with their ID to it and do these come in bulk. So, if I execute this query, cool. See the removal relationship, established the new relationship with the to do item that we specified. &nbsp;</p><p> &nbsp;</p><p>So, as you can imagine in this to-do application, this is pretty straight for my this is valuable. However, in any type of application to where things are being created and they're highly depending on the relationships these types of Mutations become very valuable, because what you're not having to do is pull in different IDs and send IDs with records to relate them to whichever other records they're associated with. In one really clean action you're able to update your data as needed. So, I hope this was a helpful video on helping you understand how you can use relationships or establish relationships between records when using Mutations. If you have any questions, please leave them in the video comments below and looking forward to seeing you in future videos. Thank you.</p><p><br></p>",
		"post-summary": "Course 15 of the 8base Academy video series discusses using Mutations to manage model relationships.",
		"slug": "using-graphql-mutations-to-manage-model-relationships",
		"thumbnail-image": {
			"fileId": "61cd9c61af114943da0b11bd",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/5f0f2e49906d322dc7f8c001_5ef2d81c6984500e1e4c0dad_c-thumbnail__video--12graphQLMutationsRelationships.png",
			"alt": null
		},
		"author": "61cd9c61af1149d1980b10aa",
		"video-tags": ["61cd9c61af11495fbb0b0bec", "61cd9c61af114983420b0bda"],
		"updated-on": "2020-07-15T16:26:51.845Z",
		"updated-by": "Person_5a0f5e7fbd61b20001498154",
		"created-on": "2020-06-24T04:36:53.348Z",
		"created-by": "Person_5a0f5e7fbd61b20001498154",
		"published-on": "2021-12-30T11:48:39.600Z",
		"published-by": "Person_5a0f5e7fbd61b20001498154",
		"order": 15,
		"time": "07:33",
		"canonical-2": "http://www.8base.com/8base-academy/using-graphql-mutations-to-manage-model-relationships",
		"published-date-initial-load": "2019-10-01T00:00:00.000Z",
		"video-link": "lAkBItkJ_9Y",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "61cd9c61af1149dff60b10ae"
	}, {
		"_archived": false,
		"_draft": false,
		"academy-video-link": {
			"url": "https://youtu.be/aZcqv2cjOVI",
			"metadata": {
				"width": 640,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FaZcqv2cjOVI%3Ffeature%3Doembed&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DaZcqv2cjOVI&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FaZcqv2cjOVI%2Fhqdefault.jpg&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"640\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "8base Academy - Running Javascript Debugger Locally in Serverless Functions - Course 16",
				"provider_name": "YouTube",
				"type": "video",
				"thumbnail_url": "https://i.ytimg.com/vi/aZcqv2cjOVI/hqdefault.jpg",
				"description": "8base is a production-ready serverless backend-as-a-service that lets developers build amazing cloud applications using JavaScript and GraphQL. With 8base, d...",
				"author_name": "8base"
			}
		},
		"name": "Running Javascript Debugger Locally in Serverless Functions",
		"transcript": "<p><em>* This is an automated transcript. Please excuse inaccuracies.</em></p><p>‍</p><p>Hey everyone, so in this video, I wanted to give you an example of how you can use JavaScript debugger from within your custom functions, alongside with Chrome developer tools and have a really effective way of debugging your custom functions locally. &nbsp; </p><p> &nbsp; </p><p>Let's jump right into an example. So, before we get going one thing I'd like to mention is that if you're trying to debug functions that are in production, the best way of doing that right now is using the console.log method and just consoling a lot of different arguments objects or whatever you need to the console to see what you are dealing with within the function. However, if you go to Docs.8base.com, you can put a little bit more information about debugging. This document might help you maybe with some more specific questions that you might have while watching this video. However, what we're really going to be going over is the local debugging method which you can start by copying this script to the NPM package of your 8base project that is local on your computer. And then we are going to jump right into it. &nbsp; </p><p> &nbsp; </p><p>So first off, I'm going to move over to my local project which is right here. And as you can see, I already have the debug script and my package JSON file. So, there's a couple things going on here. First off was that we are running node with the inspect command right or expand inspect flag- thank you- and passing it a path that we are building to the executable within the a base CLI package. So, NPM root - G is going to locate or return the path where your impact NPM package should get global we store it. And then we are building the rest of the path to the ABS CLI executable. And make sure that there's a space after that so that then once we run this command, we can still pass it the commands or the arguments that we're going to be giving to the 8base command line that we are invoking and be able to invoke our functions appropriately. &nbsp; </p><p> &nbsp; </p><p>For that to work though, we're going to first have to jump over to Chrome and if we go to Chrome://inspect, that will open up this menu where we can then select open dedicated dev tools for node. It's going to launch a window that then will actually capture our process or recognize our debugger, when we run the command with the inspect flag. &nbsp; </p><p> &nbsp; </p><p>So, having that open let's actually go back to our text editor and look at a really simple function that I put together called “Log Today” where when it's invoked it says the current time and it gets it from this time module which we're not going to look at yet right. So, if I wanted to, I could just copy this command and invoke this locally. And we can see that, oh okay result date time is function, default one something. All right, so it's like returning a function. &nbsp; </p><p> &nbsp; </p><p>Let's say that we don't really know what this time module is and we'd actually want to jump in and take a look at it, first off what we can do is we're going to add the debugger keyword at this point. So, we go to debugger and we save it and then now using the command that we created earlier the script we use created earlier we're going to say, “NPM run debug” which is that script that we add to our package.JSON file and then pass the rest of the command as we usually would which is, invoke local, log today and the pass to mock file. Let's execute that. We can see that it's listening debugger and it executed, but it didn't trigger. Why? Let's find out. &nbsp; </p><p> &nbsp; </p><p>I think the reason was is because we have to add a connection or specify connection. Localhost, 9229, let's try to add that one and let's try running that one more time. So, save our file and run- cool, so listening and we got at this time. Alright so as we can see it stopped in our code, however one thing that is kind of odd as if you look at this code it looks nothing like the code that we had written. And the reason is because when we invoke our functions locally, they actually get built and then we are debugging the built code which would be the code that would go into production. So, if I were to go to this hidden folder which is dot build and drill down into the tasks logged today and look at our handler you can see the code that gets generated there right. &nbsp; </p><p> &nbsp; </p><p>So, there's a couple things to note here that are important. First off is that in here we might see that the import the time module under the name “time”. However, in the console if we were to go in here and say, “Okay you know give me the time”, it would say that, “Hey, this is not here” that's because we're assigning different names for imports requires and sometimes arguments within the function. So, the good best practice on debugging would be that hey if you know that you want to look at what's going on with time, just assign it a Const value. So, let's call it “T = time”. Then as long as your debugger runs after the declared variable while debugging, we be able to use the T variable to reference the module that we wanted to look into. &nbsp; </p><p> &nbsp; </p><p>So, then if we go back here alright, we can actually do there we can see, hey “time JS.1”. Alright so we see look at here and we see that, oh it's actually a function that got it exported from that time module. If we go there and we say, “time default” and then we execute it we say, “Okay well this is the function we'd have to be executing to get the time back.” &nbsp; </p><p> &nbsp; </p><p>So, if we go back to our simple function and we update it to where we say, “Hey, time let's get your default function” or maybe we can actually even just do this. One second… no not that. All right, time, default, that way- cool. Let's remove our debugger and let's say detach the debugger- oh one second let's go back to Chrome, go back to sources, exit the debugger that way- cool. Now go back here. Awesome! And now let's just run it and invoke it. Oh, time JS- okay yeah so let's do this. Time and we fixed it. &nbsp; </p><p> &nbsp; </p><p>So, hopefully this gave you a good idea with a really simple example, of how you can use debugger from within your custom functions while using Chrome dev tools. If you have any questions please add them as comments to this video. Definitely feel free to check out the documentation to learn a little bit more about debugging. However, looking forward to seeing you in future videos.<br></p>",
		"post-summary": "Course 16 of the 8base Academy video series shows how to use debugger locally in your functions.",
		"slug": "running-javascript-debugger-locally-in-serverless-functions",
		"thumbnail-image": {
			"fileId": "61cd9c61af114978010b11af",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/5ef2d71f819014f69918365d_c-thumbnail__video--11DEBUGGING.png",
			"alt": null
		},
		"video-tags": ["61cd9c61af114909f50b0bee", "61cd9c61af114959330b0bf1"],
		"author": "61cd9c61af1149d1980b10aa",
		"updated-on": "2020-07-13T17:06:32.087Z",
		"updated-by": "Collaborator_5e55457e71987f51d810ff2c",
		"created-on": "2020-06-24T04:32:21.934Z",
		"created-by": "Person_5a0f5e7fbd61b20001498154",
		"published-on": "2021-12-30T11:48:39.600Z",
		"published-by": "Person_5a0f5e7fbd61b20001498154",
		"order": 16,
		"time": "07:14",
		"canonical-2": "http://www.8base.com/8base-academy/running-javascript-debugger-locally-in-serverless-functions",
		"published-date-initial-load": "2019-10-01T00:00:00.000Z",
		"video-link": "aZcqv2cjOVI",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "61cd9c61af114955500b1039"
	}, {
		"_archived": false,
		"_draft": false,
		"academy-video-link": {
			"url": "https://youtu.be/KGx-R7-HxCw",
			"metadata": {
				"width": 640,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FKGx-R7-HxCw%3Ffeature%3Doembed&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DKGx-R7-HxCw&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FKGx-R7-HxCw%2Fhqdefault.jpg&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"640\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "8base Academy - Generating Serverless Functions in the CLI - Course 12",
				"provider_name": "YouTube",
				"type": "video",
				"thumbnail_url": "https://i.ytimg.com/vi/KGx-R7-HxCw/hqdefault.jpg",
				"author_name": "8base"
			}
		},
		"name": "Generating Serverless Functions in the CLI",
		"transcript": "<p><em>* This is an automated transcript. Please excuse inaccuracies.</em></p><p>‍</p><p>Hey everyone, so in this video I'd like to go over generators, specifically how do we use generators and the CLI to scaffold serverless functions as well as projects. Let's jump right into it and start playing in our command-line interface. So, here in the CLI I've already configured it to communicate with the appropriate workspace where I deploy these functions. However, just as a quick reminder you can do that by running 8base config which is then is going to go retrieve all the workspaces that you have available and you can select which one you want to be configured alright. &nbsp;</p><p> &nbsp;</p><p>So, the first thing that we're going to want to do is look at scaffolding a new project, but only provisioning it with certain functions. So, for example if I were to run 8 base it and then give it a name like “Jen demo”. If I ran this it would actually give me 4 functions by default of each type; so, it would give me a resolver, a trigger, a web hook and a task. However, if I wanted to, I could do two cool things first thing I'd like to say - F and then give it a list of different types of functions. So, for example, let's say I wanted a resolver called, “Hello World”. Not that Hello World is not used enough, however we're going to use it for now. And I also wanted another function which was going to be a let's say a web hook called “Machine Callback”. I could just do F, give it that definition and then the one thing I'm also going to specify here is by default all these functions are going to be generated in typescript. But if I want to change my syntax to be JavaScript, I could just do it like that, run the command and cool. As we can see it generated a new project for me with the two types of functions that I wanted, as well as it did them in JavaScript instead of typescript. &nbsp;</p><p> &nbsp;</p><p>So, let's open this project now and take a little peek at what was generated for us. So first off, I'm going to move into the directory called, “Gen Demo”, then I'm going to open it in Sublime. So, if I do that I go in here we can see that it created directories for me called resolvers and webhooks, depending on the function type which in we have a Hello World directory which has the handler as well as the schema, since the resolver and then some mock file in a mocks directory. So, first off if we go to our handler, we can see that's just a simple asynchronous function that we generated which returns what the resolver received from the data on the data argument. And if we were to look at our schema, we can see that it created the Hello World schema with for both the result type or response type as well as the function definition which is a query. And then in the request, it gave us the structure that it expects in production for the arguments are the functions argument right. So, this would be the data that gets sent to the request. &nbsp;</p><p> &nbsp;</p><p>What's cool about this is, that right now if we were to take this command from the document or from the encode documentation we could actually run and execute this function. So, I run that, it's invoking it and it just invoked it locally. So, all of this is set up ready for you start developing with and this is the same for the web hook which has a handler, web hooks, are since they're real HTTP calls, they have to have a certain type of response object which can read more about in the documentation- and all the definitions for these functions were created in our 8base.EML file. &nbsp;</p><p> &nbsp;</p><p>So, this generator was used when the project was created. However, for a project that's already been created how do we use generators to add functions to that project? To start, let's go back to our command line and start writing out the generator command. So, let's clear a screen and I'm just going to bring this down to the middle of the screen and so let's run okay. So, 8base generate and function- not function excuse me. First, let's look at the types of generators that we have. So, if we run help, we can see that we have okay we can generate a mock, a resolver, task trigger, webhook, these are the ones that we're going to pay attention to right now. So, let's see what happens if we wanted to say okay well let's generate a web hook and pass in help again, so cool. On the web hook we can specify a few things like the different options and needs, what's going to be the path, what's going to be the method as well as do we want to include mocks or not and as well as what's syntax, we want it in. &nbsp;</p><p> &nbsp;</p><p>Let's do this example once again with a resolver. So, if we wanted to say, “Hey, 8base generated a new resolver and we want it to be in Type Script. So, we're going to say the syntax is TS and the resolver’s name is going to be “get all users by ID”, let's say. So, we run that and cool, it updated our 8base EML file and it generated the graph QL file the Mach file as well as the handler. So, if we go back to when we reload here we can see that, hey this updated our get all users by ID and inside here, we can see that now we have a Type Script generated resolver function right with a typed response, we also have our schema graph QL file which we could now change or edit as well as the mock file which allows us to executed immediately locally. So, if we were to copy this and paste into our terminal, it invokes that function that we just generated. &nbsp;</p><p>And what's cool about this too is, like let's say we wanted to run 8base deploy right. So, this will just take a minute. But essentially what it's doing or it's compiling our type from script functions, as well as JavaScript functions and deploying them to our workspace. Just as they were generated, they are production ready; meaning that they can run and execute. Naturally you probably want to change your functions to actually be domain-specific. However, we like to think that immediately is when you generate a function it's ready to be used. So, let's look at what happens once we run deploy. &nbsp;</p><p> &nbsp;</p><p>So, after about our new project deployed to the workspace that. We had set up we now know that our functions were deployed because we could actually invoke them from the command line. So, if we ran our same function to get all users by ID that we just created and as well as passed the same mark that we have locally, but called invoke instead of invoke local- we can run that command and see that it invoked and returned the exact same response that we would have expected, based on the mock that we're giving it. And if we go over to our workspace and reload it, we can now see that if we go to the “logic view” which is right here we've deployed three custom functions; two resolvers and one webhook. &nbsp;</p><p> &nbsp;</p><p>Here we can see a little bit of information about the function that's been deployed based on its type for example this is the endpoint to invoke the web hook machine callback that we created. However, if we do go to the logs, we can also see the last time that we invoked this function as well as how much memory consumed, how long it took and all that other information. &nbsp;</p><p> &nbsp;</p><p>So, I hope this was a helpful way to get an understanding of how to use generators from the command line to really quickly generate, deploy as well as a having opportunity to jump in and change custom functions and get them working in your 8base workspace. I'm going to include some links to the documentation in the description of this video, so you have some more resources to jump deeper into. However, if you have any questions, please leave them in the comments section of this video and I hope you have a great rest of your day. Thank you. </p><p><br></p>",
		"post-summary": "Course 12 of the 8base Academy video series shows how to generate serverless functions with the CLI.",
		"slug": "generating-serverless-functions-in-the-cli",
		"thumbnail-image": {
			"fileId": "61cd9c61af1149f5d60b11ae",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/5ef2d69db098289626c3968b_c-thumbnail__video--10serverlessfunctions.png",
			"alt": null
		},
		"author": "61cd9c61af1149d1980b10aa",
		"video-tags": ["61cd9c61af114930440b0ba8", "61cd9c61af114959330b0bf1"],
		"updated-on": "2020-07-13T17:03:32.736Z",
		"updated-by": "Collaborator_5e55457e71987f51d810ff2c",
		"created-on": "2020-06-24T04:30:24.599Z",
		"created-by": "Person_5a0f5e7fbd61b20001498154",
		"published-on": "2021-12-30T11:48:39.600Z",
		"published-by": "Person_5a0f5e7fbd61b20001498154",
		"order": 12,
		"time": "08:14",
		"canonical-2": "http://www.8base.com/8base-academy/generating-serverless-functions-in-the-cli",
		"published-date-initial-load": "2019-10-01T00:00:00.000Z",
		"video-link": "KGx-R7-HxCw",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "61cd9c61af1149626a0b1038"
	}, {
		"_archived": false,
		"_draft": false,
		"academy-video-link": {
			"url": "https://youtu.be/gLM-Fc6gWlE",
			"metadata": {
				"width": 640,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FgLM-Fc6gWlE%3Ffeature%3Doembed&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DgLM-Fc6gWlE&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FgLM-Fc6gWlE%2Fhqdefault.jpg&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"640\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "8base Academy - Connecting to a Workspace GraphQL API - Course 11",
				"provider_name": "YouTube",
				"type": "video",
				"thumbnail_url": "https://i.ytimg.com/vi/gLM-Fc6gWlE/hqdefault.jpg",
				"description": "8base is a production-ready serverless backend-as-a-service that lets developers build amazing cloud applications using JavaScript and GraphQL. With 8base, d...",
				"author_name": "8base"
			}
		},
		"name": "Connecting to a Workspace GraphQL API",
		"transcript": "<p><em>* This is an automated transcript. Please excuse inaccuracies.</em></p><p>‍</p><p>Hi everyone, so in this video we're going to be going over connecting to your workspace API. And to get that off one thing I would like to do is remind everyone, that Graph QL is no different than an HTTP POST request. After we get past a little demonstration which is connecting to our workspace through a curl command, then we'll jump in to actually writing JavaScript scripts that communicate with our API. &nbsp;</p><p> &nbsp;</p><p>Let's jump right to it. &nbsp;</p><p> &nbsp;</p><p>So, first off here's is the quick demonstration so right here in a text editor I wrote out a curl command which sends a post request to a workspace endpoint that I've defined. And in here we're just saying that the application or the content type is application JSON. We are actually creating an authorization header it which is passed in an environment variable to authenticate our request and then we're adding this query or this string as the data for our post request. And if you look at this you can see it has a query key and then a graphic QL query that we've written out which was getting all the to-do items and their descriptions. So, if we take this and post it into our terminal and run it, we can see that sure enough, we just created execute a Graph QL using a curl command. So, keep this in mind whenever you're looking at different ways of executing or running Graph QL queries. At the end of the day all that's happening in the background is a post request is getting sent to a Graph QL API. &nbsp;</p><p> &nbsp;</p><p>Now let's jump into actually writing scripts or using JavaScript to run, queries, mutations and anything else that we might need to do with our Graph QL API. To get going what I'm going to do is close out of this, don't save it… excellent! Clear my screen and then move into my code directory. We're going to create a new folder right now which is going to be called “Graph QL connections demo”. Okay so let's move into that demo and inside here we're going to in it a new NPM package. And so, let's use NPM on it and this is because we're going to have to require a few different dependencies or we're going to want to require a few different dependencies for helping us run those queries. So, NPM.net and we can just accept all the default for the package.json file. And once that is created, cool, let's just create a new file called index JS. This is where we're going to write our JavaScript. And all we're going to do right now is install one package which is, NPM install, Graph QL request - Jasmine and we're just going to save it to our package JSON file. Cool! That went really fast and now what we can do is we can run some ole or just open this directory up in your preferred text editor; I'm using sublime. &nbsp;</p><p> &nbsp;</p><p>So, now here in our script we're going to start writing out or we're going to start by requiring the module within the Graph QL request package that we required. So, we don't have Babel or anything like that setup, so what we're just going to do is use good old-fashioned JavaScript require to get that get that module into our script. So, let's say, Const and we'll just call it “GQL”- oh actually one second, I have to open the index KS file… cool. So, if we said, “Const GQL client” that's just the name that we're giving it and we're going to set that to require the Graph QL, request library and from that get back a Graph QL client module- cool. So, this module right here is going to help us run our request by setting up a client with which we can communicate to our API, and to do that what we need to do then is we need to make sure that we have a few things. &nbsp;</p><p> &nbsp;</p><p>First, we're going to make sure we have our endpoint right and so the endpoint is something that every 8base workspace is assigned; it's assigned a unique endpoint that you can use to communicate with your API. And so, if we shoot over to our 8base workspace we can see that here on the data we have the endpoint here and we can just copy that; however, you can get it in many places in the workspace so whatever is best for you. So, cool, I'm just going to add that workspace URL right here and then what we're going to do is start by creating a new instance of Graph QL client. &nbsp;</p><p> &nbsp;</p><p>Actually, one thing that I forgot to mention before we create the Graph QL client, we're going to hop back to our workspace and actually generate an API token to authenticate our requests. If it was an open API, meaning that you gave public access to it, you wouldn't need to do this step. But most the time we are doing secure requests between the API, so we might as well go over it. So, if I go to settings and I go to API tokens I can add a new API token. I'm going to call this one, “delete immediately”. And then you can assign the role or the rights that the token has. So, I'm just going to say that this token has administrative privileges for any request that it's making. Cool. So, I'm going to copy that token and now if I go back into my script I can just say, “add this token here const token” and “add that”. &nbsp;</p><p> &nbsp;</p><p>So, now we're going to create a new instance of a new client that we can use. So, to create our client first what we're going to do is we're going to assign it where it's going to be a constant, so we'll just name this “client” and then we're going to create a new GQL client this is the name that we gave it. And the first argument we're going to give it is our endpoint this is where it's going to send our requests to. And then the second argument that we're going to give it is options one of those being headers, which we can give a default header of authorization and this will be our bearer token. So, then if we do bear and pass in our API token as the bearer token this will this wall authenticate our requests using the token that we generated. If this was let's say you're got an application there's a logged in user the ID token would be the token that you pass it and then everything would be scoped to that user right; so this is just the simple way that we use bearer tokens to authenticate requests between the application that is requesting information or send the information to the API, so that the API knows who is performing those requests. &nbsp;</p><p> &nbsp;</p><p>So, cool, let's now actually write out a query to use this client. The query that you write will obviously really this depends on the workspace that you set up as these things are dependent on the data model that your workspace has. However, since we have a workspace that we're handling a workspace right now that is for to do's, it has boards and to-dos related to boards, we're just going to use that domain for the sake of these examples. So, first off let's just create a query that lists out all the boards that we have. So, if we type out boards query and then we create our Graph QL query which is going to be a query and then we want a boards list and for each board- we actually first want know the count and then for each board that we get back, we want the ID and the name of that board. Cool! So, that query will work for us. &nbsp;</p><p> &nbsp;</p><p>Next what we can do is, then we're going to create an asynchronous function. So, let's just say call this “exec” and we're going to pass it a or it's going to equal an async function that has a block cool. And here what we're going to do is we're going to take our client and we're going to run request on the client, giving it our board's query. All right and so if we await that response and assign it to a variable called, “RESP”, we can then once it's done console.log the result. Cool, so let's open up our terminal and run this and see what we get back. Actually, quick thing before we do that- we have to make sure it actually runs, so just let's execute the function at the end of our file cool. Now this is good. &nbsp;</p><p> &nbsp;</p><p>So, I readjusted my screens a little bit so that my terminal and text-editor are side by side. And so, like I said now if we run node index.JS, so that we execute this file we can see that we give it a minute and cool it console logged out our response which is a boards list. We have two boards and both of those are objects that are being stringified as a seen for the terminal output alright. So, right now we were able to successfully run a request that's authenticated; however, as you can see that this is just a really static request right here meaning that no variables or anything are being passed to it. &nbsp;</p><p> &nbsp;</p><p>So, what if this was a mutation for creating the new board and we wanted to run board create which obviously needed to accept a data argument with the board's data which would be a name. And then in response, we only would want back the ID or it created the name. How do we get a variable name here? So, what we can do is we on our mutation we can define the arguments that accepts. So, for example, this accepts name of type string and it's required. And then right here we give it that variable, so that that gets injected. &nbsp;</p><p> &nbsp;</p><p>But wait still, how do we get the variable there? Well it's pretty simple. So, right here we're going to rename this to “board create mutation”. Let's copy that. Let's give that to our request that we have here and then let's say that this takes a variable called “name”. Alright and so then in here let's name our board, “my newest board”. So, that's the argument that we're passing to our function. So, then right here what we can do is that's the second argument, we get to pass it the name; since it's a variable. If you're not familiar the syntax, this is short for the same thing as if we did name, but it just creates the object as needed. &nbsp;</p><p> &nbsp;</p><p>So, cool, now what we have is we have our new mutation which is board created and it takes an argument type string called “name” and we're passing it that variable as the second argument to our request all right. So, let's save it and now let's run this, cool. And boom it created our board, gave it an ID and the name the board or returned the board's name by newest board. &nbsp;</p><p> &nbsp;</p><p>All right, I hope that this gives you a really good idea of how you can get started writing scripts that communicate with your API in JavaScript. In future videos we can do this in any language, Python, Ruby, even more curl command examples. However, remember that once again under the hood all Graph QL requests are, a post request that sends the query as the post requests data to your API which then interprets it and sends back the information that you are requesting. &nbsp;</p><p>If you have any questions, please feel free to leave them in the comments of this video as well as check out any links that I'm adding to the description of the video for further learning about connecting to your API. I hope you have a great rest of your day and thanks for watching. </p><p><br></p>",
		"post-summary": "Course 11 of the 8base Academy video series demonstrates how to connect to the 8base GraphQL API.",
		"slug": "connecting-to-a-workspace-graphql-api",
		"thumbnail-image": {
			"fileId": "61cd9c61af114973bb0b11be",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/5f0f2e59462b534078c822ff_5ef2d5dfe71e38dfb50c8b4e_c-thumbnail__video--9connectingworkspace.png",
			"alt": null
		},
		"author": "61cd9c61af1149d1980b10aa",
		"updated-on": "2020-07-15T16:27:08.018Z",
		"updated-by": "Person_5a0f5e7fbd61b20001498154",
		"created-on": "2020-06-24T04:26:47.007Z",
		"created-by": "Person_5a0f5e7fbd61b20001498154",
		"published-on": "2021-12-30T11:48:39.600Z",
		"published-by": "Person_5a0f5e7fbd61b20001498154",
		"video-tags": ["61cd9c61af11495ba20b0ba9", "61cd9c61af11495fbb0b0bec"],
		"order": 11,
		"time": "12:30",
		"canonical-2": "http://www.8base.com/8base-academy/connecting-to-a-workspace-graphql-api",
		"published-date-initial-load": "2019-10-01T00:00:00.000Z",
		"video-link": "gLM-Fc6gWlE",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "61cd9c61af1149f7770b10af"
	}, {
		"_archived": false,
		"_draft": false,
		"academy-video-link": {
			"url": "https://youtu.be/BTexF_yxrC0",
			"metadata": {
				"width": 640,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FBTexF_yxrC0%3Ffeature%3Doembed&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DBTexF_yxrC0&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FBTexF_yxrC0%2Fhqdefault.jpg&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"640\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "8base Academy - Adding and Configuring Authentication Profiles - Course 10",
				"provider_name": "YouTube",
				"type": "video",
				"thumbnail_url": "https://i.ytimg.com/vi/BTexF_yxrC0/hqdefault.jpg",
				"description": "8base is a production-ready serverless backend-as-a-service that lets developers build amazing cloud applications using JavaScript and GraphQL. With 8base, d...",
				"author_name": "8base"
			}
		},
		"name": "Adding and Configuring Authentication Profiles",
		"transcript": "<p><em>* This is an automated transcript. Please excuse inaccuracies.</em></p><p>‍</p><p>Hey there, so in this tutorial, we're going to be going to over authentication profiles. That is, how do you create authentication profiles in a workspace so that different client applications can allow users to authenticate whether that's using 8base authentication or a third-party authentication provider. Let's hop into it and see what we're dealing with. &nbsp;</p><p> &nbsp;</p><p>So, I've opened up the workspace and here in my settings I have an area called “authentication”; and this is essentially where I can create a new authentication profiles as well as configure any ones if I have them. By default, no authentication profiles are created for your workspace so we're going to have to go ahead and create our first; We just click, “Add”, we can name it Default Auth”. And then we have a choice of several different types. We have 8base authentication, you are auth0 account if you want to use auth0 you can connect your own account as your authentication provider or open ID. So, any auth provider that is compliant with the open ID specification, you can then use as the authenticated provider for your 8base workspace. </p><p> &nbsp;</p><p>Then we give you some options here right now if you're using ApS authentication, to where our users allowed to sign up themselves, our users are allowed to sign up if they have a specific email domain or is it open to all if you have a public or a free signup application, Right now we can just leave this auth and then select a role, This means, that when someone signs up or you sign up someone what is the automatic role or any default roles that will be associated with their account in that process. So, here we could just say that, “Okay well if our app is open to all and when someone signs up, we just want them to be a guest.” And if we add that profile, just takes a second… cool. And our first authentication profile was created. &nbsp;</p><p> &nbsp;</p><p>So, now looking at the authentication profile that we just created, we're going to look at a little bit of information that it gives us. First off is that it creates a client ID as well as a domain and we're going to use these in a front-end application or client-side application when creating our auth client. Then two, 8base gives you a really straightforward way of adding sign-on providers to this authentication profile- to where if you had a Google developer account or Facebook Developer account you could simply go there collect the client ID and secret for that provider and then enable the provider and then that would allow you to use sign-on or social sign-on within your application. And then we also have some settings for allowed callbacks, web origins and logout URLs. These are just different ways of securing authentication so it can only originate from a certain URL as well as only redirect back to a certain URL and once again we'll take a look at those in just a minute. &nbsp;</p><p> &nbsp;</p><p>One thing that's important just to mention too is if we were to use a different type of authentication profile for example, your auth0 account, it would just change the form that we need to fill out in order to configure that. So, for example, it would be asking for auth0 domain, the ID of the client, the secret, management domain; however, the configuration at the end would be very much the same as well as if we were to use open ID. There is some great documentation I'm going to link to in the description of this video for how to set up an open ID with a sample app, so you'll have that if you go follow that link. &nbsp;</p><p> &nbsp;</p><p>So, I'm sure at this point you're probably wondering, “Well if I've taken these steps how do I actually set up authentication within the application that I am building?” That really depends on the framework that you're using as well as the type of application that you're building, however we're going to look at really quickly is how you can configure the auth module that we give you in the 8base SDK to set up the foundation of your authentication system in whatever type of application that you're building. Let's take a look at that. &nbsp;</p><p> &nbsp;</p><p>So, here I've opened up a file that's a part of a VUE applications, I've been building, however essentially what's happening here is I'm configuring my auth client to then use within my application for the different types of auth means that I have. And as you can see it's a pretty simple process. And I've documented this file pretty well so that we can understand what's happening. First off is that from the 8base auth module or package we are importing auth and auth strategies, Auth strategies is simply an enumeration object that gives us and the different strategies that are offered; so that's web 8base; web auth0; as well as one more that I cannot remember off the top of my head. And then we also have auth, which we use to create a client passing in the strategy, as well as then an object that has our different configurations on it. So, for example, the domain is the same domain that we're given in our auth profile the client ID is the client ID that we're using or given in our auth profile. And then this logout URL as well as the redirect URL, are the same ones that we have the option of setting ourselves. &nbsp;</p><p> &nbsp;</p><p>Now after configuring this client and then exporting it, I can use it in my application to call different methods like the ones I've included down here. For example, auth logout if I was logged in would log me out. Auth authorize would actually bring me to the hosted login page and then redirect me back on a successful authentication as well as get authorized data would actually go to the authentication provider, and if authorized returned the current users information; that's things like the ID token; the email address; and the user ID based on me auth provider that they're using. &nbsp;</p><p> &nbsp;</p><p>I hope this gives you a little bit of a good idea on how to start setting up authentication within whatever application that you're building. However, if you do shoot over to the docs at 8base.com and you look at authentication, there's a lot of information here that will help you better understand how to set up authentication profiles and all the different settings and configuration options that are in there- as well as if you go down to SDK and click on “user auth”, more information is here as well with documentation specifically design for using authentication within a React app as well. I'm going to be updating this soon with view specific documentation so please sit tight for that. However, I do hope that this gave you a good understanding of how you can create an authentication profile, configure it to your applications needs and then start building the client-side module to handle authentication within the client application itself. If you have any questions please leave them as comments in the comment section of this video. I'll make sure to include all the relevant links in the description and I hope you have a fantastic rest of your day. Take care. </p><p><br></p>",
		"post-summary": "Course 10 of the 8base Academy video series show how to set up authentication profiles in 8base.",
		"slug": "adding-and-configuring-authentication-profiles",
		"thumbnail-image": {
			"fileId": "61cd9c61af1149cff90b11ac",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/5ef2d51c77174e928d296162_c-thumbnail__video--8AddingandConfiguring.png",
			"alt": null
		},
		"video-tags": ["61cd9c61af1149fb100b0bf4"],
		"author": "61cd9c61af1149d1980b10aa",
		"updated-on": "2020-07-13T17:02:08.992Z",
		"updated-by": "Collaborator_5e55457e71987f51d810ff2c",
		"created-on": "2020-06-24T04:23:52.766Z",
		"created-by": "Person_5a0f5e7fbd61b20001498154",
		"published-on": "2021-12-30T11:48:39.600Z",
		"published-by": "Person_5a0f5e7fbd61b20001498154",
		"order": 10,
		"time": "07:04",
		"canonical-2": "http://www.8base.com/8base-academy/adding-and-configuring-authentication-profiles",
		"published-date-initial-load": "2019-10-01T00:00:00.000Z",
		"video-link": "BTexF_yxrC0",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "61cd9c61af11493e090b1037"
	}, {
		"_archived": false,
		"_draft": false,
		"academy-video-link": {
			"url": "https://youtu.be/ijYH0Jn_J7U",
			"metadata": {
				"width": 640,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FijYH0Jn_J7U%3Ffeature%3Doembed&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DijYH0Jn_J7U&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FijYH0Jn_J7U%2Fhqdefault.jpg&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"640\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "8base Academy - Working with GraphQL Mutations in the API Explorer - Course 9",
				"provider_name": "YouTube",
				"type": "video",
				"thumbnail_url": "https://i.ytimg.com/vi/ijYH0Jn_J7U/hqdefault.jpg",
				"description": "8base is a production-ready serverless backend-as-a-service that lets developers build amazing cloud applications using JavaScript and GraphQL. With 8base, d...",
				"author_name": "8base"
			}
		},
		"name": "Working with GraphQL Mutations in the API Explorer",
		"transcript": "<p><em>* This is an automated transcript. Please excuse inaccuracies.</em></p><p>‍</p><p>Hey everyone, in this video we're going to be going over the basics of using GraphQL, Mutations and 8base specifically that's performing create update and delete actions on your table records, Let's jump right into it. &nbsp;</p><p> &nbsp;</p><p>So, before we start writing our own Mutations, I just wanted to share with you that at <a href=\"https://docs.8base.com\">docs.8base.com</a> you can go look at Mutations documentation, that will give you some more context around what we're going to be discussing in this video. However, let's jump over to our 8base workspace and in here I create a simple table called “leads” which only stores a name email and phone number. For the sake of the examples we're going to be going with this will work just fine. So, now let's jump to our API Explorer and start writing some Mutations. &nbsp;</p><p> &nbsp;</p><p>So, to get started, I'm first going to remove all these comments, open up the API Explorer a little bit more and write our first create Mutation, so we're going to create our first lead. So, writing a Mutation, giving it brackets and then since we created our lead table, we can see that 8base created a few Mutations for us. So, our operations so we can create a lead we can update a lead we can delete a lead and we can create many leaves at one time. For right now, we're just going to do one lead create pass it a data argument which is going to be an object and then here if we press option space, we can see the different fields that we have specified which are name, email and a phone number. So, first let's throw a name and let's just name this “just lead Jessica”. For an email we're going to say, “ jessica@job.com. Then finally for a phone number what we're going to do is since we use the smart field for phone number it takes an object which takes the country code there's one argument or parameter and we're going to say plus one and then the actual number for the next one; which we're just going to do it 1, 2, 3, 4, 5, 6, 7, 8, 9- 0. And then we'll specify that okay well if this gets created, all we want back is the ID name. Let's run this Mutation and boom, we can see that okay Jessica was created and that is now her ID. &nbsp;</p><p> &nbsp;</p><p>Jessica is now our first lead and now that we have our ID, we can use it to create an update or delete the record. Right now, let's create an update by changing her email address. So, to do that we're going to do a couple things. First thing we're going to change the operation to be lead update, we're then going to pass ID as one of the one of the keys. One second… cool, let's delete the other information that we're not trying to update and let's give our new email address- let's say it's, email addresses at new job. In the response we're just going to say that, “Okay if the update was successful all we want back is the update email address.” And now if we run this perfect the email address was updated. &nbsp;</p><p> &nbsp;</p><p>So, let's take this one step farther now and say that we actually want to delete Jessica's record. So, we're going to copy the ID one more time, let's delete the data and then we can see in here- one second… lead delete is the new operation and we're going to pass it, rid of this, get rid of it, data and ID. If Jessica had any related records that belonged to her in the work mandatory relationship, we could pass the force flag which would cascade the delete operation. However, now we're just going to specify okay on delete we just went back the success response to whether or not just go is successfully deleted. So, if we run this now and boom, the record was deleted. &nbsp;</p><p> &nbsp;</p><p>When it comes to defining relationships or connecting records or disassociating records, there's a lot of really cool things that you can do as well. We're going to cover a lot of those in another video, however what I do want to show you is that here in the documentation Explorer, if you were going to go to the Mutation category and look up our lead table- we can see all the different Mutation operations that you have available to you. So, for example, if we wanted to do a lead create many, we can see that okay type lead-many responds and it accepts the argument of data which is a lead-create-many input. Of we were to look at that we could see that it would be an array of the fields name, email and phone number. </p><p> &nbsp;</p><p>So, hopefully you found this video helpful and kind of giving you a jump start on using Mutations. Like I said we're going to go over more advanced Mutations in a subsequent video. However, if you have any questions please feel free to use the comment thread below as well as reach out if you would like any support and helping you get started in 8base. Speak soon. </p><p><br></p>",
		"post-summary": "Course 9 of the 8base Academy video series shows how to write 8base GraphQL mutations.",
		"slug": "working-with-graphql-mutations-in-the-api-explorer",
		"thumbnail-image": {
			"fileId": "61cd9c61af1149002f0b11ab",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/5ef2d462e9bc8063a47f9b0d_c-thumbnail__video--7graphQLMutations.png",
			"alt": null
		},
		"video-tags": ["61cd9c61af114910270b0ba6", "61cd9c61af114983420b0bda", "61cd9c61af11495fbb0b0bec"],
		"author": "61cd9c61af1149d1980b10aa",
		"updated-on": "2020-07-13T18:31:38.329Z",
		"updated-by": "Collaborator_5e55457e71987f51d810ff2c",
		"created-on": "2020-06-24T04:20:46.737Z",
		"created-by": "Person_5a0f5e7fbd61b20001498154",
		"published-on": "2021-12-30T11:48:39.600Z",
		"published-by": "Person_5a0f5e7fbd61b20001498154",
		"order": 9,
		"time": "05:05",
		"canonical-2": "http://www.8base.com/8base-academy/working-with-graphql-mutations-in-the-api-explorer",
		"published-date-initial-load": "2019-10-01T00:00:00.000Z",
		"video-link": "ijYH0Jn_J7U",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "61cd9c61af114924ef0b1036"
	}, {
		"_archived": false,
		"_draft": false,
		"academy-video-link": {
			"url": "https://youtu.be/W-0yUF8or8g",
			"metadata": {
				"width": 640,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FW-0yUF8or8g%3Ffeature%3Doembed&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DW-0yUF8or8g&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FW-0yUF8or8g%2Fhqdefault.jpg&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"640\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "8base Academy - Getting Started with the 8base Command-line (CLI) - Course 8",
				"provider_name": "YouTube",
				"type": "video",
				"thumbnail_url": "https://i.ytimg.com/vi/W-0yUF8or8g/hqdefault.jpg",
				"description": "Quick video to help everyone get going with the 8base CLI! In this video we'll: Install - authenticate - init - generate - invoke - deploy 8base is a product...",
				"author_name": "8base"
			}
		},
		"name": "Getting Started with the 8base Command-line (CLI)",
		"transcript": "<p><em>* This is an automated transcript. Please excuse inaccuracies.</em></p><p>‍</p><p>Hey everyone, so today in this video we're going to be going over the 8base command line tool and how you can use it to deploy custom server-side logic to a workspace. So, for the rest of this tutorial we're going to be here in the command line and what we're going to start by doing is actually just installing the 8base command line using NPM. So, if we run NPM, install 8base and then plaster in the global flag, so that installs it across our development environment, that will just take a minute to load. Okay. so now loaded. we can see that we got this print out of just some different information on what different commands we have available when using the CLI. &nbsp;</p><p> &nbsp;</p><p>We can always access these or relist these out by running 8base - H or - - help to where it'll print back out which commands are available for use as well as what those commands do. Right now, what we're going to do is, simply create a new 8base project initialize or generate a new server list function and then deploy that to a workspace which then we will trigger from the command line. &nbsp;</p><p> &nbsp;</p><p>The first thing we have to do is authenticate our command line tool which we can do by running 8base login. This is going to open up a browser window which is going to ask us to log in to our 8base account. So, let me just type in my name, email and password. Alright I got it wrong- oh I know what it is, I signed in with Google- cool, and now our command line is successfully authenticated. Now if we go back to it, it's asking us to select which workspace we'd like to be working within. So, I'm just going to go in and click or select the Brokerly app for the sake of this demo. If you want to select a different workspace while working in the command line you always run 8base config; which will allow you to once again go through your workspaces and select which workspace you're currently working within. &nbsp;</p><p> &nbsp;</p><p>Right now, though I'm going to create a new 8base project locally. You can think of a project as all the custom server-side functions that you want to deploy to the server list runtime. So, I'm just going to do 8base in it and well let's call this “Brokerly App”. If you guys went and create that project, we're going to change into that directory. All right and we can see in here it lists out a few packages for us which we're just going to run NPM install and to make sure that all the packages are installed locally. &nbsp;</p><p> &nbsp;</p><p>So, right now we're in a new 8base project in which will be deployed when we deploy to the Brokerly app workspace. What I'm going to do though is generate a custom function for our server-side application. So, I'm going to run a pace generate or G as the alias. Let's make this a resolver function, so for extending the GraphQL API and then let's just call this, “Hello World Resolver”. All right we can run that. So, it creates all the assets as well as some mock files that we will need to have this function run. &nbsp;</p><p> &nbsp;</p><p>So, one thing that's cool that 8base does is it creates the mock for you and so any function that you are using with a generator is ready to go not that that would add any valuable functionality to your project but it's all set up so you can completely understand how the functions work- as well as you can run them locally or invoke them locally, as well as invoke them in the production environment. So, let's just see what that looks like. If we run 8base, invoke local and then give it the name of the function which in this case is Hello World, then we pass it the mock file which we can find right here- let's invoke that or call that cool. And we just saw that we got a result back from our function, which is resolver reacted to bar; foo bar was the data that we passed this service function. &nbsp;</p><p> &nbsp;</p><p>So, what we're going to do now is actually deploy this to the production environment or 8base works place by running 8base deploy. 8base deploy- cool. So, this is going to take a minute but we'll be back once that function is uploaded. &nbsp;</p><p> &nbsp;</p><p>So, now having deployed our functions to our workspace we can trigger them or invoke them from the production environment. What that looks like is simply being able to use the 8base invoke command, giving it the function name, which is Hello World and then somewhere to specify in a mock, we can also use the option of passing at any type of JSON data that we'd like to. So, if we run this command, we can see that take a second and the resolver received our data which is a bar. &nbsp;</p><p> &nbsp;</p><p>So, I hope this gives you a really good idea of how quickly you can create a new project, generate some custom functions and then deploy them to your production workspace. If you would like more information on what types of functions are available, how you can do advanced scripting within them, that will be covered in other videos or you can check out the documentation to get going immediately at Docs.8base.com. Looking forward to seeing you in future videos and take care. </p><p><br></p>",
		"post-summary": "Course 8 of the 8base Academy video series introduces the 8base CLI and how to use it.",
		"thumbnail-image": {
			"fileId": "61cd9c61af1149210b0b11aa",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/5ef2d3fc698450e8734c0b3a_c-thumbnail__video--6gettingstartedcommandline.png",
			"alt": null
		},
		"slug": "getting-started-with-the-8base-command-line-cli",
		"video-tags": ["61cd9c61af114930440b0ba8"],
		"updated-on": "2020-07-13T17:01:06.904Z",
		"updated-by": "Collaborator_5e55457e71987f51d810ff2c",
		"created-on": "2020-06-24T04:18:58.648Z",
		"created-by": "Person_5a0f5e7fbd61b20001498154",
		"published-on": "2021-12-30T11:48:39.600Z",
		"published-by": "Person_5a0f5e7fbd61b20001498154",
		"author": "61cd9c61af1149d1980b10aa",
		"order": 8,
		"time": "05:31",
		"canonical-2": "http://www.8base.com/8base-academy/getting-started-with-the-8base-command-line-cli",
		"published-date-initial-load": "2019-10-01T00:00:00.000Z",
		"video-link": "W-0yUF8or8g",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "61cd9c61af11492fbc0b1035"
	}, {
		"_archived": false,
		"_draft": false,
		"academy-video-link": {
			"url": "https://youtu.be/qeL2zdxK5rk",
			"metadata": {
				"width": 640,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FqeL2zdxK5rk%3Ffeature%3Doembed&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DqeL2zdxK5rk&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FqeL2zdxK5rk%2Fhqdefault.jpg&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"640\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "8base Academy - Learn GraphQL using Rails 5 and VueJs - Course 7",
				"provider_name": "YouTube",
				"type": "video",
				"thumbnail_url": "https://i.ytimg.com/vi/qeL2zdxK5rk/hqdefault.jpg",
				"author_name": "8base"
			}
		},
		"name": "Learn GraphQL using Rails 5 and VueJs",
		"transcript": "<p><em>* This is an automated transcript. Please excuse inaccuracies.<br></em></p><p><br></p><p>Hey everyone, so today we have a very cool tutorial for you. In the past couple weeks, I've been speaking with a lot of developers and asking them, you know have they worked with Graph QL or are they familiar with Graph QL. I pretty much get the same answer every single time which is, “I have heard of it.” So, today what I thought would be really valuable is if we walk through an implementation of Graph QL on an existing REST API endpoint. Not only will it give you a complete understanding of what Graph QL is and why it's pretty incredible but it will also help you understand what 8base does and why we are a very useful tool when you're trying to build services that would you utilize a Graph QL API alright so let's jump into it and check it out okay. &nbsp;</p><p> &nbsp;</p><p>So, to get started, let's just set the stage by saying that I created a very simple rails application that currently exposes a single end point; and that end point is at restaurant/ID. So, when we get a request at restaurant and pass in an ID it goes to our restaurant controller and hits the show action which you can see that it finds the restaurant and by ID and then just renders that as JSON right. So, if I were to open my browser and I were to go to restaurant, an ID of one- cool. It gave me that restaurant as JSON and two- awesome! Alright so right now this is a rest endpoint right I give it the idea that I want and then it shoots back all the information is exposing about that given restaurant. &nbsp;</p><p> &nbsp;</p><p>So, let's go back to our application and look a little bit at what else we have here so if we look at our models, we can see that we have restaurant which has many dishes right. And I'm actually going to look at the schema to show a little bit more about what this has. So, we have a restaurant which has a name and a rating and then some other kind of metadata property. And then we also have dishes which has named a price description and every dish belongs to a restaurant. So, let's say that I was developing a component or an application that needed the restaurant which we know that we have access to, but then so wanted to see the restaurants dishes. Well, right now if I wanted to make that change, I could of course jump in and then here maybe make some type of custom object or use a serializer that then would render all that information out as JSON. But then that means that every single time that I get my response, it would be the exact same response right. &nbsp;</p><p> &nbsp;</p><p>So, quickly let's build a component that will actually consume this restful endpoint- okay cool. So, very simply I created a little view component here that when we give it the idea or query the ID, it then goes hits our endpoint and brings us back the restaurant with the ID that we gave it. All right and so you can see it just gives us the ID, the name, the rating, when it was created and the time it was at last updated. And so, if we look at that component here, we can see that it's just a single view component, very simple and all its doing is listing out every single property on the restaurants object that we get returned, right. So, if I was a front-end developer and I was here and now I decided, “Oh well what I really need to are all the dishes that also belong to the restaurant.” What I have to do is either jump into my server-side application myself update the API. Maybe create a new endpoint that is restaurant dishes. Maybe there's an API that we expose for dishes and you can pass the restaurant ID to only get back those dishes regardless though what I'm trying to explain here is that it will definitely take changes on the server side to get the information I need. Then one other thing that will happen is that right here all we're saying is, “Hey, give me ID 3”, right and it's we're listing out all the information that is given back. But what if we only needed the name and the rating right, that means that our system is sending us more information than we actually need and we have no way of having that happen otherwise. &nbsp;</p><p> &nbsp;</p><p>So, this is where we're going to now jump in and say well imagine if we could specify in our component here exactly the fields we want from our server. And then when we make that request it actually only returned the information that we're looking for right that's possible using Graph QL. So, now what we're going to do is jump back over to the Ruby on Rails application and mount a Graph QL endpoint and then update our component to consume it okay. So, the first thing we're going to do is add some important gems to our gem file right. So, first off what we're going to do is we're going to add the Graph QL gem and then we're going to add the graphical rails gem. This will give us the graphical interface which allows us to query our Graph QL API as well as expose our schema so we can kind of explore the endpoint that we're signing up- that'll make more sense in just a minute. So, I'm going to paste these into my gem file, shoot over to my terminal and run bundle install and cool those are installed. So, now we can jump back into our application. &nbsp;</p><p> &nbsp;</p><p>So, it looks like I actually forgot to save my gem file so let's save it and now let's go back to the terminal and let's run bundle install one more time- cool now that's installed. So, what we're going to do really quickly now is use AR rails generate command to generate some new assets. So, rails generate Graph QL install. So, as you can see here it created a new directory inside our app a directory called Graph QL where it gave us a bunch of types; in something called mutations and controllers; a lot of stuff in there right. So, we can jump into in a minute, but what we're going to do is we're going to run bundle one more time and now we're going to generate some Graph QL objects right. So, remember we had a restaurant and dish those were the two types of models that we're using in our application. So, let's run rails, generate, Graph QL, object and we're going to do one for restaurant- cool. All right so it made a restaurant type for us and then we're also going to do one for dish and it made a dish type for us right. &nbsp;</p><p> &nbsp;</p><p>So, now let's jump back in our application cool. So, we're back in our project and we can see here that a that new directory was created called Graph QL however what we're going to want to look at first is actually our routes file. So, we can see that we have this new route which is at slash post Graph QL and it runs to this Graph QL execute; the Graph QL controller that runs the execute method right. So, that's actually our single graph koala point and all graphical queries, mutations, even subscriptions if we were to set those up will actually run against that single endpoint. We're going to add one thing to this file though. Since we added that graphical gym, we have this graphical whale's engine right. And so, what we're going to do is we're going to mount it at the graphical path, so that then we can play with our Graph QL API. So, I'm going to throw that in here just mounting that engine save and then I'm going to jump in and restart our rail server. &nbsp;</p><p> &nbsp;</p><p>So, I restart that cool and now let's jump back into our browser and go to the little host here- this is where our servers running and open up graphical. Loading one second- make sure that we're not getting any errors. Ooh we are getting an error. Let's see what what's happening too - no round match. No round match okay. So, we're getting no route match error for these assets ah okay here we go one second. So, if we actually jump in into our application dot RB file that is in our config directory cool and we open up sprockets- that's one of the requirements that we need to have here. So, let's restart our server one more time and boom all right. So, this is graphical right. So, if we were to say, “Hey, what queries can we do? We could say that we see, “Oh we have this test field” and if we execute that hello world- it gives us our first hello world query, right. &nbsp;</p><p> &nbsp;</p><p>So, if we jump in here and actually open up the Graph QL a directory and we see the okay well there's the schema, there is mutations and queries. And then if we were to go into types, we can see these different types- query type being one of those. &nbsp;</p><p> &nbsp;</p><p>Okay so let's go back to our query type and then we're going to delete this hello world test field that we just ran right and we're going to add something new in here. I'm going to paste in the new type that we're adding which is we're going to add a field to our query called “Restaurant” and it's going to be of our restaurant type which we created when we use the “generate object command” and passed it restaurant. It takes an argument which is an ID and that argument is required right so when you're calling this method you have to give it the idea of a restaurant. However, when that gets called this is the method that calls it right so we have our restaurant method and the ID of the restaurant. And what does it do? It reaches into our database and pulls out the restaurant with the given ID right. &nbsp;</p><p> &nbsp;</p><p>So, right now if we saved that and we went back to our Graph QL API, well we're going to reload that and we can look at this and say, “Okay well now what's available ooh restaurant.” And if we want we can pass it an ID. Let's say 1 and right now we're going to get an error why because we haven't specified anything about the different properties on the restaurant type- it's empty. So, let's go back to our project, let's go to our restaurant type which is right here and let's start defining some of the fields that are on this restaurant cool. So, we are going to give it a field which is ID, this class type it's going to be ID and we will not allow this to be null. So, null false okay. Then what we're going to do is we're also going to say that a restaurant has a name that's going to be type string. And null we can say, null true- we allow null in this case, as well as a field which is rating which is going to be a float type and null true as well- if we don't make these required. Cool! &nbsp;</p><p> &nbsp;</p><p>Alright, so now let's go back to our browser, reload graphical and now we can say, “Okay well, hey, we're going to choose to get back the ID and the name and boom that's exactly then now what we're getting.” So, we're already pulling the data out of our Graph QL endpoint right. And so, I wanted to I could drop name, give rating and everything's dynamic. But remember our concern was that now we need to have dishes right. &nbsp;</p><p> &nbsp;</p><p>So, let's jump back and create that relationship via our graph URL API. So, the way that we're going to come to accomplish this is very similar to how we've been saying up these fields so far. We're going to say that we have a field and we're going to call it “dishes” and that is going to be an array of from our types we are going to use dish type; which we have are going to have to jump in and define here and then we're going to say that hey this relationship can be unspecified. So, now let's jump into dish type and let's just copy some of this to speed up the process. So, when we have our dishes right dishes have an ID ,they have which is a type ID, they have a name they also have a price which is a float and then they also have- Oh too much- they also have a description… description which is a string, alright- cool. &nbsp;</p><p> &nbsp;</p><p>So, once again back to- Oh one second, I think I have to save this. Yep. Good there. Okay. So, now let's jump back to browser and let's look at this. So, I'm going to get rid of rating and I'm going to say that, “Hey, what I really want is the ID the name and now I want the dishes right” which I'm going to jump into. And on the dishes, I'm only going to want the name of the dish and the price of the dish and so now that's what our API is going to bring us back right- that's super cool. So, if we wanted two of course we could change the ID get a different restaurant different. But now let's actually jump in to our component that we built and now utilize this or consume this this endpoint or make this query. &nbsp;</p><p> &nbsp;</p><p>So, back in our component we can see that our application or our component is still just making a normal get request to our restful endpoint and getting back the information it or the information on the restaurant based on its ID right. So, let's switch this over now to actually use our Graph QL endpoint. So, first off what we're going to do just to make things a little bit cleaner is, we're going to add a new method to this component which builds a Graph QL query. And so, we're going to say query and it's going to get passed an ID there we go. Let's make it a simple arrow function. And what we're going to do is create an object that has a single key called “query” and that is set to a property well which is a string… cool. And then we're going to pass that ID in as the query argument, right. So, there we go- cool. </p><p> &nbsp;</p><p>Next what we're going to do is we're going to create a post request to our new Graph QL endpoint which sends this query. And I think one thing that's really important to note here is that, Graph QL is not like some new type of protocol for requesting or sending data across the web; it simply is a post request that sends the query as the post body and then the server interpretation sends you back the data that you want right- that's a super important distinction and is the reason why we can use a familiar library like Axios or any other normal way that you're used to making HTTP calls or HTTPS calls. So, let's just put that in there and say, “Graph QL” since that's our endpoint right. We actually don't need to make that string literal; we can just make it a normal string. And then for the post body we're going to say is, that this query since we have our query function and we're going to pass that the restaurant ID. So, let's just calm out our old restful approach. And in here, let's then say that okay well then once we do that all we're going to loop one second, then all we're going to do for now is console out the response. Console dot log- cool all right past that as a callback. &nbsp;</p><p> &nbsp;</p><p>So, let's jump back to our component and we can see that its status loading and we argued in an object printed out. So, let's go jump in and sure enough that is the restaurant object with that ID that we requested. And we can see that we only have, the name the ID and dishes are actually coming back. So, let's see, we actually have to dig a little bit deep into that object to get the properties we want. So, let's jump back here and similar to how we said that the response sets the response data to this restaurant, let's jump in and say this and then it's data dot restaurant, right. So, now if we reload our component cool it's displaying all that information; so now we can see that we have the ID the name and the dishes. &nbsp;</p><p> &nbsp;</p><p>Now what's so cool about this is remember we're in a component right here right we're on our front-end we're in our application so let's say that I didn't want the ID [I think that will work unless the null thing won't let us], but we also want the rating. So, I just changed my query. Now when I reload my component boom that and rating. Let's say that for the dishes I didn't want the price of the dishes, I only wanted the name, now when it displays, we only have the name of our dishes right. &nbsp;</p><p> &nbsp;</p><p>So, this shows now the flexibility that I have as a front-end developer building you know components for only requesting the data I want, being able to work through relationships and requesting that data and then never having any type of blocking tasks from endpoint requirements slowing me down. &nbsp;</p><p> &nbsp;</p><p>I really hope that this gave you a really great overview of what Graph QL is and how powerful it can be for data driven applications. We will try to do these tutorials for not only around Rails, but Python or Django, as well as Node and Express apps. So, looking forward to seeing you in future videos. Thank you. </p><p><br></p>",
		"slug": "learn-graphql-using-rails-5-and-vuejs",
		"thumbnail-image": {
			"fileId": "61cd9c61af11491fa50b11a9",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/5ef2d331e71e3830590c8810_c-thumbnail__video--5learngraphql.png",
			"alt": null
		},
		"video-tags": ["61cd9c61af11499afa0b0ba4", "61cd9c61af1149cef80b0bac", "61cd9c61af11495fbb0b0bec"],
		"author": "61cd9c61af1149d1980b10aa",
		"updated-on": "2020-07-13T17:00:36.602Z",
		"updated-by": "Collaborator_5e55457e71987f51d810ff2c",
		"created-on": "2020-06-24T04:15:47.517Z",
		"created-by": "Person_5a0f5e7fbd61b20001498154",
		"published-on": "2021-12-30T11:48:39.600Z",
		"published-by": "Person_5a0f5e7fbd61b20001498154",
		"post-summary": "Course 7 of the 8base Academy video series demonstrates building a GraphQL server with Rails 5.",
		"order": 7,
		"time": "17:48",
		"canonical-2": "http://www.8base.com/8base-academy/learn-graphql-using-rails-5-and-vuejs",
		"published-date-initial-load": "2019-10-01T00:00:00.000Z",
		"video-link": "qeL2zdxK5rk",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "61cd9c61af11496b440b1034"
	}, {
		"_archived": false,
		"_draft": false,
		"academy-video-link": {
			"url": "https://youtu.be/7eID8LdPUXg",
			"metadata": {
				"width": 640,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F7eID8LdPUXg%3Ffeature%3Doembed&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D7eID8LdPUXg&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F7eID8LdPUXg%2Fhqdefault.jpg&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"640\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "8base Academy - Resolver Function Basics for extending the GraphQL API - Course 5",
				"provider_name": "YouTube",
				"type": "video",
				"thumbnail_url": "https://i.ytimg.com/vi/7eID8LdPUXg/hqdefault.jpg",
				"author_name": "8base"
			}
		},
		"name": "Resolver Function Basics for extending the GraphQL API",
		"transcript": "<p><em>* This is an automated transcript. Please excuse inaccuracies.<br></em></p><p><br></p><p>Hey there, so in a previous video we talked about how 8base will create for you and manage all of the Graph QL resources or schemas that you need, to perform crud actions on any table through your API endpoint. Know though that is a type of functionality that's totally extensible through the use of Resolvers which are a type of custom function 8base offers. And we're going to jump in right now and take a look at the basics of how a resolver works and how you can deploy a custom one yourself, so that you can add any type of functionality that you really need to your API endpoint by developing these functions. &nbsp;</p><p> &nbsp;</p><p>Okay so two quick things to go over before we get started: First off is that I am working in a workspace that was created using the QuickStart app that you can find on our documentation. So, if you go to Docs.APS.com and click on “click start” right here on the left side you can go through the first five steps of this and get that directory on your computer locally, as well as deploy it and have some data records populated in there. The next thing that I’d just like to say is, as we go over custom functions, know that you can always dive in the documentation as well and look at the documentation for custom functions. So, this will help you understand which arguments are getting passed to your resolver function or any other type of custom function; that we'll go over in subsequent videos as well; as you can look directly at Resolvers here to get a better idea of what's going on. &nbsp;</p><p> &nbsp;</p><p>So, let's jump right in to our text editor sublime to where like I said, I have the QuickStart app here locally and I'm in the server directory. So, inside of the server directory, we have an 8base.EMU file and this is a really important file because it is what declares all the resources that will be deployed to your project when you run 8base deploy from the command line. So, this is really how you provision a workspace with custom functions and with any other type of resource that you are provisioning through code right. &nbsp;</p><p> &nbsp;</p><p>So, when we have a resolve or a function and remember this function extends the Graph QL API, first we have to give it a unique name, then we declare its type which is resolver, we have to give it a schema and a handler. So, if you've ever written serverless functions you know let's say using, Lambda you'll probably pretty familiar with what a handler function is, however, the schema function might be something new to you. &nbsp;</p><p> &nbsp;</p><p>So, let's just go quickly into that path which is source, mutations, listing, share, schema, doc Graph QL and we're going to look at this file right here. So, what you're seeing here is when this is okay well extend type mutation. Mutations are 8base type for our API or for our Graph QL API. And we're creating a custom mutation type here called listing share which needs an ID and email and it returns a success response. So, the success response would just turn a Boolean value of success true or false. So, if we wanted to, we could excuse me, we could type our response meaning that so if we gave it a type of custom result and in there we wanted to say, “Okay well we have a key called ‘status’ which is a string.” Let's just leave it at that. We could make that custom type declaration and use that here right. So, this is completely up to you to configure to be the function input and the function output as you want. And this is what's going to be then used by the Graph QL- if we go into the API Explorer, this is what we'll be using the API Explorer, so that you can look kind of be introspective into the function you created and so it gives you all the information. I'm just going to return this to the state that it was in… cool. &nbsp;</p><p> &nbsp;</p><p>So, now if we go over to our handler.JS right there's that this function is the one that you'll get in the Quick Start app, but let's just walk through it really quickly to understand what's going on all right. So, first off in our schema.Graph QL file, we declare that okay the listing share function, we get passed an ID and an email they're both required arguments. Well then in here, on the event arguments has passed if we were to go into event.data, that is where we could find both ID and email that's where those at information gets passed. So, what's happening remember this function right here is to being deployed to your server- it becomes a server-side function. So, if you were to make a Graph QL call to listing share and pass the ID and email, it would populate into here it would then create an API request on your server right. So, it makes the listing query which is defined here passing the ID that you gave it and so it brings back all those listings- there that specific listing- excuse me. If it doesn't get that it would return a false status and the reason why it's returning success false is because and this is important, that is the type of response that we said this function has to return; so, it's a typed response. &nbsp;</p><p> &nbsp;</p><p>So, let's say that that wasn't a base type offered by a base what you'd be expected to do here is, have success response is success, Boolean acquired. And so, that is what you can expect coming back from the API true or false whether or not that it was successful. Jumping back in here, we even see the okay if we get the response successfully it will then from that response or we then from that response pull out the listing and the property. We are then going to send an email because this is a listing share, it invites someone to come check out a listing. We're then going to send an email using this send mail module, which is not important right now to the email that was specified and then adding just some title and email body information. And then once again, we give the declared type back whether it's false or because the email wasn't sent, or true because everything ran correctly right. &nbsp;</p><p> &nbsp;</p><p>So, one thing I'm just going to point out here is that let's go into our 8base workspace, I'm in the API Explorer and let's say I was going to try to run EMU mutation. And I was going to say, “Listing share”, but we can see that listing share isn't here because we haven't deployed it yet. So, now what I'm going to do is, I'm going to go to my command line, clear this up and where am I… PD- cool. I'm in the server project. So, I'm just going to make sure that this is saved. Save this, save this, now let's run 8base deploy. 8base deploy. All right this might take a minute, so once it's uploaded, we'll be right back. &nbsp;</p><p> &nbsp;</p><p>Okay cool so that didn't take that long at all and now what we're going to do is jump into our workspace to see or validate necessarily, how that function was deployed, how it can be used through the API as well as just some other things that we can do to check out and kind of have some good oversight of it. So, first off if we go over to our 8base work space and we reload the API Explorer- I'm going to delete this comment. And then, we can see that unlike earlier when we looked for that listing share mutation, now let's team share is right there. And just like we declared if we want to give it an ID and an email- let me just throw in a fake ID here. ID and email, cool. I'm going to throw in a fake email address <a href=\"mailto:Hi@Co.com\">Hi@Co.com</a>. All right just let me declare, success is the response type right. Okay so just for fun I'm going to execute this and we'll probably get a false back exactly because it couldn't find the ID. And if it did find the ID, maybe it couldn't find the email. &nbsp;</p><p> &nbsp;</p><p>Another important thing to notice here is that already our Documentation Explorer if we'd go into mutation which you say listing share, we already have that documentation in here of what available right. So, a super cool and powerful way to extend our API endpoint and you can get really creative obviously and pretty much do anything that you need to do on the Graph QL side. &nbsp;</p><p> &nbsp;</p><p>And one thing that's worth mentioning too is, right here we're playing with this in our API Explorer but this is a function that you just created that would be used client-side right. So, you'd be able to pass in to Graph QL tag variables like, ID and email and then have this function run. &nbsp;</p><p> &nbsp;</p><p>So, the last thing I just want to show is that if we go over to logic which is here on the left-hand side, we can see that the custom resolver function was deployed as one of our custom functions which we right here. And if we want to just look at the logs a bit being run, we could just jump in and see those. So, right here that we can see that it was invoked twice. And so yeah this is ready and good to go. &nbsp;</p><p> &nbsp;</p><p>All right, thank you so much for taking the time to watch this. We're going to go into writing more advanced Resolvers really soon, as well as all the other different types of custom functions for 8base offers. So, have a great rest of your day and looking forward to seeing you in future videos. Take care.</p><p><br></p>",
		"post-summary": "Course 5 of the 8base Academy video series is on how to extend the GraphQL API with resolvers.",
		"slug": "resolver-function-basics-for-extending-the-graphql-api",
		"thumbnail-image": {
			"fileId": "61cd9c61af114971c80b11b6",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/5f04b143c6f7414d4a3886e1_Academy-Course5.png",
			"alt": null
		},
		"author": "61cd9c61af1149d1980b10aa",
		"video-tags": ["61cd9c61af11492f690b0ba5", "61cd9c61af114959330b0bf1"],
		"updated-on": "2020-07-13T16:59:01.754Z",
		"updated-by": "Collaborator_5e55457e71987f51d810ff2c",
		"created-on": "2020-06-24T04:13:57.802Z",
		"created-by": "Person_5a0f5e7fbd61b20001498154",
		"published-on": "2021-12-30T11:48:39.600Z",
		"published-by": "Person_5a0f5e7fbd61b20001498154",
		"order": 5,
		"time": "09:54",
		"canonical-2": "http://www.8base.com/8base-academy/resolver-function-basics-for-extending-the-graphql-api",
		"published-date-initial-load": "2019-10-01T00:00:00.000Z",
		"video-link": "7eID8LdPUXg",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "61cd9c61af114964800b1074"
	}, {
		"_archived": false,
		"_draft": false,
		"academy-video-link": {
			"url": "https://youtu.be/FqZ0-usc93w",
			"metadata": {
				"width": 640,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FFqZ0-usc93w%3Ffeature%3Doembed&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DFqZ0-usc93w&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FFqZ0-usc93w%2Fhqdefault.jpg&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"640\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "8base Academy - Advanced Authorization using Custom GraphQL Filters - Course 6",
				"provider_name": "YouTube",
				"type": "video",
				"thumbnail_url": "https://i.ytimg.com/vi/FqZ0-usc93w/hqdefault.jpg",
				"author_name": "8base"
			}
		},
		"name": "Advanced Authorization using Custom GraphQL Filters",
		"transcript": "<p><em>* This is an automated transcript. Please excuse inaccuracies.<br></em></p><p><br></p><p>Good morning, so in video four we went over how you can permission your API or setup authorization using the default controls that 8base offers you. Now what we're going to do is jump in look how you can create custom access or custom filters on any record for a specific action to really have a more fine-grained control over what types of users are allowed to perform updates or reads on different types of records and resources. Let's take a look at that. &nbsp;</p><p> &nbsp;</p><p>Okay so I'm in my Quick Start app workspace right now and one thing I just wanted to show you is I added an extra field to the Brokers table called “credits”; which is a number of type field right. So, we're just going to use this to make our filter or make our custom access depend on a certain variable for the broker right. So, I'm going to jump over the API Explorer now what I've already populated with just some let's call it a template right. First off, we have a query and that query is taking a filter as an argument. Then inside it we pass that argument to as the filter on the Brokers list query and then all we care about right now is returning an ID right. &nbsp;</p><p> &nbsp;</p><p>So, right down here we're able to look at this query a variable which is going to be the filter that we are defining. This will make sense why we're doing it as a query at the end of the video, so just bear with you for now. But what's cool is just like we could filter any query right here; we can start creating that inside the query variable view down at the bottom. So, for example, let's say that this filter and one thing that we wanted to do was we wanted to say, “Okay well we went to filter our Brokers by ones that have credits greater than five. So, ones with more credit more than five credits. So, we can run that filter and we have one broker that has more than five credits right.” Well let's say, that we wanted a conditional type filter we would say, “Or and or and both accept objects we're to which you know if it's an and, every single object has to have it returned truthy for the specified thing with the or, one of them has to be specified truthy.” So, let's just throw- one second- let's just throw this in here. So, this is the broker can either have five credits or let's give it the next value. We can say, “Let's see that they have listing or the let's say that their email right ends with user, email ends with.” And we're going to go 8base.Co for this. So, we run that cool and we got a lot more now right. So, what's this doing? This filter is going through and saying okay well we want to filter by people that have more than five credits or their name ends with a base right. &nbsp;</p><p> &nbsp;</p><p>So, one thing that's important or two things that are important about this is, one we're looking at a field property here, the next one we're going into a relation and new filtering by the relation right. Now why is this relevant to roles and permissions or specifically creating custom access for a role to a different or specific table? Well if we wanted to, we could take this right here and the same way it performed on this list of Brokers, we could go into our settings, we could specify on our roles that well this is the broker role and when the broker role is interacting with or reading the Brokers resource, we could say that has a custom filter on that and we drop that in there and this would work. Meaning that it would scope the records that this broker has access to reading per the filter that we just defined and as it behaved within the API Explorer. &nbsp;</p><p> &nbsp;</p><p>One thing that's important to note here as well is that we go back to the API Explorer let's say, that we wanted to do it to where okay well we're going to do this for listings. So, let’s change a few things here. First thing was that we're going to change this to listing list that's going to be the type, which means that then we have to change the type of the filter to a listing filter with all arguments have to be typed. We will still leave it as my filter right. So, what we're going to specify here is that, okay we're going to do it to where if the listings broker has more than five credits- just do it like that. So, if the listings broker has more than five credits then they'll be able to update the listing. &nbsp;</p><p> &nbsp;</p><p>The second condition that we can do is or if the listing- let's just use the autocomplete here. So, if I just press option space, it's going to open a list of autocomplete. So, we're leave that. Or if the status of the listing equals nothing draft would be one, right. So, if a listing is not published or the broker has more than five credits, they'll be able to update the listing that's what we're going to use it for. And one other thing that we can do here is we can say, okay what we can do is kind of an aggregated one to where we'd say, okay well if the broker- let's go back to the broker- well one second. If the Brokers listings and so since this is a collection, we can specify whether some of these values are truthy, if every value has to be truthy or if none of the values have to be truthy. So, let's say that if any of the listings price or let's say if any of the Brokers listing price is greater than or equal to 1 million dollars or 1 million, then this filter will trigger alright. &nbsp;</p><p> &nbsp;</p><p>So, once again we're just kind of playing around here, but you get the idea of the level of detail that you can go into. So, a good example of this would be imagine if you're a building a service like Reddit or something you know or some like Hacker News too, where based on the number of karma points or the number of yeah karmic type points the logged in user has, maybe they can perform a certain action right. All those types of custom permissions can be built in the filters to show what type of actions they can do on what types of resources. Once again though if I just take this- let's actually run this- it works. Can is a strong filter and no one has a listing of more than million dollars, so no items returned. But we could take this query or this list filter, we could copy it, go right back into our “settings”, open up “roles” click on the “Brokers role” and then let's say that on the listings to update the listing we want to put on a custom filter drop that in there and it's good to go. &nbsp;</p><p> &nbsp;</p><p>I hope this gave you a really good idea of how flexible the roles and permissions or authorization system is in a phase, where by using these types of custom filters you can really give a fine-grained control permission over what records different roles are allowed to come back perform actions on, based on the attributes of any related record. So, hope this was helpful, have a great rest of your day and looking forward to seeing you again in future videos. &nbsp;</p><p><br></p>",
		"post-summary": "Course 6 of the 8base Academy video series shows how to use custom filters on roles for scoping.",
		"thumbnail-image": {
			"fileId": "61cd9c61af1149c3410b11a7",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/5ef2d22c3637d5f6c35ecc87_c-thumbnail__video--17filters.png",
			"alt": null
		},
		"slug": "advanced-authorization-using-custom-graphql-filters",
		"author": "61cd9c61af1149d1980b10aa",
		"video-tags": ["61cd9c61af11497c1f0b0baa", "61cd9c61af1149687a0b0ba7"],
		"updated-on": "2020-07-13T16:59:31.428Z",
		"updated-by": "Collaborator_5e55457e71987f51d810ff2c",
		"created-on": "2020-06-24T04:11:33.892Z",
		"created-by": "Person_5a0f5e7fbd61b20001498154",
		"published-on": "2021-12-30T11:48:39.600Z",
		"published-by": "Person_5a0f5e7fbd61b20001498154",
		"order": 6,
		"time": "08:19",
		"canonical-2": "http://www.8base.com/8base-academy/advanced-authorization-using-custom-graphql-filters",
		"published-date-initial-load": "2019-10-01T00:00:00.000Z",
		"video-link": "FqZ0-usc93w",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "61cd9c61af11490c160b1033"
	}, {
		"_archived": false,
		"_draft": false,
		"academy-video-link": {
			"url": "https://youtu.be/JIEG3oL-iHs",
			"metadata": {
				"width": 854,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FJIEG3oL-iHs%3Ffeature%3Doembed&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DJIEG3oL-iHs&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FJIEG3oL-iHs%2Fhqdefault.jpg&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"854\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "8base Academy - Defining Data Tables and Relationships in the Data Builder - Course 2",
				"provider_name": "YouTube",
				"type": "video",
				"thumbnail_url": "https://i.ytimg.com/vi/JIEG3oL-iHs/hqdefault.jpg",
				"description": "8base is a production-ready serverless backend-as-a-service that lets developers build amazing cloud applications using JavaScript and GraphQL. With 8base, d...",
				"author_name": "8base"
			}
		},
		"name": "Defining Data Tables and Relationships in the Data Builder",
		"transcript": "<p><em>* This is an automated transcript. Please excuse inaccuracies.</em></p><p>‍</p><p>Okay so in this episode we are going to be going over data modeling in the 8base, specifically that is how do you create tables, put fields on those tables and then define associations between the tables. I think the best way is to just jump right into an example, so let's get going. &nbsp;</p><p> &nbsp;</p><p>Okay so first off, I'm starting in a new 8base workspace that I created just for this video called, “Simple CMS”. Pretty much we're going to be creating two tables for the sake of this demonstration one called “posts” and the other one called “authors” that's what I called the workspace Simple CMS. I hope that makes sense to you and so before we jump in and start creating those tables I also wrote a simple little spec for what we're going to be doing. So, on the post let me make that bigger. Okay well anyway, so this is, give me the post table and on the post table we're going to make a title, a body a publishing date and as well as add an author relationship to it which is going to be a belongs to relationship. When it comes to the author table, we're going to add a pen name which give me texts posts which is going to be a has many relationships as well as Avatar which is going to be an image file alright. &nbsp;</p><p> &nbsp;</p><p>So, let's just jump back to that workspace and I'm going to click on create a new table. Since I don't have any tables this is the layout I'm going to see however, you can find all this in the data page of your management console for the workspace that you want it to be in. So, let me click on “new table” and I'm going to write in posts. So, let's start with posts. &nbsp;</p><p> &nbsp;</p><p>So, first off, I'm going to give the post a status all right and so the status is going to be types which you can think of switch almost is like a truthy falsie type thing or a select. For example, we have on/off yes/no so on and so forth, but I'm going to choose custom and then I'm going to add in a list of different options. Those being, draft in, review and published. Sorry if my head is covering some of the fields here. But essentially these are the different statuses that we're going to allow are opposed to have we're going to make it mandatory if I click on the mandatory validation as well as set a default which is going to be draft, so that every new post we create defaults to draft status- cool. &nbsp;</p><p> &nbsp;</p><p>Next, I'm going to add the title. I'm just going to try to go through these pretty quickly… 55 and then we're to make it mandatory and then we're also going to say, “No duplicate values” which means that titles are going to be unique so that we could query by them if we wanted to. Then I'm going to add body, text- since is that since the body text could be really long, we have like 20,000 characters and then let's add a publishing date. So, as you can see just all have to do is select the type. We're going to make that mandatory and then we're going to handle or our 8base is going to handle on the back end all the validation to make sure that the right types are only being saved to the database. So, then I think that's it for our posts table. The only thing we're going to want to do is create the authors association, but we're going to wait to do that until after we've created our authors table which we're going to do now. &nbsp;</p><p> &nbsp;</p><p>So, I'm going to click on new table up here give it a minute… cool authors. An author is going to have a pen name which is going to be text. Let's make that mandatory and no duplicate values. So, mandatory and unique. Then we're in a given author and avatar. So, this is great. So, if I just click “file” and I click on “image”, “create field”. So, now within the management console everything has been configured to be able to upload files to the table. However, it's also being created so that from your Graph QL API you can do file uploads. We'll go over how all that works in another video, but just so you know how do you put like a profile picture essentially to the author was that easy. &nbsp;</p><p> &nbsp;</p><p>So, now I'm going to click back to the post table right. So, if I wanted to, I could say that, “post has an author” and then select “type table”. But instead just for convenience I'm going to grab a Thurs over here drop it on top of the posts table definition and then it's going to populate all that information for me. &nbsp;</p><p> &nbsp;</p><p>So, here we're going to look at some of these options. So, first off is the table relationships. We can see with this graphic right here that the author has many posts and the posts belong to single author; that's exactly what we want. If we wanted to change that we could do create a many-many relationship, one-to-many in the other direction or even a one-to-one relationship. We'll go over more about relationships once again in another video, however for now know that defining those associations between the tables really is that straightforward. And then we're also going to say that the author field is a mandatory for a post. I'm just going to change that to author. &nbsp;</p><p> &nbsp;</p><p>Then on this relational field name, that is actually how is the relationship described on the other table. So, post is totally fine in our case just to make that clearer after I create this association, done. If I went over to authors and now, we can see that an author has many posts, that's exactly what we want. So, just to create a few records in our workspace or in our database right now. I'm going to click over to the data tab here which is right next to schema and let's create our first author. We're going to call this author or give the author a pen name of sub that's me and then give him an avatar, upload the avatar and second add the row. Boom! First author was created. &nbsp;</p><p> &nbsp;</p><p>So, now if we wanted to go in here and create our first post it's going to be a draft. We're going to say, “First post is the title. A really interesting blog host is the host itself. The publishing date is today and then set is going to be the author.” And now our post was created. &nbsp;</p><p> &nbsp;</p><p>So, it's great that you have the ability to jump right into the management console and start creating updating and deleting records, using the UI. However, it'll probably be very common that you want to perform these same types of actions using the API. And one thing that's so powerful about 8base as well as just so cool is, based on your schema definitions right here, we generate all the Graph QL resources that you need to perform crud actions through the API. What do I mean by that? I'm going to jump over the API Explorer which we will go into depth within probably the next few videos. However, right here if I were to say okay well, I want to make a query and, in that query, I want to query a hosts list. Since we created posts and you saw us do than that video for both list queries and normal queries, mutations and subscriptions which is web WebSocket real-time updates, those Graph QL resources have been created for you. So, for example if we wanted to query this list of posts, we could say okay for each item in the list well we want the ID, the title and the author which for the author we want the pen name- cool. So, I'm going to run that query and you can see that we only have one post that makes sense and it gave us already the title as well as the author and the data on the author. So, that was a relational query that just came right out of the box and was ready to go. &nbsp;</p><p> &nbsp;</p><p>Like I said we're going to go over so many more of these things in depth really soon. However, I hope that you found this video very valuable in getting started on how to view basic usage of the data builder as well as how to create some records within your workspace. If you want to stay updated on future videos please, subscribe to the channel as well as feel free to ask any questions in the comments or reach out directly. Hope you found this valuable and looking forward to seeing you in future videos. Take care. </p><p><br></p>",
		"post-summary": "Course 2 of the 8base Academy video series explains building relation data models in 8base.\n",
		"slug": "defining-data-tables-and-relationships-in-the-data-builder",
		"thumbnail-image": {
			"fileId": "61cd9c61af114912c40b11a6",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/5ef2d13b4d927a15b7de1631_c-thumbnail__video--16defining.png",
			"alt": null
		},
		"video-tags": ["61cd9c61af11497c130b0bc8", "61cd9c61af1149687a0b0ba7"],
		"author": "61cd9c61af1149d1980b10aa",
		"updated-on": "2020-07-13T16:56:23.088Z",
		"updated-by": "Collaborator_5e55457e71987f51d810ff2c",
		"created-on": "2020-06-24T04:07:10.669Z",
		"created-by": "Person_5a0f5e7fbd61b20001498154",
		"published-on": "2021-12-30T11:48:39.600Z",
		"published-by": "Person_5a0f5e7fbd61b20001498154",
		"order": 2,
		"time": "08:42",
		"canonical-2": "http://www.8base.com/8base-academy/defining-data-tables-and-relationships-in-the-data-builder",
		"published-date-initial-load": "2019-10-01T00:00:00.000Z",
		"video-link": "JIEG3oL-iHs",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "61cd9c61af1149fd240b1032"
	}, {
		"_archived": false,
		"_draft": false,
		"name": "Welcome to 8base Academy",
		"post-summary": "Course 0 of the 8base Academy video series is a simple welcome message.",
		"slug": "welcome-to-8base-academy",
		"thumbnail-image": {
			"fileId": "61cd9c61af11494ff20b11a0",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/5ef2ad45cea2ca9e821ea6a9_c-thumbnail__video--1welcometo8baseacademy.png",
			"alt": null
		},
		"updated-on": "2021-05-17T02:54:07.434Z",
		"updated-by": "Person_5a0f5e7fbd61b20001498154",
		"created-on": "2020-06-23T15:09:40.051Z",
		"created-by": "Person_5a0f5e7fbd61b20001498154",
		"published-on": "2021-12-30T11:48:39.600Z",
		"published-by": "Person_5a0f5e7fbd61b20001498154",
		"academy-video-link": {
			"url": "https://www.youtube.com/watch?v=rtyHFnz-NGI",
			"metadata": {
				"width": 640,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FrtyHFnz-NGI%3Ffeature%3Doembed&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DrtyHFnz-NGI&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FrtyHFnz-NGI%2Fhqdefault.jpg&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"640\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "8base Academy - Just a Quick Introduction to 8base - Course 0",
				"provider_name": "YouTube",
				"type": "video",
				"thumbnail_url": "https://i.ytimg.com/vi/rtyHFnz-NGI/hqdefault.jpg",
				"description": "8base is a production-ready serverless backend-as-a-service that lets developers build amazing cloud applications using JavaScript and GraphQL. With 8base, d...",
				"author_name": "8base"
			}
		},
		"author": "61cd9c61af1149d1980b10aa",
		"transcript": "<p><em>*This is an automated transcript. Please excuse any inaccuracies.</em></p><p>‍</p><p>Hi, my name is Sebastian and welcome to 8base Academy, thanks for tuning in. On this channel we're going to be publishing a series of videos that will help you understand what exactly 8base is as well as all the amazing things that you can do while developing on top of the platform. &nbsp;</p><p> &nbsp;</p><p>Just to give you a little bit of background: &nbsp;</p><p> &nbsp;</p><p>8base is a production-ready serverless backend-as-a-service (BaaS), that lets developers build amazing applications using JavaScript and Graph QL. &nbsp;</p><p> &nbsp;</p><p>This is a short video just a way of saying, hi and welcome. If you want to subscribe to future updates, please subscribe to the channel as well as feel free to use the comment section below as a forum. I've also thrown in some helpful links in the description, that will help you get started, look at how to sign up for account as well as refer to our documentation if you kind of want to see what else is going on. </p><p> &nbsp;</p><p>Looking forward to seeing you in the future videos and take care. Have a great day. </p><p><em><br> </em></p>",
		"video-tags": ["61cd9c61af1149dd0a0b0bab"],
		"order": 0,
		"time": "00:58",
		"canonical-2": "http://www.8base.com/8base-academy/welcome-to-8base-academy",
		"published-date-initial-load": "2019-10-01T00:00:00.000Z",
		"video-link": "rtyHFnz-NGI",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "61cd9c61af114944290b102e"
	}, {
		"_archived": false,
		"_draft": false,
		"name": "Hosted Docs vs. GraphQL API Explorer",
		"post-summary": "Course 1 of the 8base Academy video series explains how to best learn about 8base.",
		"thumbnail-image": {
			"fileId": "61cd9c61af1149bb810b11a1",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/5ef2cc9360c34197152804c9_c-thumbnail__video--2hosteddocs.png",
			"alt": null
		},
		"slug": "hosted-docs-vs-graphql-api-explorer",
		"updated-on": "2020-07-13T14:44:59.098Z",
		"updated-by": "Collaborator_5e55457e71987f51d810ff2c",
		"created-on": "2020-06-23T15:09:40.015Z",
		"created-by": "Person_5a0f5e7fbd61b20001498154",
		"published-on": "2021-12-30T11:48:39.600Z",
		"published-by": "Person_5a0f5e7fbd61b20001498154",
		"academy-video-link": {
			"url": "https://youtu.be/mIwP8-xW3s8",
			"metadata": {
				"width": 640,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FmIwP8-xW3s8%3Ffeature%3Doembed&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DmIwP8-xW3s8&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FmIwP8-xW3s8%2Fhqdefault.jpg&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"640\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "8base Academy - Hosted Docs vs. GraphQL API Explorer - Course 1",
				"provider_name": "YouTube",
				"type": "video",
				"thumbnail_url": "https://i.ytimg.com/vi/mIwP8-xW3s8/hqdefault.jpg",
				"description": "8base is a production-ready serverless backend-as-a-service that lets developers build amazing cloud applications using JavaScript and GraphQL. With 8base, d...",
				"author_name": "8base"
			}
		},
		"author": "61cd9c61af1149d1980b10aa",
		"transcript": "<p><em>* This is an automated transcript. Please excuse innacuracies.</em></p><p>‍</p><p>Okay so in this video, we are going to talk a little bit about how documentation works in relation to 8base and specifically go over the two types of documentation we have. One is the hosted docs at Docs.8base.com where you're going to find a lot of information about different platform knowledge that you might want. And the other is the API Explorer, which is where you can find the Documentation Explorer which is a great way to really get insightful about your different types of tables and kind of how all the graph QL stuff works on 8base. &nbsp;</p><p> &nbsp;</p><p>So, let's jump in and take a look. &nbsp;</p><p> &nbsp;</p><p>Okay so first off right now I am on docks of a piece comm which is where our hosted docs are. Really this is a great resource to find out or figure out any platform knowledge; as well as things like how to deploy service functions or do roles and authorization or anytime permissioning; essentially like I said, any platform knowledge or how to develop with 8base information is here. That said we are constantly trying to improve our documentation and it's often perfect. So, if you see anything that you think could be better explained or you think something's missing please shoot over to Contribute which is our github page for our github repo for the documentation it's open source. So, if you want to start contributing to this we would be absolutely thrilled. However, if you just want to create an issue on something that isn't working or something that you think would be better explained, feel free to do that and we will get to it as soon as we can and make sure that gets updated and clarified for you. &nbsp;</p><p> &nbsp;</p><p>Alright so, the second type of documentation I want to go over is the Documentation Explorer and this is a really cool feature and I'm something that I personally find extremely valuable. As you might already know, one thing that a piece does is it auto generates and manages a number of different graph QL schemas for you based on the data tables that you create an 8base; essentially any type of crud action that you'd want to do or perform; create; read update or delete, is something that we handle and manage for you so it makes development superfast- at the same time though of course is fully extensible, so you can create your own or go far beyond that for any type of spec that you want to implement. For example, in this in this workspace that I have a table called “Brokers”. &nbsp;</p><p> &nbsp;</p><p>So, an example of a type of query that 8base managers for me is a Broker's list. So, in this example you can see that I kind of had a little query down here that says, “Well if a brokers nickname equals Steve I want his ID and nickname.” If I run that, it's right there. However, let's say that I didn't know what that query looked like or the arguments that would pass to it. I could go right over here the Documentation Explorer click on “query”, look up broker, I can see the broker here and the brokers list, click on the brokers list and here's all the different types of arguments right in the documentation on how to use them. So, for example, I could filter, I could order, I could sort skip, before-and-after, different types for pagination; it's all right here explained to me all the different types that I can use in it. And so really quick and effective way right in the workspace to figure out how to use the API Explorer and build some really powerful queries, mutations or subscriptions. &nbsp;</p><p> &nbsp;</p><p>One important thing to mention on this as well is, it's a great way for your team to keep up with information or documentation about the different things you're building. What I mean by that? So, if I were to jump over to my data builder and I was on the Broker's table here click on nickname and you can see that there was this nickname filled in the description was, “this is the brokers actual name”. Well that's not a necessarily a true nickname. So, I'm just going to change the description to, “This is the Broker’s nickname.” I'm going to save that. Then as soon as I jump back into the API Explorer. I go to query I go to a broker and I open the broker and I look at the type, I can see that here the nickname has the new and updated description. So, like I say that's just a kind of a simple you know funny example; however, that goes for tables that goes for argument types. And so, really while you're building especially on teams, you can keep the most relevant and up to date information right here in the management console on the data table users that you're working with or their fields and make sure that everyone always has the most up-to-date and relevant information. &nbsp;</p><p> &nbsp;</p><p>That's it, I hope that you found this video valuable. If you want to subscribe to future updates please subscribe to the channel and looking forward to seeing you in one of the next videos take care. &nbsp;</p><p><br></p>",
		"video-tags": ["61cd9c61af1149cef80b0bac", "61cd9c61af114910270b0ba6", "61cd9c61af1149dd0a0b0bab"],
		"order": 1,
		"time": "04:57",
		"canonical-2": "http://www.8base.com/8base-academy/hosted-docs-vs-graphql-api-explorer",
		"published-date-initial-load": "2019-10-01T00:00:00.000Z",
		"video-link": "mIwP8-xW3s8",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "61cd9c61af1149d9fd0b102f"
	}, {
		"_archived": false,
		"_draft": false,
		"name": "Authorization Basics with Roles and Permissions",
		"post-summary": "Course 4 of the 8base Academy video series talking about setting up authorization in 8base.",
		"slug": "authorization-basics-with-roles-and-permissions",
		"thumbnail-image": {
			"fileId": "61cd9c61af114986660b11a2",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/5ef2cd820eb44aaf15669f48_c-thumbnail__video--3athorizationbasics.png",
			"alt": null
		},
		"updated-on": "2020-07-13T16:57:35.364Z",
		"updated-by": "Collaborator_5e55457e71987f51d810ff2c",
		"created-on": "2020-06-23T15:09:40.015Z",
		"created-by": "Person_5a0f5e7fbd61b20001498154",
		"published-on": "2021-12-30T11:48:39.600Z",
		"published-by": "Person_5a0f5e7fbd61b20001498154",
		"academy-video-link": {
			"url": "https://youtu.be/yE_tcaEsxfk",
			"metadata": {
				"width": 854,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FyE_tcaEsxfk%3Ffeature%3Doembed&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DyE_tcaEsxfk&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FyE_tcaEsxfk%2Fhqdefault.jpg&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"854\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "8base Academy - Authorization Basics with Roles and Permissions - Course 4",
				"provider_name": "YouTube",
				"type": "video",
				"thumbnail_url": "https://i.ytimg.com/vi/yE_tcaEsxfk/hqdefault.jpg",
				"description": "8base is a production-ready serverless backend-as-a-service that lets developers build amazing cloud applications using JavaScript and GraphQL. With 8base, d...",
				"author_name": "8base"
			}
		},
		"author": "61cd9c61af1149d1980b10aa",
		"transcript": "<p><em>* This is an automated transcript. Please excuse inaccuracies.</em></p><p>‍</p><p>So, what we're going to do right now is, jump in and take a look at the basics of authorization as it relates to 8base. Specifically, that's looking at roles and permissions as they are implemented within the 8base platform from the get-go and how by using these tools, you can leverage really fine-grained controls over the access that different users have to data as well as the actions that those users can then perform on that data. &nbsp;</p><p> &nbsp;</p><p>Let's just dive in and take a look at what we're dealing with. &nbsp;</p><p> &nbsp;</p><p>So, right now I'm in 8base workspace and this is the workspace that you would have if you had gone through the Quick Start app which you could follow at Docs.8base.com. There's absolutely no requirement to follow along for the rest of this video by complaining even that quick start first; however, it's a great way to get started and familiar with creating a simple application using 8base, so I highly recommend it if you haven't checked it out already. &nbsp;</p><p> &nbsp;</p><p>So, first off right now we are in the data builder slash data viewer view and all I wanted to show you is that we have a few different tables in here that will be seen in a minute; and brokers, customers, listings and properties- each of them with a bunch of records already populated. So, what we're going to do as this is about roles and authorization is, we’re going to jump over to our settings and click on roles. So, when you create a new workspace by default, you're going to have an administrator role and a guest role. To this workspace itself I added a property manager role. And essentially you can think of roles as an identifier to which many permissions can belong to right. So, we're going to define all different permissions that a property manager will have- that probably manager being a user because a user can have many roles. So, for example, you could say that well this user is both a property manager and a buyer; if those were two roles that you would want to have in your application. However, just to create a new role, you can click on new role, give it a name and a quick description and you're done. However, right now I'm going to click into the property manager role, and as you can see here, we have listed out all or from tables for our workspace as well as different crud actions that you could perform on a record and then fields. &nbsp;</p><p> &nbsp;</p><p>So, what we have here is, a list of all the different tables we're working with or we have in our workspace as well as the different crud actions and fields a column for fields right here. Essentially what we are able to do is specify what actions a role is, allowed to perform on a given resource as well as what fields they're allowed to access update or view on that resource as well. So, for example, for this property manager role let's say that a user is assigned at the property manager role and we want to say, “Okay well they cannot create listings. And they cannot delete listings. They can read all the listings, but they cannot update any listings.” All these things now are going to be handle at the data level, so if that user were to try to perform an update or delete action on a listing they would not be allowed to; the system would just reject it. However, then on the property since they are a property manager, when it comes with properties we're saying, “Okay they can create a property and we only want them to be able to read or actually we're going to let them read all records, but only let them update their own records the user records and we're not going to let them delete anything.” &nbsp;</p><p> &nbsp;</p><p>So, right there we defined in just a few seconds pretty much how a property manager role will be able to interact with the property's resource right; that is super-fast and super effective. And if we wanted to get even more granular, we could go to custom access on the fields and say that, “Well they have full access to fields, no access or custom access.” Custom access being like, “Hey, let's say that we didn't want them to never know when a property was created however, they could read when it was last updated. And they can update the number of bedrooms.” Like I'm saying, every single field we could go down here and then permission what they're allowed to do on that field. And as soon as we make one of these changes, it is live, it is ready to go, so we know that not only are we able to have fine-grain control over how people are allowed to interact with the data. But those changes are immediate and so we are always making sure that that's up to date. &nbsp;</p><p> &nbsp;</p><p>And just a little bit deeper you can even permission people at platform level. So for example, are they allowed to call certain endpoints; are they allowed to invoke certain functions; can they access logs if they're on the team; as well as if you wanted to just quickly see which users in your application or in your workspace have different roles by clicking on the role, you can look at the different users right here that that role belongs to. &nbsp;</p><p> &nbsp;</p><p>So, this was a quick overview there's some different levels of authorization roles and permissions that we can dive into later. However, I want to give you guys a kind of bite-sized chunk of what it looks like from the beginning and yeah, I think that was pretty good. So, if you have any questions please feel free to use the comments section below. If you're looking forward to seeing future videos, please subscribe to the channel and I hope you have a great rest of your day. Take care. <br></p>",
		"video-tags": ["61cd9c61af11497c1f0b0baa", "61cd9c61af1149687a0b0ba7"],
		"order": 4,
		"time": "05:39",
		"canonical-2": "http://www.8base.com/8base-academy/authorization-basics-with-roles-and-permissions",
		"published-date-initial-load": "2019-10-01T00:00:00.000Z",
		"video-link": "yE_tcaEsxfk",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "61cd9c61af114951e40b1030"
	}, {
		"_archived": false,
		"_draft": false,
		"name": "Working with GraphQL Queries in the API Explorer",
		"post-summary": "Course 3 of the 8base Academy video series explains writing GraphQL queries.",
		"slug": "working-with-graphql-queries-in-the-api-explorer",
		"thumbnail-image": {
			"fileId": "61cd9c61af11490a4b0b11a5",
			"url": "https://uploads-ssl.webflow.com/5e3890f50880451296c1896c/5ef2d0137badacd94da302df_c-thumbnail__video--15graphqlapiexplorer.png",
			"alt": null
		},
		"updated-on": "2020-07-13T16:56:54.437Z",
		"updated-by": "Collaborator_5e55457e71987f51d810ff2c",
		"created-on": "2020-06-23T15:09:40.008Z",
		"created-by": "Person_5a0f5e7fbd61b20001498154",
		"published-on": "2021-12-30T11:48:39.600Z",
		"published-by": "Person_5a0f5e7fbd61b20001498154",
		"academy-video-link": {
			"url": "https://youtu.be/l9r8RisRHEc",
			"metadata": {
				"width": 640,
				"height": 480,
				"html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fl9r8RisRHEc%3Ffeature%3Doembed&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dl9r8RisRHEc&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fl9r8RisRHEc%2Fhqdefault.jpg&key=96f1f04c5f4143bcb0f2e68c87d65feb&type=text%2Fhtml&schema=youtube\" width=\"640\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>",
				"aspectRatio": 0,
				"title": "8base Academy - Working with GraphQL Queries in the API Explorer - Course 3",
				"provider_name": "YouTube",
				"type": "video",
				"thumbnail_url": "https://i.ytimg.com/vi/l9r8RisRHEc/hqdefault.jpg",
				"author_name": "8base"
			}
		},
		"author": "61cd9c61af1149d1980b10aa",
		"transcript": "<p><em>* This is an automated transcript. Please excuse inaccuracies.<br></em></p><p><br></p><p>So, in this video we are going to go over how to write graph QL queries and we're going to do that in the API Explorer which you can find inside your ApS workspace. &nbsp;</p><p> &nbsp;</p><p>Let's jump right into it. &nbsp;</p><p> &nbsp;</p><p>So, if you want to follow along with this tutorial and actually write these exact same queries that I'll be writing you can do so by running through the first five steps of our QuickStart app. If you go to Docs.8base.com/gettingstarted/quickstart, you'll be able to find this tutorial and like I said just the first five steps and that will set up your workspace to have the exact same tables that I have defined as well as the same seed data that I imported. &nbsp;</p><p> &nbsp;</p><p>So, once you have your workspace set up or if you just want to follow along jump into the workspace and go over to the API Explorer, which you'll see in your left side menu. This is we're going to be for the rest of this video just to show you how to write two types of queries. One is a list query and the other is a table or a record specific query. So, one of the really cool things about 8base is that whenever you create or update a table we will generate or update the graph QL resources that you need to perform crud actions on that table- what does that mean? So, first off what I'm going to do is I'm going to delete all these comments right here so we can jump in and get started writing queries alright. So, I'm just going to type in query, give it curly braces. And before I get in because I'm a little bit familiar with the domain what I want to show you is if I jump over here to screen write and I open up the Documentation Explorer right. This is an introspection tool that will allow us to jump in and look at all the different types of queries mutations and subscriptions that we have defined and we can use when writing our graph QL statements. &nbsp;</p><p> &nbsp;</p><p>So, for right now in this application we have Brokers, we have properties, listings all these different types of table resources that you could think of as being part of let's say a real estate management application. So, I'm going to look at the Broker resource and you can see I have Broker and Broker list. These are the two types of graph QL queries that I have defined. So, Broker I'd have to pass an ID to because it's looking at a specific Broker. However, we're going to look at Broker list for now and query a list of results. So, you can see that out of the box you have filtering, you have ordering, pagination, all these different things that you can use to help shape the response that you want to get. &nbsp;</p><p> &nbsp;</p><p>So, if I jump in my query and I type in Broker you can see that we have a little bit of autocomplete going on here or Brokers list excuse me. And just to get going, I'm just going to say it okay for my Brokers list each item that it returns I want the ID and the nickname of the Broker so I'm going to run that query and the result pops up right here. And you can see we got a lot of duplicate nicknames for our Brokers. So, I'm just going to delete the nickname property and I'm going to jump in here and say that okay well for every Broker what I really want is, I want their listings and what I want for their listings is the count or the number of listings they have. And then for each listing item, I want- what's on that listing? I want the status and the price cool. &nbsp;</p><p> &nbsp;</p><p>I'm going to run that query and as you can see for every Broker, we have the Broker ID then for each Broker, we have their listings the number of listings they have as well as the status and price of that listing. So, what this just demonstrated is how easy it was for us to write a relational query and get back exactly the information that we're looking for and once again the power of this is knowing that you could actually do this from a client application. So, if you were developing a mobile app or any type of front-end application you would write this query there, execute it and then get back the information that you're looking for which is very different as I'm sure you can recognize and then what you would expect from a REST API. &nbsp;</p><p> &nbsp;</p><p>So, let's actually get a little bit more granular on this. So, here we're going to say, “Okay well we only want Brokers who…” then we're going to do a filter here. We want Brokers whose nickname contains- oh excuse me- so it contains and then just give it the letter A, right. So, in this example, we actually have a shorter list of Brokers because it's only returned ones whose name contains with the letter A, and we can actually add this type of filtering at multiple level of the relational query. So, for example here I wanted to do or let's say that I wanted to order the listings- let's do autocomplete- by price ascending. Boom! Do that! And now the prices have been ordered in ascending order. &nbsp;</p><p> &nbsp;</p><p>Once again, we are just changing and shaping this query as we want it to be and what's really cool is, we can even go a deeper level down into the query. What do I mean by that? So, right now we're starting the Brokers which has which are related to listings but listings also have relations. So, if for every listing we wanted to say, “Okay who is the seller of this listing?” And for that seller we want the user that that sort of belongs to- and again this is domain specific, but you get the idea. And we want their first name and their last name. Check that out. So, from the top level, we're getting our list of Brokers, for every Broker, we're getting all their listings, we're getting a aggregator that's counting them and then for each listing or that we have we're having the status the price that's an ascending order and then we are getting the seller which belongs to a user and the user’s first and last name- that is super cool. &nbsp;</p><p> &nbsp;</p><p>So, what we're going to do now right because I think that demonstrates a really good overview of some of the powerful things that you can do when you're creating lists queries right. And then of course as you know you can just dump into the Documentation Explorer over here and get a deeper or get a better look at all the different arguments that you can pass and how to use them. Let's just look at really quickly how you do a specific query for a specific record. So, if I were to jump back here, I'm just going to delete all this stuff inside and I were going to say, “Instead of looking for a Broker list, I just want a specific Broker and I'm going to pass it the ID as an argument.” And then on this Broker what I want to do is, have it or have it return the nickname of the Broker and I want to see the Brokers once again listings- build something similar to what we just had, but for a specific record. And what else do we got? For every listing that we have we want the seller before, we want the buyer and we want the buyers purchases and we want the number of purchases of the buyer had. Boom! Just like that right. &nbsp;</p><p> &nbsp;</p><p>So, once again we could just keep going and playing here, but I think this gives you a very good overview of all the different types of queries and how flexible the query and interface is when you're dealing with graph QL. I'm jumping over here just to the Broker query itself, so you can see that okay well these are the fields that you would have on the Broker as well as in the relationships that you can then filter, sort, page name, through whatever you need to do. but know that for every single table you create within your work space, all these types of calls are being automatically managed for you so that when you define them, they're ready to go right out of the box. &nbsp;</p><p> &nbsp;</p><p>I hope that you found this video valuable. if you're looking forward to staying up to date with future videos, please subscribe to the channel using the links below. And if you have any questions about some of the stuff that we went over, feel free to drop it in the comment section and I'll make sure to get back to you as soon as possible alright. Have a great rest of your day and looking forward to seeing you in future videos. </p><p><br></p>",
		"video-tags": ["61cd9c61af114910270b0ba6", "61cd9c61af11493d570b0bf0", "61cd9c61af11495fbb0b0bec"],
		"order": 3,
		"time": "08:49",
		"canonical-2": "http://www.8base.com/8base-academy/working-with-graphql-queries-in-the-api-explorer",
		"published-date-initial-load": "2019-10-01T00:00:00.000Z",
		"video-link": "l9r8RisRHEc",
		"_cid": "61cd9c61af11490c2f0b0918",
		"_id": "61cd9c61af11496c630b1031"
	}],
	"count": 37,
	"limit": 100,
	"offset": 0,
	"total": 37
}